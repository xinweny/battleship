(()=>{var t={875:(t,n,e)=>{function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function o(t,n){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=a(t))||n&&t&&"number"==typeof t.length){e&&(t=e);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,l=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return s=t.done,t},e:function(t){l=!0,i=t},f:function(){try{s||null==e.return||e.return()}finally{if(l)throw i}}}}function i(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||a(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(t,n){if(t){if("string"==typeof t)return s(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?s(t,n):void 0}}function s(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function l(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,n){if("object"!==r(t)||null===t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var o=e.call(t,"string");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===r(i)?i:String(i)),o)}var i}var c=e(431),u=e(447).checkEdgeCollisions,p=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.board=[],this.ships={carrier:new c(5,"carrier"),battleship:new c(4,"battleship"),cruiser:new c(3,"cruiser"),submarine:new c(3,"submarine"),patrolBoat:new c(2,"patrolBoat")},this.initBoard()}var n,e;return n=t,(e=[{key:"placeShip",value:function(t,n,e){var r=this.ships[t];r.place();var a=i(Array(r.length).keys()).map((function(t){return"x"===e?n+t:n+10*t}));if(this.checkCollisions(a,e,this.board)){var s,l=o(a);try{for(l.s();!(s=l.n()).done;){var c=s.value;this.board[c].ship=r.name}}catch(t){l.e(t)}finally{l.f()}return!0}return!1}},{key:"getShipsPlaced",value:function(){var t=this;return Object.keys(this.ships).filter((function(n){return t.ships[n].isPlaced}))}},{key:"initBoard",value:function(){var t=this;this.board=[];for(var n=0;n<100;n+=1)this.board.push({ship:null,isShot:!1});Object.keys(this.ships).forEach((function(n){t.ships[n].isPlaced=!1}))}},{key:"isShotHit",value:function(t){return this.board[t].isShot&&null!=this.board[t].ship}},{key:"receiveAttack",value:function(t){var n={ship:null,cell:t};if(!this.board[t].isShot){this.board[t].isShot=!0;var e=this.board[t].ship;if(e){var r=this.ships[e];n.ship=r,r.hit()}else n.ship=null}return n}},{key:"shipAt",value:function(t){return this.ships[this.board[t].ship]}},{key:"shipsSunk",value:function(){var t=this,n=0;return Object.keys(this.ships).forEach((function(e){t.ships[e].isSunk()&&(n+=1)})),n}},{key:"placeShipsRandomly",value:function(){var t=this,n=["x","y"],e=i(Array(100).keys());Object.keys(this.ships).forEach((function(r){for(var o=!1;!o;){var i=e[Math.floor(100*Math.random())],a=n[Math.floor(2*Math.random())];o=t.placeShip(r,i,a)}}))}},{key:"checkCollisions",value:function(t,n){if(!u(t,n))return!1;var e,r=o(t);try{for(r.s();!(e=r.n()).done;){var i=e.value;if(null!=this.board[i].ship)return!1}}catch(t){r.e(t)}finally{r.f()}return!0}}])&&l(n.prototype,e),Object.defineProperty(n,"prototype",{writable:!1}),t}();t.exports=p},415:(t,n,e)=>{function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function o(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,n){if("object"!==r(t)||null===t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var o=e.call(t,"string");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===r(i)?i:String(i)),o)}var i}var i=e(875),a=function(){function t(n){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.board=new i,this.ships=this.board.ships,this.name=n?"p2":"p1",this.movesMade=[],n&&(this.AI=n)}var n,e;return n=t,(e=[{key:"fireShot",value:function(t,n){var e=t.board.receiveAttack(n);return this.movesMade.push(e),e}},{key:"getCell",value:function(t){return this.board.board[t]}}])&&o(n.prototype,e),Object.defineProperty(n,"prototype",{writable:!1}),t}();t.exports=a},431:t=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function e(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==n(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,"string");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===n(i)?i:String(i)),o)}var i}var r=function(){function t(n,e){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.length=n,this.name=e,this.hits=0,this.sunk=!1,this.isPlaced=!1}var n,r;return n=t,(r=[{key:"hit",value:function(){this.hits+=1,this.hits===this.length&&(this.sunk=!0)}},{key:"isSunk",value:function(){return this.sunk}},{key:"place",value:function(){this.isPlaced=!0}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();t.exports=r},447:(t,n,e)=>{"use strict";function r(t){return function(t){if(Array.isArray(t))return i(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||o(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t,n){if(t){if("string"==typeof t)return i(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?i(t,n):void 0}}function i(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function a(t,n){var e,r=function(t,n){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=o(t))){e&&(t=e);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,s=!0,l=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return s=t.done,t},e:function(t){l=!0,a=t},f:function(){try{s||null==e.return||e.return()}finally{if(l)throw a}}}}(t);try{for(r.s();!(e=r.n()).done;){var i=e.value;if(i<0||i>99)return!1}}catch(t){r.e(t)}finally{r.f()}if(1===t.length)return!0;if("x"===n||1===n||-1===n){var a=t.map((function(t){return t.toString()}));if(a.some((function(t){return"9"===t.slice(-1)&&a.indexOf(t)!==a.length-1})))return!1}return!0}function s(t,n){var e=document.createElement(t);return n&&(e.className=n),e}function l(t){return t[Math.floor(Math.random()*t.length)]}function c(t){var n=t.filter((function(t){return null!=t.ship&&!t.ship.isSunk()}));return n.length>0?r(new Set(n.map((function(t){return t.ship})))):[]}e.r(n),e.d(n,{checkEdgeCollisions:()=>a,createElement:()=>s,getActiveShips:()=>c,getNextShip:()=>p,projectShipLocs:()=>d,randElement:()=>l,shipLengths:()=>u});var u={carrier:5,battleship:4,cruiser:3,submarine:3,patrolBoat:2};function p(t){var n=Object.keys(u),e=n.indexOf(t);return e<4?n[e+1]:n[e]}function d(t,n,e){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;return r(Array(e).keys()).map((function(e){return t+n*(e+o)}))}},559:(t,n,e)=>{"use strict";e.d(n,{Z:()=>s});var r=e(537),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([t.id,".board-info {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(2, min-content);\n\tgrid-template-columns: repeat(5, 1fr);\n\tjustify-items: center;\n}\n\n.board-info p {\n\tfont-size: 8px;\n}\n\n.progress-meter {\n\twidth: 50px;\n\t--meter-background: white;\n}\n\nmeter::-webkit-meter-bar {\n\tbackground: none;\n\tbackground-image: var(--meter-background);\n\tborder: none;\n\tborder-radius: 2px;\n}\n\n\n#p1-board-info meter::-webkit-meter-optimum-value {\n\tbackground: rgb(163, 19, 19);\n}\n\n#p2-board-info meter::-webkit-meter-optimum-value {\n\tbackground: #3343AE;\n}","",{version:3,sources:["webpack://./src/styles/components/board-info.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,0CAA0C;CAC1C,qCAAqC;CACrC,qBAAqB;AACtB;;AAEA;CACC,cAAc;AACf;;AAEA;CACC,WAAW;CACX,yBAAyB;AAC1B;;AAEA;CACC,gBAAgB;CAChB,yCAAyC;CACzC,YAAY;CACZ,kBAAkB;AACnB;;;AAGA;CACC,4BAA4B;AAC7B;;AAEA;CACC,mBAAmB;AACpB",sourcesContent:[".board-info {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(2, min-content);\n\tgrid-template-columns: repeat(5, 1fr);\n\tjustify-items: center;\n}\n\n.board-info p {\n\tfont-size: 8px;\n}\n\n.progress-meter {\n\twidth: 50px;\n\t--meter-background: white;\n}\n\nmeter::-webkit-meter-bar {\n\tbackground: none;\n\tbackground-image: var(--meter-background);\n\tborder: none;\n\tborder-radius: 2px;\n}\n\n\n#p1-board-info meter::-webkit-meter-optimum-value {\n\tbackground: rgb(163, 19, 19);\n}\n\n#p2-board-info meter::-webkit-meter-optimum-value {\n\tbackground: #3343AE;\n}"],sourceRoot:""}]);const s=a},411:(t,n,e)=>{"use strict";e.d(n,{Z:()=>u});var r=e(537),o=e.n(r),i=e(645),a=e.n(i),s=e(131),l=e(561),c=a()(o());c.i(s.Z),c.i(l.Z),c.push([t.id,"#body {\n\tdisplay: grid;\n\tgrid-template-rows: auto 1fr;\n\tbackground-color: rgb(221, 175, 252);\n}\n\n#body, button {\n\tfont-family: 'TypoRoundLight', sans-serif;\n}\n\nbutton {\n\tborder: none;\n\tbackground-color: transparent;\n}","",{version:3,sources:["webpack://./src/styles/components/body.css"],names:[],mappings:"AAGA;CACC,aAAa;CACb,4BAA4B;CAC5B,oCAAoC;AACrC;;AAEA;CACC,yCAAyC;AAC1C;;AAEA;CACC,YAAY;CACZ,6BAA6B;AAC9B",sourcesContent:["@import './message-window.css';\n@import './game-window.css';\n\n#body {\n\tdisplay: grid;\n\tgrid-template-rows: auto 1fr;\n\tbackground-color: rgb(221, 175, 252);\n}\n\n#body, button {\n\tfont-family: 'TypoRoundLight', sans-serif;\n}\n\nbutton {\n\tborder: none;\n\tbackground-color: transparent;\n}"],sourceRoot:""}]);const u=c},760:(t,n,e)=>{"use strict";e.d(n,{Z:()=>s});var r=e(537),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([t.id,"#footer {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tgap: 8px;\n\tpadding: 8px;\n\tfont-family: 'TypoRoundLight', sans-serif;\n\tbackground-color: rgb(113, 47, 255);\n\tcolor: white;\n}\n\n#github-logo {\n\twidth: 25px;\n\theight: 25px;\n}\n\n#footer > p > a {\n\tcolor: rgb(177, 246, 255);\n\tfont-weight: bold;\n}","",{version:3,sources:["webpack://./src/styles/components/footer.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,mBAAmB;CACnB,uBAAuB;CACvB,QAAQ;CACR,YAAY;CACZ,yCAAyC;CACzC,mCAAmC;CACnC,YAAY;AACb;;AAEA;CACC,WAAW;CACX,YAAY;AACb;;AAEA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["#footer {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tgap: 8px;\n\tpadding: 8px;\n\tfont-family: 'TypoRoundLight', sans-serif;\n\tbackground-color: rgb(113, 47, 255);\n\tcolor: white;\n}\n\n#github-logo {\n\twidth: 25px;\n\theight: 25px;\n}\n\n#footer > p > a {\n\tcolor: rgb(177, 246, 255);\n\tfont-weight: bold;\n}"],sourceRoot:""}]);const s=a},3:(t,n,e)=>{"use strict";e.d(n,{Z:()=>h});var r=e(537),o=e.n(r),i=e(645),a=e.n(i),s=e(667),l=e.n(s),c=new URL(e(342),e.b),u=new URL(e(688),e.b),p=a()(o()),d=l()(c),f=l()(u);p.push([t.id,".game-board {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(10, 1fr);\n\tgrid-template-columns: repeat(10, 1fr);\n\tgap: 2px;\n\tbackground-color: skyblue;\n\tpadding: 4px;\n\tborder: 4px solid navy;\n\tborder-radius: 4px;\n\tmargin-bottom: 8px;\n}\n\n#p2-board .cell:not(.hit):hover {\n\tbackground-color: rgb(147, 255, 248);\n}\n\n.cell {\n\tposition: relative;\n\twidth: 30px;\n\theight: 30px;\n\tbackground-color: white;\n\tborder-radius: 4px;\n}\n\n#p1-board .cell.has-ship, #p2-board .cell.has-ship.hit {\n\tbackground-color: #3343AE;\n}\n\n#p1-board .cell.has-ship.hit {\n\tbackground-color: rgb(163, 19, 19);\n}\n\n.cell.valid {\n\tbackground-color: rgb(147, 255, 248);\n}\n\n.cell.invalid {\n\tbackground-color: rgb(255, 92, 92);\n}\n\n#p1-board .cell.has-ship.hit::after, #p2-board .cell.has-ship.hit::after {\n\tcontent: url("+d+");\n\tposition: absolute; \n\tinset: 0;\n\tmargin: auto;\n\twidth: 30px;\n\theight: 30px;\n}\n\n.cell.hit::after {\n\tcontent: url("+f+");\n\tposition: absolute; \n\tinset: 0;\n\tmargin: auto;\n\twidth: 30px;\n\theight: 30px;\n}","",{version:3,sources:["webpack://./src/styles/components/game-board.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,mCAAmC;CACnC,sCAAsC;CACtC,QAAQ;CACR,yBAAyB;CACzB,YAAY;CACZ,sBAAsB;CACtB,kBAAkB;CAClB,kBAAkB;AACnB;;AAEA;CACC,oCAAoC;AACrC;;AAEA;CACC,kBAAkB;CAClB,WAAW;CACX,YAAY;CACZ,uBAAuB;CACvB,kBAAkB;AACnB;;AAEA;CACC,yBAAyB;AAC1B;;AAEA;CACC,kCAAkC;AACnC;;AAEA;CACC,oCAAoC;AACrC;;AAEA;CACC,kCAAkC;AACnC;;AAEA;CACC,gDAAsC;CACtC,kBAAkB;CAClB,QAAQ;CACR,YAAY;CACZ,WAAW;CACX,YAAY;AACb;;AAEA;CACC,gDAAoC;CACpC,kBAAkB;CAClB,QAAQ;CACR,YAAY;CACZ,WAAW;CACX,YAAY;AACb",sourcesContent:[".game-board {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(10, 1fr);\n\tgrid-template-columns: repeat(10, 1fr);\n\tgap: 2px;\n\tbackground-color: skyblue;\n\tpadding: 4px;\n\tborder: 4px solid navy;\n\tborder-radius: 4px;\n\tmargin-bottom: 8px;\n}\n\n#p2-board .cell:not(.hit):hover {\n\tbackground-color: rgb(147, 255, 248);\n}\n\n.cell {\n\tposition: relative;\n\twidth: 30px;\n\theight: 30px;\n\tbackground-color: white;\n\tborder-radius: 4px;\n}\n\n#p1-board .cell.has-ship, #p2-board .cell.has-ship.hit {\n\tbackground-color: #3343AE;\n}\n\n#p1-board .cell.has-ship.hit {\n\tbackground-color: rgb(163, 19, 19);\n}\n\n.cell.valid {\n\tbackground-color: rgb(147, 255, 248);\n}\n\n.cell.invalid {\n\tbackground-color: rgb(255, 92, 92);\n}\n\n#p1-board .cell.has-ship.hit::after, #p2-board .cell.has-ship.hit::after {\n\tcontent: url('../../assets/cross.svg');\n\tposition: absolute; \n\tinset: 0;\n\tmargin: auto;\n\twidth: 30px;\n\theight: 30px;\n}\n\n.cell.hit::after {\n\tcontent: url('../../assets/dot.svg');\n\tposition: absolute; \n\tinset: 0;\n\tmargin: auto;\n\twidth: 30px;\n\theight: 30px;\n}"],sourceRoot:""}]);const h=p},159:(t,n,e)=>{"use strict";e.d(n,{Z:()=>s});var r=e(537),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([t.id,".game-buttons {\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr;\n\tgrid-template-rows: auto auto;\n}\n\n.game-buttons button {\n\tfont-size: 16px;\n}\n\n.game-buttons button:hover {\n\tcolor: white;\n}\n\n.game-buttons button:active {\n\tcolor: rgb(147, 255, 248);\n}","",{version:3,sources:["webpack://./src/styles/components/game-buttons.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,8BAA8B;CAC9B,6BAA6B;AAC9B;;AAEA;CACC,eAAe;AAChB;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,yBAAyB;AAC1B",sourcesContent:[".game-buttons {\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr;\n\tgrid-template-rows: auto auto;\n}\n\n.game-buttons button {\n\tfont-size: 16px;\n}\n\n.game-buttons button:hover {\n\tcolor: white;\n}\n\n.game-buttons button:active {\n\tcolor: rgb(147, 255, 248);\n}"],sourceRoot:""}]);const s=a},561:(t,n,e)=>{"use strict";e.d(n,{Z:()=>p});var r=e(537),o=e.n(r),i=e(645),a=e.n(i),s=e(3),l=e(159),c=e(559),u=a()(o());u.i(s.Z),u.i(l.Z),u.i(c.Z),u.push([t.id,"#game-window h2 {\n\ttext-align: center;\n}\n\n#game-window {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-around;\n\tflex-wrap: wrap;\n}\n\n.board-label {\n\ttext-align: center;\n\tmargin-bottom: 8px;\n\tfont-size: 24px;\n}","",{version:3,sources:["webpack://./src/styles/components/game-window.css"],names:[],mappings:"AAIA;CACC,kBAAkB;AACnB;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,6BAA6B;CAC7B,eAAe;AAChB;;AAEA;CACC,kBAAkB;CAClB,kBAAkB;CAClB,eAAe;AAChB",sourcesContent:["@import './game-board.css';\n@import './game-buttons.css';\n@import './board-info.css';\n\n#game-window h2 {\n\ttext-align: center;\n}\n\n#game-window {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-around;\n\tflex-wrap: wrap;\n}\n\n.board-label {\n\ttext-align: center;\n\tmargin-bottom: 8px;\n\tfont-size: 24px;\n}"],sourceRoot:""}]);const p=u},637:(t,n,e)=>{"use strict";e.d(n,{Z:()=>s});var r=e(537),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([t.id,"#header {\n\tpadding: 16px;\n\tbackground-color: rgb(113, 47, 255);\n\tcolor: white;\n}\n\n#header h1 {\n\tmargin-left: 24px;\n\tfont-family: 'AristaPro', sans-serif;\n\tfont-size: 48px;\n}\n\n","",{version:3,sources:["webpack://./src/styles/components/header.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,mCAAmC;CACnC,YAAY;AACb;;AAEA;CACC,iBAAiB;CACjB,oCAAoC;CACpC,eAAe;AAChB",sourcesContent:["#header {\n\tpadding: 16px;\n\tbackground-color: rgb(113, 47, 255);\n\tcolor: white;\n}\n\n#header h1 {\n\tmargin-left: 24px;\n\tfont-family: 'AristaPro', sans-serif;\n\tfont-size: 48px;\n}\n\n"],sourceRoot:""}]);const s=a},131:(t,n,e)=>{"use strict";e.d(n,{Z:()=>s});var r=e(537),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([t.id,"#message-window {\n\theight: 48px;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr auto 60px;\n\tmargin-bottom: 16px;\n\tbackground-color: rgb(58, 13, 156);\n\tcolor: white;\n\tgap: 24px;\n}\n\n.game-message {\n\ttext-align: center;\n\tmargin: auto;\n\tfont-size: 20px;\n}\n\n#message-window button {\n\tcolor: white;\n\tmargin-top: auto;\n\tmargin-bottom: auto;\n}\n\n#message-window button:active {\n\tcolor: rgb(147, 255, 248);\n}\n\n.start-button {\n\tfont-size: 24px;\n\ttransition: font-size 0.5s ease;\n}\n\n.start-button:hover {\n\tfont-size: 28px;\n}\n\n#turn-counter {\n\tmargin: auto;\n}\n\n.restart-button {\n\tfont-size: 16px;\n\tmargin-right: 16px;\n\ttransition: font-size 0.5s ease;\n}\n\n.restart-button:hover {\n\tfont-size: 18px;\n}","",{version:3,sources:["webpack://./src/styles/components/message-window.css"],names:[],mappings:"AAAA;CACC,YAAY;CACZ,aAAa;CACb,oCAAoC;CACpC,mBAAmB;CACnB,kCAAkC;CAClC,YAAY;CACZ,SAAS;AACV;;AAEA;CACC,kBAAkB;CAClB,YAAY;CACZ,eAAe;AAChB;;AAEA;CACC,YAAY;CACZ,gBAAgB;CAChB,mBAAmB;AACpB;;AAEA;CACC,yBAAyB;AAC1B;;AAEA;CACC,eAAe;CACf,+BAA+B;AAChC;;AAEA;CACC,eAAe;AAChB;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,eAAe;CACf,kBAAkB;CAClB,+BAA+B;AAChC;;AAEA;CACC,eAAe;AAChB",sourcesContent:["#message-window {\n\theight: 48px;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr auto 60px;\n\tmargin-bottom: 16px;\n\tbackground-color: rgb(58, 13, 156);\n\tcolor: white;\n\tgap: 24px;\n}\n\n.game-message {\n\ttext-align: center;\n\tmargin: auto;\n\tfont-size: 20px;\n}\n\n#message-window button {\n\tcolor: white;\n\tmargin-top: auto;\n\tmargin-bottom: auto;\n}\n\n#message-window button:active {\n\tcolor: rgb(147, 255, 248);\n}\n\n.start-button {\n\tfont-size: 24px;\n\ttransition: font-size 0.5s ease;\n}\n\n.start-button:hover {\n\tfont-size: 28px;\n}\n\n#turn-counter {\n\tmargin: auto;\n}\n\n.restart-button {\n\tfont-size: 16px;\n\tmargin-right: 16px;\n\ttransition: font-size 0.5s ease;\n}\n\n.restart-button:hover {\n\tfont-size: 18px;\n}"],sourceRoot:""}]);const s=a},756:(t,n,e)=>{"use strict";e.d(n,{Z:()=>g});var r=e(537),o=e.n(r),i=e(645),a=e.n(i),s=e(637),l=e(411),c=e(760),u=e(667),p=e.n(u),d=new URL(e(549),e.b),f=new URL(e(813),e.b),h=new URL(e(954),e.b),A=new URL(e(227),e.b),m=a()(o());m.i(s.Z),m.i(l.Z),m.i(c.Z);var b=p()(d),y=p()(f),v=p()(h),C=p()(A);m.push([t.id,"* {\n\tpadding: 0;\n\tmargin: 0;\n}\n\n@font-face {\n  font-family: 'TypoRoundLight';\n  src: url("+b+") format('woff2'),\n       url("+y+") format('woff');\n}\n\n@font-face {\n  font-family: 'AristaPro';\n  src: url("+v+") format('woff2'),\n       url("+C+") format('woff');\n}\n\na {\n\ttext-decoration: none;\n}\n\nbody {\n\theight: 100vh;\n\twidth: 100vw;\n\tdisplay: grid;\n\tgrid-template-rows: auto 1fr auto;\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAIA;CACC,UAAU;CACV,SAAS;AACV;;AAEA;EACE,6BAA6B;EAC7B;6DACgE;AAClE;;AAEA;EACE,wBAAwB;EACxB;6DACkE;AACpE;;AAEA;CACC,qBAAqB;AACtB;;AAEA;CACC,aAAa;CACb,YAAY;CACZ,aAAa;CACb,iCAAiC;AAClC",sourcesContent:["@import './components/header.css';\n@import './components/body.css';\n@import './components/footer.css';\n\n* {\n\tpadding: 0;\n\tmargin: 0;\n}\n\n@font-face {\n  font-family: 'TypoRoundLight';\n  src: url('../assets/fonts/typo-round-light.woff2') format('woff2'),\n       url('../assets/fonts/typo-round-light.woff') format('woff');\n}\n\n@font-face {\n  font-family: 'AristaPro';\n  src: url('../assets/fonts/arista-pro-regular.woff2') format('woff2'),\n       url('../assets/fonts/arista-pro-regular.woff') format('woff');\n}\n\na {\n\ttext-decoration: none;\n}\n\nbody {\n\theight: 100vh;\n\twidth: 100vw;\n\tdisplay: grid;\n\tgrid-template-rows: auto 1fr auto;\n}"],sourceRoot:""}]);const g=m},645:t=>{"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",r=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),r&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),r&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),e&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=e):u[2]=e),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),n.push(u))}},n}},667:t=>{"use strict";t.exports=function(t,n){return n||(n={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),n.hash&&(t+=n.hash),/["'() \t\n]|(%20)/.test(t)||n.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{"use strict";t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:t=>{"use strict";var n=[];function e(t){for(var e=-1,r=0;r<n.length;r++)if(n[r].identifier===t){e=r;break}return e}function r(t,r){for(var i={},a=[],s=0;s<t.length;s++){var l=t[s],c=r.base?l[0]+r.base:l[0],u=i[c]||0,p="".concat(c," ").concat(u);i[c]=u+1;var d=e(p),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)n[d].references++,n[d].updater(f);else{var h=o(f,r);r.byIndex=s,n.splice(s,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function o(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=e(i[a]);n[s].references--}for(var l=r(t,o),c=0;c<i.length;c++){var u=e(i[c]);0===n[u].references&&(n[u].updater(),n.splice(u,1))}i=l}}},569:t=>{"use strict";var n={};t.exports=function(t,e){var r=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:t=>{"use strict";t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{"use strict";t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{"use strict";t.exports=function(t){var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{"use strict";t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}},342:(t,n,e)=>{"use strict";t.exports=e.p+"assets/cross.svg"},688:(t,n,e)=>{"use strict";t.exports=e.p+"assets/dot.svg"},227:(t,n,e)=>{"use strict";t.exports=e.p+"assets/arista-pro-regular.woff"},954:(t,n,e)=>{"use strict";t.exports=e.p+"assets/arista-pro-regular.woff2"},813:(t,n,e)=>{"use strict";t.exports=e.p+"assets/typo-round-light.woff"},549:(t,n,e)=>{"use strict";t.exports=e.p+"assets/typo-round-light.woff2"}},n={};function e(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return t[r](i,i.exports,e),i.exports}e.m=t,e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var r=n.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{"use strict";var t=e(415),n=e.n(t),r=e(447);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function i(t,n){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=s(t))||n&&t&&"number"==typeof t.length){e&&(t=e);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,l=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return a=t.done,t},e:function(t){l=!0,i=t},f:function(){try{a||null==e.return||e.return()}finally{if(l)throw i}}}}function a(t){return function(t){if(Array.isArray(t))return l(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||s(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t,n){if(t){if("string"==typeof t)return l(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?l(t,n):void 0}}function l(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function c(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,i=function(t,n){if("object"!==o(t)||null===t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var r=e.call(t,"string");if("object"!==o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===o(i)?i:String(i)),r)}var i}const u=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t);var n=(0,r.createElement)("button","start-button");n.innerText="Start Game";var e=(0,r.createElement)("button","restart-button");e.innerText="Restart";var o=(0,r.createElement)("p");o.id="turn-counter",o.innerText="Turn 1",this.elements={p1GameWindow:document.getElementById("p1-window"),p2GameWindow:document.getElementById("p2-window"),p1Board:document.getElementById("p1-board"),p2Board:document.getElementById("p2-board"),messageWindow:document.getElementById("message-window"),gameMessage:document.querySelector(".game-message"),startButton:n,restartButton:e,turnCounter:o}}var n,e;return n=t,e=[{key:"renderBoard",value:function(t){var n=document.getElementById("".concat(t.name,"-board"));n.innerHTML="",this.elements["".concat(t.name,"GameWindow")].style.display="block";for(var e=t.board.board,o=0;o<100;o+=1){var i=(0,r.createElement)("div","cell");i.setAttribute("data-index",o),e[o].ship&&i.classList.add("has-ship"),n.append(i)}}},{key:"colorBoard",value:function(t){for(var n=0;n<100;n+=1){var e=this.elements.p1Board.children[n];e.className="cell",null!=t[n].ship&&e.classList.add("has-ship")}}},{key:"setMessage",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];n&&this.renderInMessageWindow(this.elements.gameMessage),this.elements.gameMessage.innerText=t}},{key:"renderStartScreen",value:function(){this.setMessage("Place your carrier (Press space to rotate)",!0);var t=(0,r.createElement)("div","game-buttons"),n=(0,r.createElement)("button","random-button");n.innerText="Random";var e=(0,r.createElement)("button","reset-button");e.innerText="Reset",t.append(n),t.append(e),this.elements.randomButton=n,this.elements.resetButton=e,this.elements.p1GameWindow.append(t),this.elements.p2GameWindow.style.display="none"}},{key:"renderInMessageWindow",value:function(t){this.elements.messageWindow.innerHTML="",this.elements.messageWindow.append(t)}},{key:"renderBoardInfo",value:function(t){var n=(0,r.createElement)("div","board-info");n.id="".concat(t.name,"-board-info");var e=t.ships;Object.keys(e).forEach((function(t){var e="patrolBoat"===t?"patrol boat":t,o=(0,r.createElement)("p","ship-name");o.innerText=e,n.append(o)})),Object.keys(e).forEach((function(o){var i=e[o].length,s=(0,r.createElement)("meter","progress-meter");s.id="".concat(t.name,"-").concat(o,"-meter"),s.setAttribute("value",0),s.setAttribute("min",0),s.setAttribute("max",i);var l=a(Array(i-1).keys()).map((function(t){var n=Math.round(100/i),e=n*(t+1),r=e+1,o=t===i-2?100:n*(t+2),a=0===t?"white 0%, white ".concat(e,"%, "):"";return"".concat(a,"black ").concat(e,"%, black ").concat(r,"%, white ").concat(r,"%, white ").concat(o,"%")})).join(", "),c="linear-gradient(90deg, ".concat(l,")");s.style.setProperty("--meter-background",c),n.append(s)})),this.elements["".concat(t.name,"GameWindow")].append(n)}},{key:"bindMouseOverCell",value:function(t){var n,e=this,r=i(this.elements.p1Board.children);try{for(r.s();!(n=r.n()).done;)n.value.addEventListener("mouseover",(function(n){var r=parseInt(n.target.dataset.index,10),o=t(r);if(o.viewLocs){var a,s=o.valid?"valid":"invalid",l=i(o.boardState);try{for(l.s();!(a=l.n()).done;){var c=a.value,u=o.boardState.indexOf(c),p=e.elements.p1Board.querySelector('.cell[data-index="'.concat(u,'"]'));o.viewLocs.includes(u)&&!c.ship?p.classList.add(s):c.ship?p.classList.add("has-ship"):p.className="cell"}}catch(t){l.e(t)}finally{l.f()}}}))}catch(t){r.e(t)}finally{r.f()}}},{key:"bindPressSpaceKey",value:function(t){document.addEventListener("keyup",(function(n){if("Space"===n.code){var e=a(document.querySelectorAll(":hover")).slice(-1)[0];if(e.classList.contains("cell")){t();var r=new Event("mouseover");e.dispatchEvent(r)}}}))}},{key:"bindClickPlacementCell",value:function(t){var n=this;this.elements.p1Board.addEventListener("click",(function(e){var r=parseInt(e.target.dataset.index,10);if(n.elements.p1Board.children[r].classList.contains("valid")){var o=t(r);n.colorBoard(o.board);var i="patrolBoat"===o.nextShip?"patrol boat":o.nextShip;null!=i?n.setMessage("Place your ".concat(i," (Press space to rotate)")):n.renderInMessageWindow(n.elements.startButton)}}))}},{key:"bindClickOpponentCell",value:function(t,n){var e,r=this,o=i("p1"===n.name?this.elements.p2Board.children:this.elements.p1Board.children);try{var a=function(){var o=e.value;o.addEventListener("click",(function(e){var i=parseInt(e.target.dataset.index,10),a=t(i);if(a.validMove){var s=a.opponent.board.board,l=s[i].ship;if("p1"===n.name&&(r.elements.turnCounter.innerText="Turn ".concat(a.turnCount)),o.classList.add("hit"),l&&s[i].isShot){var c="patrolBoat"===l?"patrol boat":l;r.setMessage("You hit the ".concat(c));var u=document.getElementById("".concat(a.opponent.name,"-").concat(l,"-meter")),p=parseInt(u.getAttribute("value"),10)+1;if(u.setAttribute("value",p),a.winner){var d="p1"===n.name?"You won":"You lost";r.setMessage(d),r.resetBoardEventListeners("p2")}}else a.winner||r.setMessage("")}else"p1"!==n.name||a.winner||r.setMessage("You already shot at that cell")}))};for(o.s();!(e=o.n()).done;)a()}catch(t){o.e(t)}finally{o.f()}}},{key:"bindClickRandomButton",value:function(t){var n=this;this.elements.randomButton.addEventListener("click",(function(){var e=t();n.colorBoard(e),n.elements.messageWindow.innerHTML="",n.elements.messageWindow.append(n.elements.startButton)}))}},{key:"bindClickResetButton",value:function(t){var n=this;this.elements.resetButton.addEventListener("click",(function(){var e=t();n.colorBoard(e),n.setMessage("Place your carrier (Press space to rotate)",!0)}))}},{key:"bindClickStartButton",value:function(t){var n=this;this.elements.startButton.addEventListener("click",(function(){n.elements.p1GameWindow.removeChild(n.elements.p1GameWindow.lastChild);for(var e=0,o=["p1GameWindow","p2GameWindow"];e<o.length;e++){var i=o[e],a=(0,r.createElement)("p","board-label");a.innerText="p1GameWindow"===i?"Computer":"Player",n.elements[i].prepend(a)}t(),n.setMessage("Click to fire a shot",!0),n.elements.messageWindow.append(n.elements.turnCounter),n.elements.messageWindow.append(n.elements.restartButton)}))}},{key:"bindClickRestartButton",value:function(t){var n=this;this.elements.restartButton.addEventListener("click",(function(){for(var e=0,r=["p1GameWindow","p2GameWindow"];e<r.length;e++){var o=r[e],i=n.elements[o];i.removeChild(i.firstChild),i.removeChild(i.lastChild)}t()}))}},{key:"resetBoardEventListeners",value:function(t){var n=this.elements["".concat(t,"Board")],e=n.cloneNode(!0);n.parentNode.replaceChild(e,n),this.elements["".concat(t,"Board")]=e}},{key:"getCell",value:function(t,n){return this.elements["".concat(t,"Board")].children[n]}}],e&&c(n.prototype,e),Object.defineProperty(n,"prototype",{writable:!1}),t}();var p=e(875),d=e.n(p);function f(t){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f(t)}function h(t,n){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=m(t))||n&&t&&"number"==typeof t.length){e&&(t=e);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,s=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return a=t.done,t},e:function(t){s=!0,i=t},f:function(){try{a||null==e.return||e.return()}finally{if(s)throw i}}}}function A(t){return function(t){if(Array.isArray(t))return b(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||m(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(t,n){if(t){if("string"==typeof t)return b(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?b(t,n):void 0}}function b(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function y(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,n){if("object"!==f(t)||null===t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var r=e.call(t,"string");if("object"!==f(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===f(o)?o:String(o)),r)}var o}const v=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.cellsHit={carrier:[],battleship:[],cruiser:[],submarine:[],patrolBoat:[]},this.modelBoard=(new(d())).board,this.offsets=[-1,1,-10,10]}var n,e;return n=t,(e=[{key:"getRandomShot",value:function(t){var n=t.map((function(t){return t.cell})),e=A(Array(100).keys()).filter((function(t){return!n.includes(t)}));return(0,r.randElement)(e)}},{key:"getSmartShot",value:function(t){if(0===t.length)return this.getRandomShot(t);var n=null,e=t.slice(-1)[0],o=e.cell,i=e.ship;if(i&&!i.isSunk())this.cellsHit[i.name].push(o),this.modelBoard[o].ship=i,n=this.findSuitableMoves(i);else{var a=(0,r.getActiveShips)(t);if(a.length>0){var s=a.slice(-1)[0];n=this.findSuitableMoves(s)}else{var l=this.getUndiscoveredShipLengths(),c=(0,r.randElement)(l),u=this.modelValidPlacements(c);n=(0,r.randElement)((0,r.randElement)(u))}}return n}},{key:"findSuitableMoves",value:function(t){var n=this.cellsHit[t.name],e=[];if(1===n.length){var o,i=n[0],a=h(this.offsets);try{for(a.s();!(o=a.n()).done;){var s=o.value,l=this.findValidProjection(i,s,t.length-1);l&&e.push(l)}}catch(t){a.e(t)}finally{a.f()}}else{var c,u=[Math.min.apply(Math,A(n)),Math.max.apply(Math,A(n))];c=(u[1]-u[0])%10==0?this.offsets.slice(2):this.offsets.slice(0,2);for(var p=0;p<2;p+=1){var d=u[p],f=c[p],m=this.findValidProjection(d,f,t.length-n.length);null!=m&&e.push(m)}}return(0,r.randElement)(e)}},{key:"modelValidPlacements",value:function(t){var n,e=[],o=h(this.getEmptyLocs());try{for(o.s();!(n=o.n()).done;)for(var i=n.value,a=0,s=[1,10];a<s.length;a++){var l=s[a],c=(0,r.projectShipLocs)(i,l,t);this.checkCollisions(c,l)&&e.push(c)}}catch(t){o.e(t)}finally{o.f()}return e}},{key:"clickCell",value:function(t,n){this.modelBoard[t].isShot=!0,n.click()}},{key:"getUndiscoveredShipLengths",value:function(){var t=this,n=[];return Object.keys(this.cellsHit).forEach((function(e){var o=r.shipLengths[e];0===t.cellsHit[e].length&&n.push(o)})),n}},{key:"getEmptyLocs",value:function(){var t=this;return this.modelBoard.filter((function(t){return!t.isShot})).map((function(n){return t.modelBoard.indexOf(n)}))}},{key:"checkCollisions",value:function(t,n){if(!(0,r.checkEdgeCollisions)(t,n))return!1;var e,o=h(t);try{for(o.s();!(e=o.n()).done;){var i=e.value;if(this.modelBoard[i].isShot)return!1}}catch(t){o.e(t)}finally{o.f()}return!0}},{key:"findValidProjection",value:function(t,n,e){for(var o=e;o>0;){var i=(0,r.projectShipLocs)(t,n,o,1);if(this.checkCollisions(i,n))return t+n;o-=1}return null}}])&&y(n.prototype,e),Object.defineProperty(n,"prototype",{writable:!1}),t}();function C(t){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},C(t)}function g(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function w(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,n){if("object"!==C(t)||null===t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var r=e.call(t,"string");if("object"!==C(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===C(o)?o:String(o)),r)}var o}const k=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.init()}var e,o;return e=t,(o=[{key:"init",value:function(){this.p1=new(n()),this.p2=new(n())(new v),this.view=new u,this.turn="p1",this.turnCounter=1,this.winner=null,this.placementState={axis:"x",currentShip:"carrier",allShipsPlaced:!1}}},{key:"switchTurn",value:function(){this.turn="p1"===this.turn?"p2":"p1"}},{key:"checkWin",value:function(t){return 5===t.shipsSunk()&&(this.winner=this.turn),this.winner}},{key:"playPlayerTurn",value:function(t){if(null!=this.winner)return!1;var n=this.p2.board,e={validMove:!1,opponent:this.p2,winner:null};if(!n.board[t].isShot){if(e.validMove=!0,this.turnCounter+=1,this.p1.fireShot(this.p2,t),!this.checkWin(n)){this.switchTurn();var r=this.p2.AI.getSmartShot(this.p2.movesMade),o=this.view.getCell(this.p1.name,r);this.p2.AI.clickCell(r,o)}e.winner=this.winner}return e.turnCount=this.turnCounter,e}},{key:"playComputerTurn",value:function(t){if(null!=this.winner)return!1;var n={validMove:!1,opponent:this.p1,winner:null};return"p2"===this.turn&&(n.validMove=!0,this.p2.fireShot(this.p1,t),this.checkWin(this.p1.board)?n.winner=this.winner:this.switchTurn()),n}},{key:"checkValidPlacement",value:function(t){var n,e=this,o={valid:!1,boardState:this.p1.board.board};if(!this.placementState.allShipsPlaced){var i=r.shipLengths[this.placementState.currentShip],a=(n=Array(i).keys(),function(t){if(Array.isArray(t))return g(t)}(n)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(n)||function(t,n){if(t){if("string"==typeof t)return g(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?g(t,n):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(n){return"x"===e.placementState.axis?t+n:t+10*n}));if(this.p1.board.checkCollisions(a,this.placementState.axis))o.valid=!0,o.viewLocs=a;else if("y"===this.placementState.axis)o.viewLocs=a.filter((function(t){return t<100}));else{var s=a[0];o.viewLocs=s<10?a.filter((function(t){return t<10})):a.filter((function(t){return t.toString()[0]===s.toString()[0]}))}}return o}},{key:"placeShip",value:function(t){var n={};if(this.p1.board.placeShip(this.placementState.currentShip,t,this.placementState.axis),n.board=this.p1.board.board,5===this.p1.board.getShipsPlaced().length)n.nextShip=null,this.placementState.allShipsPlaced=!0;else{var e=(0,r.getNextShip)(this.placementState.currentShip);this.placementState.currentShip=e,n.nextShip=e}return n}},{key:"togglePlacementAxis",value:function(){this.placementState.axis="x"===this.placementState.axis?"y":"x"}},{key:"randomizePlayerShips",value:function(){return this.p1.board.initBoard(),this.p1.board.placeShipsRandomly(),this.placementState.allShipsPlaced=!0,this.p1.board.board}},{key:"resetPlayerBoard",value:function(){return this.p1.board.initBoard(),this.placementState={axis:"x",currentShip:"carrier",allShipsPlaced:!1},this.p1.board.board}},{key:"setupGame",value:function(){this.view.renderBoard(this.p1),this.view.renderStartScreen(),this.view.bindMouseOverCell(this.checkValidPlacement.bind(this)),this.view.bindPressSpaceKey(this.togglePlacementAxis.bind(this)),this.view.bindClickPlacementCell(this.placeShip.bind(this)),this.view.bindClickRandomButton(this.randomizePlayerShips.bind(this)),this.view.bindClickResetButton(this.resetPlayerBoard.bind(this)),this.view.bindClickStartButton(this.startGame.bind(this))}},{key:"startGame",value:function(){this.p2.board.placeShipsRandomly(),this.view.resetBoardEventListeners(this.p1.name),this.view.renderBoard(this.p1),this.view.renderBoardInfo(this.p1),this.view.renderBoard(this.p2),this.view.renderBoardInfo(this.p2),this.view.bindClickOpponentCell(this.playPlayerTurn.bind(this),this.p1),this.view.bindClickOpponentCell(this.playComputerTurn.bind(this),this.p2),this.view.bindClickRestartButton(this.restartGame.bind(this))}},{key:"restartGame",value:function(){this.init(),this.setupGame()}}])&&w(e.prototype,o),Object.defineProperty(e,"prototype",{writable:!1}),t}();var S=e(379),B=e.n(S),x=e(795),E=e.n(x),j=e(569),P=e.n(j),T=e(565),M=e.n(T),I=e(216),L=e.n(I),O=e(589),R=e.n(O),Y=e(756),W={};W.styleTagTransform=R(),W.setAttributes=M(),W.insert=P().bind(null,"head"),W.domAPI=E(),W.insertStyleElement=L(),B()(Y.Z,W),Y.Z&&Y.Z.locals&&Y.Z.locals,(new k).setupGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,