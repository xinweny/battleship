(()=>{var t={21:(t,e,n)=>{function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function o(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=a(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,l=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return s=t.done,t},e:function(t){l=!0,i=t},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw i}}}}function i(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||a(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(t,e){if(t){if("string"==typeof t)return s(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(t,e):void 0}}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function l(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==r(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===r(i)?i:String(i)),o)}var i}var u=n(883),c=n(167).checkEdgeCollisions,f=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.board=[];for(var e=0;e<100;e+=1)this.board.push({ship:null,isShot:!1});this.ships={carrier:new u(5,"carrier"),battleship:new u(4,"battleship"),cruiser:new u(3,"cruiser"),submarine:new u(3,"submarine"),patrolBoat:new u(2,"patrolBoat")}}var e,n;return e=t,(n=[{key:"placeShip",value:function(t,e,n){var r=this.ships[t],a=i(Array(r.length).keys()).map((function(t){return"x"===n?e+t:e+10*t}));if(this.checkCollisions(a,n,this.board)){var s,l=o(a);try{for(l.s();!(s=l.n()).done;){var u=s.value;this.board[u].ship=r.name}}catch(t){l.e(t)}finally{l.f()}return!0}return!1}},{key:"isShotHit",value:function(t){return this.board[t].isShot&&null!=this.board[t].ship}},{key:"receiveAttack",value:function(t){var e={ship:null,cell:t};if(!this.board[t].isShot){this.board[t].isShot=!0;var n=this.board[t].ship;if(n){var r=this.ships[n];e.ship=r,r.hit()}else e.ship=null}return e}},{key:"shipAt",value:function(t){return this.ships[this.board[t].ship]}},{key:"shipsSunk",value:function(){var t=this,e=0;return Object.keys(this.ships).forEach((function(n){t.ships[n].isSunk()&&(e+=1)})),e}},{key:"placeShipsRandomly",value:function(){var t=this,e=["x","y"],n=i(Array(100).keys());Object.keys(this.ships).forEach((function(r){for(var o=!1;!o;){var i=n[Math.floor(100*Math.random())],a=e[Math.floor(2*Math.random())];o=t.placeShip(r,i,a)}}))}},{key:"checkCollisions",value:function(t,e){if(!c(t,e))return!1;var n,r=o(t);try{for(r.s();!(n=r.n()).done;){var i=n.value;if(null!=this.board[i].ship)return!1}}catch(t){r.e(t)}finally{r.f()}return!0}}])&&l(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();t.exports=f},779:(t,e,n)=>{function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function o(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==r(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===r(i)?i:String(i)),o)}var i}var i=n(21),a=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.board=new i,this.ships=this.board.ships,this.name=e?"p2":"p1",this.movesMade=[],e&&(this.AI=e)}var e,n;return e=t,(n=[{key:"fireShot",value:function(t,e){var n=t.board.receiveAttack(e);return this.movesMade.push(n),n}},{key:"getCell",value:function(t){return this.board.board[t]}}])&&o(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();t.exports=a},883:t=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(t)}function n(t,n){for(var r=0;r<n.length;r++){var o=n[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,n){if("object"!==e(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,"string");if("object"!==e(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===e(i)?i:String(i)),o)}var i}var r=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.length=e,this.name=n,this.hits=0,this.sunk=!1}var e,r;return e=t,(r=[{key:"hit",value:function(){this.hits+=1,this.hits===this.length&&(this.sunk=!0)}},{key:"isSunk",value:function(){return this.sunk}}])&&n(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();t.exports=r},167:(t,e,n)=>{"use strict";function r(t,e){if(t){if("string"==typeof t)return o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(t,e):void 0}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function i(t,e){if("x"===e||1===e){var n=t.map((function(t){return t.toString()}));if(n.some((function(t){return"9"===t.slice(-1)&&n.indexOf(t)!==n.length-1})))return!1}else{var o,i=function(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=r(t))){n&&(t=n);var o=0,i=function(){};return{s:i,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,s=!0,l=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return s=t.done,t},e:function(t){l=!0,a=t},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw a}}}}(t);try{for(i.s();!(o=i.n()).done;)if(o.value>99)return!1}catch(t){i.e(t)}finally{i.f()}}return!0}function a(t,e){var n=document.createElement(t);return n.className=e,n}function s(t,e){var n=t.opponent,r=n.board.board,o=null;return r[e].ship&&r[e].isShot?o="green":r[e].ship&&"p1"===n.name?o="gray":null===r[e].ship&&r[e].isShot&&(o="red"),o}function l(t){if(t.winner){var e="p1"===t.opponent.name?"Computer":"Player";console.log("".concat(e," wins!"))}}function u(t){return t[Math.floor(Math.random()*t.length)]}function c(t){var e,n=t.filter((function(t){return null!=t.ship&&!t.ship.isSunk()}));return n.length>0?function(t){if(Array.isArray(t))return o(t)}(e=new Set(n.map((function(t){return t.ship}))))||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(e)||r(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}():[]}n.r(e),n.d(e,{checkEdgeCollisions:()=>i,checkForWinner:()=>l,createElement:()=>a,getActiveShips:()=>c,getCellColor:()=>s,randElement:()=>u,shipLengths:()=>f});var f={carrier:5,battleship:4,cruiser:3,submarine:3,patrolBoat:2}},411:(t,e,n)=>{"use strict";n.d(e,{Z:()=>u});var r=n(537),o=n.n(r),i=n(645),a=n.n(i),s=n(3),l=a()(o());l.i(s.Z),l.push([t.id,"#game-window {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-around;\n\tflex-wrap: wrap;\n}","",{version:3,sources:["webpack://./src/styles/components/body.css"],names:[],mappings:"AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,6BAA6B;CAC7B,eAAe;AAChB",sourcesContent:["@import './game-board.css';\n\n#game-window {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-around;\n\tflex-wrap: wrap;\n}"],sourceRoot:""}]);const u=l},760:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,"#footer {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tgap: 8px;\n}\n\n#github-logo {\n\twidth: 25px;\n\theight: 25px;\n}\n\n#footer > p > a {\n\tfont-weight: bold;\n}","",{version:3,sources:["webpack://./src/styles/components/footer.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,mBAAmB;CACnB,uBAAuB;CACvB,QAAQ;AACT;;AAEA;CACC,WAAW;CACX,YAAY;AACb;;AAEA;CACC,iBAAiB;AAClB",sourcesContent:["#footer {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tgap: 8px;\n}\n\n#github-logo {\n\twidth: 25px;\n\theight: 25px;\n}\n\n#footer > p > a {\n\tfont-weight: bold;\n}"],sourceRoot:""}]);const s=a},3:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,".game-board {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(10, 1fr);\n\tgrid-template-columns: repeat(10, 1fr);\n\tborder: 0.5px solid black;\n}\n\n#game-window h2 {\n\ttext-align: center;\n}\n\n.cell {\n\twidth: 30px;\n\theight: 30px;\n\tborder: 0.5px solid black;\n\tbackground-color: white;\n}","",{version:3,sources:["webpack://./src/styles/components/game-board.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,mCAAmC;CACnC,sCAAsC;CACtC,yBAAyB;AAC1B;;AAEA;CACC,kBAAkB;AACnB;;AAEA;CACC,WAAW;CACX,YAAY;CACZ,yBAAyB;CACzB,uBAAuB;AACxB",sourcesContent:[".game-board {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(10, 1fr);\n\tgrid-template-columns: repeat(10, 1fr);\n\tborder: 0.5px solid black;\n}\n\n#game-window h2 {\n\ttext-align: center;\n}\n\n.cell {\n\twidth: 30px;\n\theight: 30px;\n\tborder: 0.5px solid black;\n\tbackground-color: white;\n}"],sourceRoot:""}]);const s=a},637:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const s=a},756:(t,e,n)=>{"use strict";n.d(e,{Z:()=>f});var r=n(537),o=n.n(r),i=n(645),a=n.n(i),s=n(637),l=n(411),u=n(760),c=a()(o());c.i(s.Z),c.i(l.Z),c.i(u.Z),c.push([t.id,"* {\n\tpadding: 0;\n\tmargin: 0;\n}\n\na {\n\ttext-decoration: none;\n}\n\nbody {\n\theight: 100vh;\n\twidth: 100vw;\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAIA;CACC,UAAU;CACV,SAAS;AACV;;AAEA;CACC,qBAAqB;AACtB;;AAEA;CACC,aAAa;CACb,YAAY;AACb",sourcesContent:["@import './components/header.css';\n@import './components/body.css';\n@import './components/footer.css';\n\n* {\n\tpadding: 0;\n\tmargin: 0;\n}\n\na {\n\ttext-decoration: none;\n}\n\nbody {\n\theight: 100vh;\n\twidth: 100vw;\n}"],sourceRoot:""}]);const f=c},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var u=0;u<t.length;u++){var c=[].concat(t[u]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),e.push(c))}},e}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},a=[],s=0;s<t.length;s++){var l=t[s],u=r.base?l[0]+r.base:l[0],c=i[u]||0,f="".concat(u," ").concat(c);i[u]=c+1;var p=n(f),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var d=o(h,r);r.byIndex=s,e.splice(s,0,{identifier:f,updater:d,references:1})}a.push(f)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=n(i[a]);e[s].references--}for(var l=r(t,o),u=0;u<i.length;u++){var c=n(i[u]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=l}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.nc=void 0,(()=>{"use strict";var t=n(779),e=n.n(t),r=n(167);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function i(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=a(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,l=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return s=t.done,t},e:function(t){l=!0,i=t},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw i}}}}function a(t,e){if(t){if("string"==typeof t)return s(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(t,e):void 0}}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==o(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===o(i)?i:String(i)),r)}var i}const u=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.elements={p1GameWindow:document.getElementById("p1-window"),p2GameWindow:document.getElementById("p2-window"),p1Board:document.getElementById("p1-board"),p2Board:document.getElementById("p2-board"),gameMessage:document.getElementById("message-window")}}var e,n;return e=t,(n=[{key:"renderBoard",value:function(t){for(var e=document.getElementById("".concat(t.name,"-board")),n=t.board.board,o=0;o<100;o+=1){var i=(0,r.createElement)("div","cell");i.setAttribute("data-index",o),"p1"===t.name&&n[o].ship&&(i.style.backgroundColor="gray"),e.appendChild(i)}}},{key:"renderStartScreen",value:function(){var t=(0,r.createElement)("h2","start-message");t.innerText="Place your carrier (Press space to rotate)",this.elements.gameMessage.appendChild(t);var e=(0,r.createElement)("div","game-buttons"),n=(0,r.createElement)("button","random-button");n.innerText="Random";var o=(0,r.createElement)("button","reset-button");o.innerText="Reset";var i=(0,r.createElement)("button","start-button");i.innerText="Start",e.appendChild(n),e.appendChild(o),e.appendChild(i),this.elements.p1GameWindow.appendChild(e),this.elements.p2GameWindow.style.display="none"}},{key:"bindMouseOverCell",value:function(t){var e,n=this,r=i(this.elements.p1Board.children);try{for(r.s();!(e=r.n()).done;)e.value.addEventListener("mouseover",(function(e){var r,o=parseInt(e.target.dataset.index,10),a=t(o),s=a.valid?"green":"red",l=i(a.boardState);try{for(l.s();!(r=l.n()).done;){var u=r.value,c=a.boardState.indexOf(u),f=n.elements.p1Board.querySelector('.cell[data-index="'.concat(c,'"]'));a.viewLocs.includes(c)?f.style.backgroundColor=s:u.ship?f.style.backgroundColor="gray":f.style.backgroundColor="white"}}catch(t){l.e(t)}finally{l.f()}}))}catch(t){r.e(t)}finally{r.f()}}},{key:"bindPressSpaceKey",value:function(t){document.addEventListener("keyup",(function(e){if("Space"===e.code){var n=(o=document.querySelectorAll(":hover"),function(t){if(Array.isArray(t))return s(t)}(o)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(o)||a(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).slice(-1)[0];if(n.classList.contains("cell")){t();var r=new Event("mouseover");n.dispatchEvent(r)}}var o}))}},{key:"bindClickOpponentCell",value:function(t,e){var n,o=i("p1"===e.name?this.elements.p2Board.children:this.elements.p1Board.children);try{var a=function(){var o=n.value;o.addEventListener("click",(function(n){var i=parseInt(n.target.dataset.index,10),a=t(i);a&&a.validMove?(o.style.backgroundColor=(0,r.getCellColor)(a,i),(0,r.checkForWinner)(a)):"p1"===e.name&&console.log("Invalid move!")}))};for(o.s();!(n=o.n()).done;)a()}catch(t){o.e(t)}finally{o.f()}}},{key:"getCell",value:function(t,e){return this.elements["".concat(t,"Board")].children[e]}}])&&l(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function c(t){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},c(t)}function f(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=h(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,s=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw i}}}}function p(t){return function(t){if(Array.isArray(t))return d(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||h(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(t,e){if(t){if("string"==typeof t)return d(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?d(t,e):void 0}}function d(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function y(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==c(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==c(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===c(o)?o:String(o)),r)}var o}const m=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.cellsHit={carrier:[],battleship:[],cruiser:[],submarine:[],patrolBoat:[]},this.oppBoard=e,this.offsets=[-1,1,-10,10]}var e,n;return e=t,(n=[{key:"getRandomShot",value:function(t){var e=t.map((function(t){return t.cell})),n=p(Array(100).keys()).filter((function(t){return!e.includes(t)}));return(0,r.randElement)(n)}},{key:"getSmartShot",value:function(t){if(0===t.length)return this.getRandomShot(t);var e=null,n=t.slice(-1)[0],o=n.cell,i=n.ship;if(i&&!i.isSunk())this.cellsHit[i.name].push(o),e=this.findSuitableMoves(i);else{var a=(0,r.getActiveShips)(t);if(a.length>0){var s=a.slice(-1)[0];e=this.findSuitableMoves(s)}else{var l=this.getUndiscoveredShipLengths(),u=(0,r.randElement)(l),c=this.modelValidPlacements(u);e=(0,r.randElement)((0,r.randElement)(c))}}return e}},{key:"findSuitableMoves",value:function(t){var e=this.cellsHit[t.name],n=[];if(1===e.length){var o,i=e[0],a=f(this.offsets);try{for(a.s();!(o=a.n()).done;){var s=o.value;this.checkValidMove(i,s)&&n.push(i+s)}}catch(t){a.e(t)}finally{a.f()}}else{var l,u=[Math.min.apply(Math,p(e)),Math.max.apply(Math,p(e))];l=(u[1]-u[0])%10==0?this.offsets.slice(2):this.offsets.slice(0,2);for(var c=0,h=u;c<h.length;c++){var d,y=h[c],m=f(l);try{for(m.s();!(d=m.n()).done;){var v=d.value;this.checkValidMove(y,v)&&n.push(y+v)}}catch(t){m.e(t)}finally{m.f()}}}return(0,r.randElement)(n)}},{key:"modelValidPlacements",value:function(t){var e,n=this,r=[],o=f(this.getEmptyLocs());try{var i=function(){for(var o=e.value,i=function(){var e=s[a],i=p(Array(t).keys()).map((function(t){return o+e*t}));n.checkCollisions(i,e,n.oppBoard)&&r.push(i)},a=0,s=[1,10];a<s.length;a++)i()};for(o.s();!(e=o.n()).done;)i()}catch(t){o.e(t)}finally{o.f()}return r}},{key:"checkValidMove",value:function(t,e){var n=t+e;if(n<0||n>99)return!1;if(this.oppBoard[n].isShot)return!1;var r=t.toString().slice(-1)[0];return-1===e?!("0"===r):1===e?!("9"===r):-10===e?!(t<10):10===e&&!(t>89)}},{key:"clickCell",value:function(t){t.click()}},{key:"getUndiscoveredShipLengths",value:function(){var t=this,e=[];return Object.keys(this.cellsHit).forEach((function(n){var o=r.shipLengths[n];0===t.cellsHit[n].length&&e.push(o)})),e}},{key:"getEmptyLocs",value:function(){var t=this;return this.oppBoard.filter((function(t){return!t.isShot})).map((function(e){return t.oppBoard.indexOf(e)}))}},{key:"checkCollisions",value:function(t,e){if(!(0,r.checkEdgeCollisions)(t,e))return!1;var n,o=f(t);try{for(o.s();!(n=o.n()).done;){var i=n.value;if(this.oppBoard[i].isShot)return!1}}catch(t){o.e(t)}finally{o.f()}return!0}}])&&y(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function v(t){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},v(t)}function b(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function g(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==v(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==v(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===v(o)?o:String(o)),r)}var o}const A=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.p1=new(e()),this.p2=new(e())(new m(this.p1.board.board)),this.view=new u,this.turn="p1",this.winner=null,this.placementState={axis:"x",ship:"carrier"},this.p2.board.placeShipsRandomly()}var n,o;return n=t,(o=[{key:"switchTurn",value:function(){this.turn="p1"===this.turn?"p2":"p1"}},{key:"checkWin",value:function(t){return 5===t.shipsSunk()&&(this.winner=this.turn),this.winner}},{key:"playPlayerTurn",value:function(t){if(null!=this.winner)return!1;var e=this.p2.board,n={validMove:!1,opponent:this.p2,winner:null};if(!e.board[t].isShot)if(n.validMove=!0,this.p1.fireShot(this.p2,t),this.checkWin(e))n.winner=this.winner;else{this.switchTurn();var r=this.p2.AI.getSmartShot(this.p2.movesMade),o=this.view.getCell("p1",r);this.p2.AI.clickCell(o)}return n}},{key:"playComputerTurn",value:function(t){if(null!=this.winner)return!1;var e={validMove:!1,opponent:this.p1,winner:null};return"p2"===this.turn&&(e.validMove=!0,this.p2.fireShot(this.p1,t),this.checkWin(this.p1.board)?e.winner=this.winner:this.switchTurn()),e}},{key:"checkValidPlacement",value:function(t){var e,n=this,o={valid:!1,boardState:this.p1.board.board},i=r.shipLengths[this.placementState.ship],a=(e=Array(i).keys(),function(t){if(Array.isArray(t))return b(t)}(e)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(e)||function(t,e){if(t){if("string"==typeof t)return b(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?b(t,e):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(e){return"x"===n.placementState.axis?t+e:t+10*e}));if(this.p1.board.checkCollisions(a,this.placementState.axis))o.valid=!0,o.viewLocs=a;else if("y"===this.placementState.axis)o.viewLocs=a.filter((function(t){return t<100}));else{var s=a[0];o.viewLocs=s<10?a.filter((function(t){return t<10})):a.filter((function(t){return t.toString()[0]===s.toString()[0]}))}return o}},{key:"togglePlacementAxis",value:function(){this.placementState.axis="x"===this.placementState.axis?"y":"x"}},{key:"setupGame",value:function(){this.view.renderBoard(this.p1),this.view.renderStartScreen(),this.view.bindMouseOverCell(this.checkValidPlacement.bind(this)),this.view.bindPressSpaceKey(this.togglePlacementAxis.bind(this))}},{key:"startGame",value:function(){this.view.renderBoard(this.p1),this.view.renderBoard(this.p2),this.view.bindClickOpponentCell(this.playPlayerTurn.bind(this),this.p1),this.view.bindClickOpponentCell(this.playComputerTurn.bind(this),this.p2)}}])&&g(n.prototype,o),Object.defineProperty(n,"prototype",{writable:!1}),t}();var S=n(379),w=n.n(S),C=n(795),k=n.n(C),x=n(569),E=n.n(x),j=n(565),B=n.n(j),M=n(216),T=n.n(M),I=n(589),P=n.n(I),O=n(756),L={};L.styleTagTransform=P(),L.setAttributes=B(),L.insert=E().bind(null,"head"),L.domAPI=k(),L.insertStyleElement=T(),w()(O.Z,L),O.Z&&O.Z.locals&&O.Z.locals,(new A).setupGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,