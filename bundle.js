(()=>{var e={21:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function i(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=a(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){l=!0,o=e},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw o}}}}function o(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||a(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function l(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,"string");if("object"!==r(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===r(o)?o:String(o)),i)}var o}var c=n(883),u=n(167).checkEdgeCollisions,f=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.board=[],this.resetBoard(),this.ships={carrier:new c(5,"carrier"),battleship:new c(4,"battleship"),cruiser:new c(3,"cruiser"),submarine:new c(3,"submarine"),patrolBoat:new c(2,"patrolBoat")}}var t,n;return t=e,(n=[{key:"placeShip",value:function(e,t,n){var r=this.ships[e];r.place();var a=o(Array(r.length).keys()).map((function(e){return"x"===n?t+e:t+10*e}));if(this.checkCollisions(a,n,this.board)){var s,l=i(a);try{for(l.s();!(s=l.n()).done;){var c=s.value;this.board[c].ship=r.name}}catch(e){l.e(e)}finally{l.f()}return!0}return!1}},{key:"getShipsPlaced",value:function(){var e=this;return Object.keys(this.ships).filter((function(t){return e.ships[t].isPlaced}))}},{key:"resetBoard",value:function(){this.board=[];for(var e=0;e<100;e+=1)this.board.push({ship:null,isShot:!1})}},{key:"isShotHit",value:function(e){return this.board[e].isShot&&null!=this.board[e].ship}},{key:"receiveAttack",value:function(e){var t={ship:null,cell:e};if(!this.board[e].isShot){this.board[e].isShot=!0;var n=this.board[e].ship;if(n){var r=this.ships[n];t.ship=r,r.hit()}else t.ship=null}return t}},{key:"shipAt",value:function(e){return this.ships[this.board[e].ship]}},{key:"shipsSunk",value:function(){var e=this,t=0;return Object.keys(this.ships).forEach((function(n){e.ships[n].isSunk()&&(t+=1)})),t}},{key:"placeShipsRandomly",value:function(){var e=this,t=["x","y"],n=o(Array(100).keys());Object.keys(this.ships).forEach((function(r){for(var i=!1;!i;){var o=n[Math.floor(100*Math.random())],a=t[Math.floor(2*Math.random())];i=e.placeShip(r,o,a)}}))}},{key:"checkCollisions",value:function(e,t){if(!u(e,t))return!1;var n,r=i(e);try{for(r.s();!(n=r.n()).done;){var o=n.value;if(null!=this.board[o].ship)return!1}}catch(e){r.e(e)}finally{r.f()}return!0}}])&&l(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();e.exports=f},779:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,"string");if("object"!==r(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===r(o)?o:String(o)),i)}var o}var o=n(21),a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.board=new o,this.ships=this.board.ships,this.name=t?"p2":"p1",this.movesMade=[],t&&(this.AI=t)}var t,n;return t=e,(n=[{key:"fireShot",value:function(e,t){var n=e.board.receiveAttack(t);return this.movesMade.push(n),n}},{key:"getCell",value:function(e){return this.board.board[e]}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();e.exports=a},883:e=>{function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(e,n){for(var r=0;r<n.length;r++){var i=n[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,o=function(e,n){if("object"!==t(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!==t(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===t(o)?o:String(o)),i)}var o}var r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.length=t,this.name=n,this.hits=0,this.sunk=!1,this.isPlaced=!1}var t,r;return t=e,(r=[{key:"hit",value:function(){this.hits+=1,this.hits===this.length&&(this.sunk=!0)}},{key:"isSunk",value:function(){return this.sunk}},{key:"place",value:function(){this.isPlaced=!0}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();e.exports=r},167:(e,t,n)=>{"use strict";function r(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||i(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){if(e){if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(e,t):void 0}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function a(e,t){var n,r=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=i(e))){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,s=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){l=!0,a=e},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw a}}}}(e);try{for(r.s();!(n=r.n()).done;){var o=n.value;if(o<0||o>99)return!1}}catch(e){r.e(e)}finally{r.f()}if("x"===t||1===t||-1===t){var a=e.map((function(e){return e.toString()}));if(a.some((function(e){return"9"===e.slice(-1)&&a.indexOf(e)!==a.length-1})))return!1}return!0}function s(e,t){var n=document.createElement(e);return n.className=t,n}function l(e){return e[Math.floor(Math.random()*e.length)]}function c(e){var t=e.filter((function(e){return null!=e.ship&&!e.ship.isSunk()}));return t.length>0?r(new Set(t.map((function(e){return e.ship})))):[]}n.r(t),n.d(t,{checkEdgeCollisions:()=>a,createElement:()=>s,getActiveShips:()=>c,getNextShip:()=>f,projectShipLocs:()=>p,randElement:()=>l,shipLengths:()=>u});var u={carrier:5,battleship:4,cruiser:3,submarine:3,patrolBoat:2};function f(e){var t=Object.keys(u),n=t.indexOf(e);return n<4?t[n+1]:t[n]}function p(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;return r(Array(n).keys()).map((function(n){return e+t*(n+i)}))}},411:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(537),i=n.n(r),o=n(645),a=n.n(o),s=n(561),l=a()(i());l.i(s.Z),l.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const c=l},760:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,"#footer {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tgap: 8px;\n}\n\n#github-logo {\n\twidth: 25px;\n\theight: 25px;\n}\n\n#footer > p > a {\n\tfont-weight: bold;\n}","",{version:3,sources:["webpack://./src/styles/components/footer.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,mBAAmB;CACnB,uBAAuB;CACvB,QAAQ;AACT;;AAEA;CACC,WAAW;CACX,YAAY;AACb;;AAEA;CACC,iBAAiB;AAClB",sourcesContent:["#footer {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tgap: 8px;\n}\n\n#github-logo {\n\twidth: 25px;\n\theight: 25px;\n}\n\n#footer > p > a {\n\tfont-weight: bold;\n}"],sourceRoot:""}]);const s=a},561:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,"#game-window h2 {\n\ttext-align: center;\n}\n\n#game-window {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-around;\n\tflex-wrap: wrap;\n}\n\n.game-board {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(10, 1fr);\n\tgrid-template-columns: repeat(10, 1fr);\n\tborder: 0.5px solid black;\n}\n\n.cell {\n\twidth: 30px;\n\theight: 30px;\n\tborder: 0.5px solid black;\n\tbackground-color: white;\n}\n\n.board-info {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(2, 50px);\n\tgrid-template-columns: repeat(5, 1fr);\n}\n\n.board-info p {\n\tfont-size: 8px;\n}","",{version:3,sources:["webpack://./src/styles/components/game-window.css"],names:[],mappings:"AAAA;CACC,kBAAkB;AACnB;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,6BAA6B;CAC7B,eAAe;AAChB;;AAEA;CACC,aAAa;CACb,mCAAmC;CACnC,sCAAsC;CACtC,yBAAyB;AAC1B;;AAEA;CACC,WAAW;CACX,YAAY;CACZ,yBAAyB;CACzB,uBAAuB;AACxB;;AAEA;CACC,aAAa;CACb,mCAAmC;CACnC,qCAAqC;AACtC;;AAEA;CACC,cAAc;AACf",sourcesContent:["#game-window h2 {\n\ttext-align: center;\n}\n\n#game-window {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-around;\n\tflex-wrap: wrap;\n}\n\n.game-board {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(10, 1fr);\n\tgrid-template-columns: repeat(10, 1fr);\n\tborder: 0.5px solid black;\n}\n\n.cell {\n\twidth: 30px;\n\theight: 30px;\n\tborder: 0.5px solid black;\n\tbackground-color: white;\n}\n\n.board-info {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(2, 50px);\n\tgrid-template-columns: repeat(5, 1fr);\n}\n\n.board-info p {\n\tfont-size: 8px;\n}"],sourceRoot:""}]);const s=a},637:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const s=a},756:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var r=n(537),i=n.n(r),o=n(645),a=n.n(o),s=n(637),l=n(411),c=n(760),u=a()(i());u.i(s.Z),u.i(l.Z),u.i(c.Z),u.push([e.id,"* {\n\tpadding: 0;\n\tmargin: 0;\n}\n\na {\n\ttext-decoration: none;\n}\n\nbody {\n\theight: 100vh;\n\twidth: 100vw;\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAIA;CACC,UAAU;CACV,SAAS;AACV;;AAEA;CACC,qBAAqB;AACtB;;AAEA;CACC,aAAa;CACb,YAAY;AACb",sourcesContent:["@import './components/header.css';\n@import './components/body.css';\n@import './components/footer.css';\n\n* {\n\tpadding: 0;\n\tmargin: 0;\n}\n\na {\n\ttext-decoration: none;\n}\n\nbody {\n\theight: 100vh;\n\twidth: 100vw;\n}"],sourceRoot:""}]);const f=u},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&a[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),t.push(u))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},a=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],u=o[c]||0,f="".concat(c," ").concat(u);o[c]=u+1;var p=n(f),d={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(d);else{var h=i(d,r);r.byIndex=s,t.splice(s,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=n(o[a]);t[s].references--}for(var l=r(e,i),c=0;c<o.length;c++){var u=n(o[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=l}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nc=void 0,(()=>{"use strict";var e=n(779),t=n.n(e),r=n(167);function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function o(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=a(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){l=!0,o=e},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw o}}}}function a(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==i(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==i(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===i(o)?o:String(o)),r)}var o}const c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t=(0,r.createElement)("button","start-button");t.innerText="Start";var n=(0,r.createElement)("button","restart-button");n.innerText="Restart",this.elements={p1GameWindow:document.getElementById("p1-window"),p2GameWindow:document.getElementById("p2-window"),p1Board:document.getElementById("p1-board"),p2Board:document.getElementById("p2-board"),gameMessage:document.getElementById("message-window"),startButton:t,restartButton:n}}var t,n;return t=e,n=[{key:"renderBoard",value:function(e){var t=document.getElementById("".concat(e.name,"-board"));t.innerHTML="",this.elements["".concat(e.name,"GameWindow")].style.display="block";for(var n=e.board.board,i=0;i<100;i+=1){var o=(0,r.createElement)("div","cell");o.setAttribute("data-index",i),"p1"===e.name&&n[i].ship&&(o.style.backgroundColor="gray"),t.appendChild(o)}}},{key:"colorBoard",value:function(e){for(var t=0;t<100;t+=1)this.elements.p1Board.children[t].style.backgroundColor=null==e[t].ship?"white":"gray"}},{key:"setGameMessage",value:function(e){this.elements.gameMessage.innerHTML="";var t=(0,r.createElement)("p","game-message");t.innerText=e,this.elements.gameMessage.appendChild(t)}},{key:"renderStartScreen",value:function(){this.setGameMessage("Place your carrier (Press space to rotate)");var e=(0,r.createElement)("div","game-buttons"),t=(0,r.createElement)("button","random-button");t.innerText="Random";var n=(0,r.createElement)("button","reset-button");n.innerText="Reset",e.appendChild(t),e.appendChild(n),this.elements.randomButton=t,this.elements.resetButton=n,this.elements.p1GameWindow.appendChild(e),this.elements.p2GameWindow.style.display="none"}},{key:"renderInGameMessage",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t&&(this.elements.gameMessage.innerHTML=""),this.elements.gameMessage.appendChild(e)}},{key:"renderBoardInfo",value:function(e){var t=(0,r.createElement)("div","board-info");t.id="".concat(e.name,"-board-info");var n=e.ships;Object.keys(n).forEach((function(e){var n="patrolBoat"===e?"patrol boat":e,i=(0,r.createElement)("p","ship-name");i.innerText=n,t.appendChild(i)})),Object.keys(n).forEach((function(){})),this.elements["".concat(e.name,"GameWindow")].appendChild(t)}},{key:"bindMouseOverCell",value:function(e){var t,n=this,r=o(this.elements.p1Board.children);try{for(r.s();!(t=r.n()).done;)t.value.addEventListener("mouseover",(function(t){var r=parseInt(t.target.dataset.index,10),i=e(r);if(i.viewLocs){var a,s=i.valid?"green":"red",l=o(i.boardState);try{for(l.s();!(a=l.n()).done;){var c=a.value,u=i.boardState.indexOf(c),f=n.elements.p1Board.querySelector('.cell[data-index="'.concat(u,'"]'));i.viewLocs.includes(u)?f.style.backgroundColor=s:c.ship?f.style.backgroundColor="gray":f.style.backgroundColor="white"}}catch(e){l.e(e)}finally{l.f()}}}))}catch(e){r.e(e)}finally{r.f()}}},{key:"bindPressSpaceKey",value:function(e){document.addEventListener("keyup",(function(t){if("Space"===t.code){var n=(i=document.querySelectorAll(":hover"),function(e){if(Array.isArray(e))return s(e)}(i)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(i)||a(i)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).slice(-1)[0];if(n.classList.contains("cell")){e();var r=new Event("mouseover");n.dispatchEvent(r)}}var i}))}},{key:"bindClickPlacementCell",value:function(e){var t=this;this.elements.p1Board.addEventListener("click",(function(n){var r=parseInt(n.target.dataset.index,10);if("green"===t.elements.p1Board.children[r].style.backgroundColor){var i=e(r);t.colorBoard(i.board);var o="patrolBoat"===i.nextShip?"patrol boat":i.nextShip;null!=o?t.setGameMessage("Place your ".concat(o," (Press space to rotate)")):t.renderInGameMessage(t.elements.startButton,!0)}}))}},{key:"bindClickOpponentCell",value:function(e,t){var n,r=this,i=o("p1"===t.name?this.elements.p2Board.children:this.elements.p1Board.children);try{var a=function(){var i=n.value;i.addEventListener("click",(function(n){var o=parseInt(n.target.dataset.index,10),a=e(o);if(a.validMove){var s=a.opponent.board.board,l=s[o].ship;if(l&&s[o].isShot){i.style.backgroundColor="green";var c="patrolBoat"===l?"patrol boat":l;if(r.setGameMessage("You hit the ".concat(c,".")),a.winner){var u="p1"===t.name?"You won!":"You lost...";r.setGameMessage(u),r.renderInGameMessage(r.elements.restartButton),r.resetBoardEventListeners("p2")}}else i.style.backgroundColor="red",a.winner||r.setGameMessage("You missed!")}else"p1"!==t.name||a.winner||r.setGameMessage("You already shot at that cell.")}))};for(i.s();!(n=i.n()).done;)a()}catch(e){i.e(e)}finally{i.f()}}},{key:"bindClickRandomButton",value:function(e){var t=this;this.elements.randomButton.addEventListener("click",(function(){var n=e();t.colorBoard(n),t.renderInGameMessage(t.elements.startButton,!0)}))}},{key:"bindClickResetButton",value:function(e){var t=this;this.elements.resetButton.addEventListener("click",(function(){var n=e();t.colorBoard(n),t.setGameMessage("Place your carrier (Press space to rotate)")}))}},{key:"bindClickStartButton",value:function(e){var t=this;this.elements.startButton.addEventListener("click",(function(){t.elements.p1GameWindow.removeChild(t.elements.p1GameWindow.lastChild),e(),t.setGameMessage("Click to fire shots.")}))}},{key:"bindClickRestartButton",value:function(e){var t=this;this.elements.restartButton.addEventListener("click",(function(){for(var n=0,r=[t.elements.p1GameWindow,t.elements.p2GameWindow];n<r.length;n++){var i=r[n];i.removeChild(i.lastChild)}e()}))}},{key:"resetBoardEventListeners",value:function(e){var t=this.elements["".concat(e,"Board")],n=t.cloneNode(!0);t.parentNode.replaceChild(n,t),this.elements["".concat(e,"Board")]=n}},{key:"getCell",value:function(e,t){return this.elements["".concat(e,"Board")].children[t]}}],n&&l(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();var u=n(21),f=n.n(u);function p(e){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p(e)}function d(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=m(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){s=!0,o=e},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function h(e){return function(e){if(Array.isArray(e))return y(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||m(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,t){if(e){if("string"==typeof e)return y(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?y(e,t):void 0}}function y(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,i=function(e,t){if("object"!==p(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==p(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===p(i)?i:String(i)),r)}var i}const b=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.cellsHit={carrier:[],battleship:[],cruiser:[],submarine:[],patrolBoat:[]},this.modelBoard=(new(f())).board,this.offsets=[-1,1,-10,10]}var t,n;return t=e,(n=[{key:"getRandomShot",value:function(e){var t=e.map((function(e){return e.cell})),n=h(Array(100).keys()).filter((function(e){return!t.includes(e)}));return(0,r.randElement)(n)}},{key:"getSmartShot",value:function(e){if(0===e.length)return this.getRandomShot(e);var t=null,n=e.slice(-1)[0],i=n.cell,o=n.ship;if(o&&!o.isSunk())this.cellsHit[o.name].push(i),this.modelBoard[i].ship=o,t=this.findSuitableMoves(o);else{var a=(0,r.getActiveShips)(e);if(a.length>0){var s=a.slice(-1)[0];t=this.findSuitableMoves(s)}else{var l=this.getUndiscoveredShipLengths(),c=(0,r.randElement)(l),u=this.modelValidPlacements(c);t=(0,r.randElement)((0,r.randElement)(u))}}return t}},{key:"findSuitableMoves",value:function(e){var t=this.cellsHit[e.name],n=[];if(1===t.length){var i,o=t[0],a=d(this.offsets);try{for(a.s();!(i=a.n()).done;){var s=i.value,l=this.findValidProjection(o,s,e.length-1);l&&n.push(l)}}catch(e){a.e(e)}finally{a.f()}}else{var c,u=[Math.min.apply(Math,h(t)),Math.max.apply(Math,h(t))];c=(u[1]-u[0])%10==0?this.offsets.slice(2):this.offsets.slice(0,2);for(var f=0;f<2;f+=1){var p=u[f],m=c[f],y=this.findValidProjection(p,m,e.length-t.length);y&&n.push(y)}}return(0,r.randElement)(n)}},{key:"modelValidPlacements",value:function(e){var t,n=[],i=d(this.getEmptyLocs());try{for(i.s();!(t=i.n()).done;)for(var o=t.value,a=0,s=[1,10];a<s.length;a++){var l=s[a],c=(0,r.projectShipLocs)(o,l,e);this.checkCollisions(c,l)&&n.push(c)}}catch(e){i.e(e)}finally{i.f()}return n}},{key:"clickCell",value:function(e,t){this.modelBoard[e].isShot=!0,t.click()}},{key:"getUndiscoveredShipLengths",value:function(){var e=this,t=[];return Object.keys(this.cellsHit).forEach((function(n){var i=r.shipLengths[n];0===e.cellsHit[n].length&&t.push(i)})),t}},{key:"getEmptyLocs",value:function(){var e=this;return this.modelBoard.filter((function(e){return!e.isShot})).map((function(t){return e.modelBoard.indexOf(t)}))}},{key:"checkCollisions",value:function(e,t){if(!(0,r.checkEdgeCollisions)(e,t))return!1;var n,i=d(e);try{for(i.s();!(n=i.n()).done;){var o=n.value;if(this.modelBoard[o].isShot)return!1}}catch(e){i.e(e)}finally{i.f()}return!0}},{key:"findValidProjection",value:function(e,t,n){for(var i=n;i>0;){var o=(0,r.projectShipLocs)(e,t,i,1);if(this.checkCollisions(o,t))return e+t;i-=1}return null}}])&&v(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function A(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,i=function(e,t){if("object"!==g(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==g(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===g(i)?i:String(i)),r)}var i}const w=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.init()}var n,i;return n=e,(i=[{key:"init",value:function(){this.p1=new(t()),this.p2=new(t())(new b),this.view=new c,this.turn="p1",this.winner=null,this.placementState={axis:"x",currentShip:"carrier",allShipsPlaced:!1},this.p2.board.placeShipsRandomly()}},{key:"switchTurn",value:function(){this.turn="p1"===this.turn?"p2":"p1"}},{key:"checkWin",value:function(e){return 5===e.shipsSunk()&&(this.winner=this.turn),this.winner}},{key:"playPlayerTurn",value:function(e){if(null!=this.winner)return!1;var t=this.p2.board,n={validMove:!1,opponent:this.p2,winner:null};if(!t.board[e].isShot){if(n.validMove=!0,this.p1.fireShot(this.p2,e),!this.checkWin(t)){this.switchTurn();var r=this.p2.AI.getSmartShot(this.p2.movesMade),i=this.view.getCell(this.p1.name,r);this.p2.AI.clickCell(r,i)}n.winner=this.winner}return n}},{key:"playComputerTurn",value:function(e){if(null!=this.winner)return!1;var t={validMove:!1,opponent:this.p1,winner:null};return"p2"===this.turn&&(t.validMove=!0,this.p2.fireShot(this.p1,e),this.checkWin(this.p1.board)?t.winner=this.winner:this.switchTurn()),t}},{key:"checkValidPlacement",value:function(e){var t,n=this,i={valid:!1,boardState:this.p1.board.board};if(!this.placementState.allShipsPlaced){var o=r.shipLengths[this.placementState.currentShip],a=(t=Array(o).keys(),function(e){if(Array.isArray(e))return A(e)}(t)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(e,t){if(e){if("string"==typeof e)return A(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?A(e,t):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(t){return"x"===n.placementState.axis?e+t:e+10*t}));if(this.p1.board.checkCollisions(a,this.placementState.axis))i.valid=!0,i.viewLocs=a;else if("y"===this.placementState.axis)i.viewLocs=a.filter((function(e){return e<100}));else{var s=a[0];i.viewLocs=s<10?a.filter((function(e){return e<10})):a.filter((function(e){return e.toString()[0]===s.toString()[0]}))}}return i}},{key:"placeShip",value:function(e){var t={};if(this.p1.board.placeShip(this.placementState.currentShip,e,this.placementState.axis),t.board=this.p1.board.board,5===this.p1.board.getShipsPlaced().length)t.nextShip=null,this.placementState.allShipsPlaced=!0;else{var n=(0,r.getNextShip)(this.placementState.currentShip);this.placementState.currentShip=n,t.nextShip=n}return t}},{key:"togglePlacementAxis",value:function(){this.placementState.axis="x"===this.placementState.axis?"y":"x"}},{key:"randomizePlayerShips",value:function(){return this.p1.board.resetBoard(),this.p1.board.placeShipsRandomly(),this.placementState.allShipsPlaced=!0,this.p1.board.board}},{key:"resetPlayerBoard",value:function(){return this.p1.board.resetBoard(),this.placementState.allShipsPlaced=!1,this.placementState.currentShip="carrier",this.p1.board.board}},{key:"setupGame",value:function(){this.view.renderBoard(this.p1),this.view.renderStartScreen(),this.view.bindMouseOverCell(this.checkValidPlacement.bind(this)),this.view.bindPressSpaceKey(this.togglePlacementAxis.bind(this)),this.view.bindClickPlacementCell(this.placeShip.bind(this)),this.view.bindClickRandomButton(this.randomizePlayerShips.bind(this)),this.view.bindClickResetButton(this.resetPlayerBoard.bind(this)),this.view.bindClickStartButton(this.startGame.bind(this))}},{key:"startGame",value:function(){this.view.resetBoardEventListeners(this.p1.name),this.view.renderBoard(this.p1),this.view.renderBoardInfo(this.p1),this.view.renderBoard(this.p2),this.view.renderBoardInfo(this.p2),this.view.bindClickOpponentCell(this.playPlayerTurn.bind(this),this.p1),this.view.bindClickOpponentCell(this.playComputerTurn.bind(this),this.p2),this.view.bindClickRestartButton(this.restartGame.bind(this))}},{key:"restartGame",value:function(){this.init(),this.setupGame()}}])&&S(n.prototype,i),Object.defineProperty(n,"prototype",{writable:!1}),e}();var C=n(379),k=n.n(C),B=n(795),x=n.n(B),E=n(569),j=n.n(E),P=n(565),M=n.n(P),I=n(216),T=n.n(I),O=n(589),L=n.n(O),G=n(756),R={};R.styleTagTransform=L(),R.setAttributes=M(),R.insert=j().bind(null,"head"),R.domAPI=x(),R.insertStyleElement=T(),k()(G.Z,R),G.Z&&G.Z.locals&&G.Z.locals,(new w).setupGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,