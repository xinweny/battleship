(()=>{var e={21:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function i(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=a(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){l=!0,o=e},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw o}}}}function o(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||a(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function l(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,"string");if("object"!==r(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===r(o)?o:String(o)),i)}var o}var c=n(883),u=n(167).checkEdgeCollisions,f=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.board=[],this.resetBoard(),this.ships={carrier:new c(5,"carrier"),battleship:new c(4,"battleship"),cruiser:new c(3,"cruiser"),submarine:new c(3,"submarine"),patrolBoat:new c(2,"patrolBoat")}}var t,n;return t=e,(n=[{key:"placeShip",value:function(e,t,n){var r=this.ships[e];r.place();var a=o(Array(r.length).keys()).map((function(e){return"x"===n?t+e:t+10*e}));if(this.checkCollisions(a,n,this.board)){var s,l=i(a);try{for(l.s();!(s=l.n()).done;){var c=s.value;this.board[c].ship=r.name}}catch(e){l.e(e)}finally{l.f()}return!0}return!1}},{key:"getShipsPlaced",value:function(){var e=this;return Object.keys(this.ships).filter((function(t){return e.ships[t].isPlaced}))}},{key:"resetBoard",value:function(){this.board=[];for(var e=0;e<100;e+=1)this.board.push({ship:null,isShot:!1})}},{key:"isShotHit",value:function(e){return this.board[e].isShot&&null!=this.board[e].ship}},{key:"receiveAttack",value:function(e){var t={ship:null,cell:e};if(!this.board[e].isShot){this.board[e].isShot=!0;var n=this.board[e].ship;if(n){var r=this.ships[n];t.ship=r,r.hit()}else t.ship=null}return t}},{key:"shipAt",value:function(e){return this.ships[this.board[e].ship]}},{key:"shipsSunk",value:function(){var e=this,t=0;return Object.keys(this.ships).forEach((function(n){e.ships[n].isSunk()&&(t+=1)})),t}},{key:"placeShipsRandomly",value:function(){var e=this,t=["x","y"],n=o(Array(100).keys());Object.keys(this.ships).forEach((function(r){for(var i=!1;!i;){var o=n[Math.floor(100*Math.random())],a=t[Math.floor(2*Math.random())];i=e.placeShip(r,o,a)}}))}},{key:"checkCollisions",value:function(e,t){if(!u(e,t))return!1;var n,r=i(e);try{for(r.s();!(n=r.n()).done;){var o=n.value;if(null!=this.board[o].ship)return!1}}catch(e){r.e(e)}finally{r.f()}return!0}}])&&l(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();e.exports=f},779:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,"string");if("object"!==r(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===r(o)?o:String(o)),i)}var o}var o=n(21),a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.board=new o,this.ships=this.board.ships,this.name=t?"p2":"p1",this.movesMade=[],t&&(this.AI=t)}var t,n;return t=e,(n=[{key:"fireShot",value:function(e,t){var n=e.board.receiveAttack(t);return this.movesMade.push(n),n}},{key:"getCell",value:function(e){return this.board.board[e]}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();e.exports=a},883:e=>{function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(e,n){for(var r=0;r<n.length;r++){var i=n[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(void 0,o=function(e,n){if("object"!==t(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!==t(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i.key),"symbol"===t(o)?o:String(o)),i)}var o}var r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.length=t,this.name=n,this.hits=0,this.sunk=!1,this.isPlaced=!1}var t,r;return t=e,(r=[{key:"hit",value:function(){this.hits+=1,this.hits===this.length&&(this.sunk=!0)}},{key:"isSunk",value:function(){return this.sunk}},{key:"place",value:function(){this.isPlaced=!0}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();e.exports=r},167:(e,t,n)=>{"use strict";function r(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||i(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){if(e){if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(e,t):void 0}}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function a(e,t){var n,r=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=i(e))){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,s=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){l=!0,a=e},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw a}}}}(e);try{for(r.s();!(n=r.n()).done;){var o=n.value;if(o<0||o>99)return!1}}catch(e){r.e(e)}finally{r.f()}if("x"===t||1===t||-1===t){var a=e.map((function(e){return e.toString()}));if(a.some((function(e){return"9"===e.slice(-1)&&a.indexOf(e)!==a.length-1})))return!1}return!0}function s(e,t){var n=document.createElement(e);return n.className=t,n}function l(e){return e[Math.floor(Math.random()*e.length)]}function c(e){var t=e.filter((function(e){return null!=e.ship&&!e.ship.isSunk()}));return t.length>0?r(new Set(t.map((function(e){return e.ship})))):[]}n.r(t),n.d(t,{checkEdgeCollisions:()=>a,createElement:()=>s,getActiveShips:()=>c,getNextShip:()=>f,projectShipLocs:()=>p,randElement:()=>l,shipLengths:()=>u});var u={carrier:5,battleship:4,cruiser:3,submarine:3,patrolBoat:2};function f(e){var t=Object.keys(u),n=t.indexOf(e);return n<4?t[n+1]:t[n]}function p(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;return r(Array(n).keys()).map((function(n){return e+t*(n+i)}))}},411:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(537),i=n.n(r),o=n(645),a=n.n(o),s=n(561),l=a()(i());l.i(s.Z),l.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const c=l},760:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,"#footer {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tgap: 8px;\n}\n\n#github-logo {\n\twidth: 25px;\n\theight: 25px;\n}\n\n#footer > p > a {\n\tfont-weight: bold;\n}","",{version:3,sources:["webpack://./src/styles/components/footer.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,mBAAmB;CACnB,uBAAuB;CACvB,QAAQ;AACT;;AAEA;CACC,WAAW;CACX,YAAY;AACb;;AAEA;CACC,iBAAiB;AAClB",sourcesContent:["#footer {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tgap: 8px;\n}\n\n#github-logo {\n\twidth: 25px;\n\theight: 25px;\n}\n\n#footer > p > a {\n\tfont-weight: bold;\n}"],sourceRoot:""}]);const s=a},561:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,"#game-window h2 {\n\ttext-align: center;\n}\n\n#game-window {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-around;\n\tflex-wrap: wrap;\n}\n\n.game-board {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(10, 1fr);\n\tgrid-template-columns: repeat(10, 1fr);\n\tborder: 0.5px solid black;\n}\n\n.cell {\n\twidth: 30px;\n\theight: 30px;\n\tborder: 0.5px solid black;\n\tbackground-color: white;\n}\n\n.board-info {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(2, 50px);\n\tgrid-template-columns: repeat(5, 1fr);\n}\n\n.board-info p {\n\tfont-size: 8px;\n}\n\n.progress-meter {\n\twidth: 50px;\n}","",{version:3,sources:["webpack://./src/styles/components/game-window.css"],names:[],mappings:"AAAA;CACC,kBAAkB;AACnB;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,6BAA6B;CAC7B,eAAe;AAChB;;AAEA;CACC,aAAa;CACb,mCAAmC;CACnC,sCAAsC;CACtC,yBAAyB;AAC1B;;AAEA;CACC,WAAW;CACX,YAAY;CACZ,yBAAyB;CACzB,uBAAuB;AACxB;;AAEA;CACC,aAAa;CACb,mCAAmC;CACnC,qCAAqC;AACtC;;AAEA;CACC,cAAc;AACf;;AAEA;CACC,WAAW;AACZ",sourcesContent:["#game-window h2 {\n\ttext-align: center;\n}\n\n#game-window {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-around;\n\tflex-wrap: wrap;\n}\n\n.game-board {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(10, 1fr);\n\tgrid-template-columns: repeat(10, 1fr);\n\tborder: 0.5px solid black;\n}\n\n.cell {\n\twidth: 30px;\n\theight: 30px;\n\tborder: 0.5px solid black;\n\tbackground-color: white;\n}\n\n.board-info {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(2, 50px);\n\tgrid-template-columns: repeat(5, 1fr);\n}\n\n.board-info p {\n\tfont-size: 8px;\n}\n\n.progress-meter {\n\twidth: 50px;\n}"],sourceRoot:""}]);const s=a},637:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([e.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]);const s=a},756:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var r=n(537),i=n.n(r),o=n(645),a=n.n(o),s=n(637),l=n(411),c=n(760),u=a()(i());u.i(s.Z),u.i(l.Z),u.i(c.Z),u.push([e.id,"* {\n\tpadding: 0;\n\tmargin: 0;\n}\n\na {\n\ttext-decoration: none;\n}\n\nbody {\n\theight: 100vh;\n\twidth: 100vw;\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAIA;CACC,UAAU;CACV,SAAS;AACV;;AAEA;CACC,qBAAqB;AACtB;;AAEA;CACC,aAAa;CACb,YAAY;AACb",sourcesContent:["@import './components/header.css';\n@import './components/body.css';\n@import './components/footer.css';\n\n* {\n\tpadding: 0;\n\tmargin: 0;\n}\n\na {\n\ttext-decoration: none;\n}\n\nbody {\n\theight: 100vh;\n\twidth: 100vw;\n}"],sourceRoot:""}]);const f=u},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&a[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),t.push(u))}},t}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},a=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],u=o[c]||0,f="".concat(c," ").concat(u);o[c]=u+1;var p=n(f),d={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(d);else{var h=i(d,r);r.byIndex=s,t.splice(s,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=n(o[a]);t[s].references--}for(var l=r(e,i),c=0;c<o.length;c++){var u=n(o[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}o=l}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nc=void 0,(()=>{"use strict";var e=n(779),t=n.n(e),r=n(167);function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function o(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=a(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){l=!0,o=e},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw o}}}}function a(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==i(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==i(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===i(o)?o:String(o)),r)}var o}const c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t=(0,r.createElement)("button","start-button");t.innerText="Start";var n=(0,r.createElement)("button","restart-button");n.innerText="Restart",this.elements={p1GameWindow:document.getElementById("p1-window"),p2GameWindow:document.getElementById("p2-window"),p1Board:document.getElementById("p1-board"),p2Board:document.getElementById("p2-board"),gameMessage:document.getElementById("message-window"),startButton:t,restartButton:n}}var t,n;return t=e,n=[{key:"renderBoard",value:function(e){var t=document.getElementById("".concat(e.name,"-board"));t.innerHTML="",this.elements["".concat(e.name,"GameWindow")].style.display="block";for(var n=e.board.board,i=0;i<100;i+=1){var o=(0,r.createElement)("div","cell");o.setAttribute("data-index",i),"p1"===e.name&&n[i].ship&&(o.style.backgroundColor="gray"),t.appendChild(o)}}},{key:"colorBoard",value:function(e){for(var t=0;t<100;t+=1)this.elements.p1Board.children[t].style.backgroundColor=null==e[t].ship?"white":"gray"}},{key:"setGameMessage",value:function(e){this.elements.gameMessage.innerHTML="";var t=(0,r.createElement)("p","game-message");t.innerText=e,this.elements.gameMessage.appendChild(t)}},{key:"renderStartScreen",value:function(){this.setGameMessage("Place your carrier (Press space to rotate)");var e=(0,r.createElement)("div","game-buttons"),t=(0,r.createElement)("button","random-button");t.innerText="Random";var n=(0,r.createElement)("button","reset-button");n.innerText="Reset",e.appendChild(t),e.appendChild(n),this.elements.randomButton=t,this.elements.resetButton=n,this.elements.p1GameWindow.appendChild(e),this.elements.p2GameWindow.style.display="none"}},{key:"renderInGameMessage",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t&&(this.elements.gameMessage.innerHTML=""),this.elements.gameMessage.appendChild(e)}},{key:"renderBoardInfo",value:function(e){var t=(0,r.createElement)("div","board-info");t.id="".concat(e.name,"-board-info");var n=e.ships;Object.keys(n).forEach((function(e){var n="patrolBoat"===e?"patrol boat":e,i=(0,r.createElement)("p","ship-name");i.innerText=n,t.appendChild(i)})),Object.keys(n).forEach((function(i){var o=(0,r.createElement)("meter","progress-meter");o.id="".concat(e.name,"-").concat(i,"-meter"),o.setAttribute("value",0),o.setAttribute("min",0),o.setAttribute("max",n[i].length),t.appendChild(o)})),this.elements["".concat(e.name,"GameWindow")].appendChild(t)}},{key:"bindMouseOverCell",value:function(e){var t,n=this,r=o(this.elements.p1Board.children);try{for(r.s();!(t=r.n()).done;)t.value.addEventListener("mouseover",(function(t){var r=parseInt(t.target.dataset.index,10),i=e(r);if(i.viewLocs){var a,s=i.valid?"green":"red",l=o(i.boardState);try{for(l.s();!(a=l.n()).done;){var c=a.value,u=i.boardState.indexOf(c),f=n.elements.p1Board.querySelector('.cell[data-index="'.concat(u,'"]'));i.viewLocs.includes(u)?f.style.backgroundColor=s:c.ship?f.style.backgroundColor="gray":f.style.backgroundColor="white"}}catch(e){l.e(e)}finally{l.f()}}}))}catch(e){r.e(e)}finally{r.f()}}},{key:"bindPressSpaceKey",value:function(e){document.addEventListener("keyup",(function(t){if("Space"===t.code){var n=(i=document.querySelectorAll(":hover"),function(e){if(Array.isArray(e))return s(e)}(i)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(i)||a(i)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).slice(-1)[0];if(n.classList.contains("cell")){e();var r=new Event("mouseover");n.dispatchEvent(r)}}var i}))}},{key:"bindClickPlacementCell",value:function(e){var t=this;this.elements.p1Board.addEventListener("click",(function(n){var r=parseInt(n.target.dataset.index,10);if("green"===t.elements.p1Board.children[r].style.backgroundColor){var i=e(r);t.colorBoard(i.board);var o="patrolBoat"===i.nextShip?"patrol boat":i.nextShip;null!=o?t.setGameMessage("Place your ".concat(o," (Press space to rotate)")):t.renderInGameMessage(t.elements.startButton,!0)}}))}},{key:"bindClickOpponentCell",value:function(e,t){var n,r=this,i=o("p1"===t.name?this.elements.p2Board.children:this.elements.p1Board.children);try{var a=function(){var i=n.value;i.addEventListener("click",(function(n){var o=parseInt(n.target.dataset.index,10),a=e(o);if(a.validMove){var s=a.opponent.board.board,l=s[o].ship;if(l&&s[o].isShot){i.style.backgroundColor="green";var c="patrolBoat"===l?"patrol boat":l;r.setGameMessage("You hit the ".concat(c,"."));var u=document.getElementById("".concat(a.opponent.name,"-").concat(l,"-meter")),f=parseInt(u.getAttribute("value"),10)+1;if(u.setAttribute("value",f),a.winner){var p="p1"===t.name?"You won!":"You lost...";r.setGameMessage(p),r.renderInGameMessage(r.elements.restartButton),r.resetBoardEventListeners("p2")}}else i.style.backgroundColor="red",a.winner||r.setGameMessage("You missed!")}else"p1"!==t.name||a.winner||r.setGameMessage("You already shot at that cell.")}))};for(i.s();!(n=i.n()).done;)a()}catch(e){i.e(e)}finally{i.f()}}},{key:"bindClickRandomButton",value:function(e){var t=this;this.elements.randomButton.addEventListener("click",(function(){var n=e();t.colorBoard(n),t.renderInGameMessage(t.elements.startButton,!0)}))}},{key:"bindClickResetButton",value:function(e){var t=this;this.elements.resetButton.addEventListener("click",(function(){var n=e();t.colorBoard(n),t.setGameMessage("Place your carrier (Press space to rotate)")}))}},{key:"bindClickStartButton",value:function(e){var t=this;this.elements.startButton.addEventListener("click",(function(){t.elements.p1GameWindow.removeChild(t.elements.p1GameWindow.lastChild),e(),t.setGameMessage("Click to fire shots.")}))}},{key:"bindClickRestartButton",value:function(e){var t=this;this.elements.restartButton.addEventListener("click",(function(){for(var n=0,r=[t.elements.p1GameWindow,t.elements.p2GameWindow];n<r.length;n++){var i=r[n];i.removeChild(i.lastChild)}e()}))}},{key:"resetBoardEventListeners",value:function(e){var t=this.elements["".concat(e,"Board")],n=t.cloneNode(!0);t.parentNode.replaceChild(n,t),this.elements["".concat(e,"Board")]=n}},{key:"getCell",value:function(e,t){return this.elements["".concat(e,"Board")].children[t]}}],n&&l(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();var u=n(21),f=n.n(u);function p(e){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p(e)}function d(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=m(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){s=!0,o=e},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function h(e){return function(e){if(Array.isArray(e))return y(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||m(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,t){if(e){if("string"==typeof e)return y(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?y(e,t):void 0}}function y(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,i=function(e,t){if("object"!==p(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==p(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===p(i)?i:String(i)),r)}var i}const b=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.cellsHit={carrier:[],battleship:[],cruiser:[],submarine:[],patrolBoat:[]},this.modelBoard=(new(f())).board,this.offsets=[-1,1,-10,10]}var t,n;return t=e,(n=[{key:"getRandomShot",value:function(e){var t=e.map((function(e){return e.cell})),n=h(Array(100).keys()).filter((function(e){return!t.includes(e)}));return(0,r.randElement)(n)}},{key:"getSmartShot",value:function(e){if(0===e.length)return this.getRandomShot(e);var t=null,n=e.slice(-1)[0],i=n.cell,o=n.ship;if(o&&!o.isSunk())this.cellsHit[o.name].push(i),this.modelBoard[i].ship=o,t=this.findSuitableMoves(o);else{var a=(0,r.getActiveShips)(e);if(a.length>0){var s=a.slice(-1)[0];t=this.findSuitableMoves(s)}else{var l=this.getUndiscoveredShipLengths(),c=(0,r.randElement)(l),u=this.modelValidPlacements(c);t=(0,r.randElement)((0,r.randElement)(u))}}return t}},{key:"findSuitableMoves",value:function(e){var t=this.cellsHit[e.name],n=[];if(1===t.length){var i,o=t[0],a=d(this.offsets);try{for(a.s();!(i=a.n()).done;){var s=i.value,l=this.findValidProjection(o,s,e.length-1);l&&n.push(l)}}catch(e){a.e(e)}finally{a.f()}}else{var c,u=[Math.min.apply(Math,h(t)),Math.max.apply(Math,h(t))];c=(u[1]-u[0])%10==0?this.offsets.slice(2):this.offsets.slice(0,2);for(var f=0;f<2;f+=1){var p=u[f],m=c[f],y=this.findValidProjection(p,m,e.length-t.length);y&&n.push(y)}}return(0,r.randElement)(n)}},{key:"modelValidPlacements",value:function(e){var t,n=[],i=d(this.getEmptyLocs());try{for(i.s();!(t=i.n()).done;)for(var o=t.value,a=0,s=[1,10];a<s.length;a++){var l=s[a],c=(0,r.projectShipLocs)(o,l,e);this.checkCollisions(c,l)&&n.push(c)}}catch(e){i.e(e)}finally{i.f()}return n}},{key:"clickCell",value:function(e,t){this.modelBoard[e].isShot=!0,t.click()}},{key:"getUndiscoveredShipLengths",value:function(){var e=this,t=[];return Object.keys(this.cellsHit).forEach((function(n){var i=r.shipLengths[n];0===e.cellsHit[n].length&&t.push(i)})),t}},{key:"getEmptyLocs",value:function(){var e=this;return this.modelBoard.filter((function(e){return!e.isShot})).map((function(t){return e.modelBoard.indexOf(t)}))}},{key:"checkCollisions",value:function(e,t){if(!(0,r.checkEdgeCollisions)(e,t))return!1;var n,i=d(e);try{for(i.s();!(n=i.n()).done;){var o=n.value;if(this.modelBoard[o].isShot)return!1}}catch(e){i.e(e)}finally{i.f()}return!0}},{key:"findValidProjection",value:function(e,t,n){for(var i=n;i>0;){var o=(0,r.projectShipLocs)(e,t,i,1);if(this.checkCollisions(o,t))return e+t;i-=1}return null}}])&&v(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function A(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,i=function(e,t){if("object"!==g(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==g(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===g(i)?i:String(i)),r)}var i}const w=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.init()}var n,i;return n=e,(i=[{key:"init",value:function(){this.p1=new(t()),this.p2=new(t())(new b),this.view=new c,this.turn="p1",this.winner=null,this.placementState={axis:"x",currentShip:"carrier",allShipsPlaced:!1},this.p2.board.placeShipsRandomly()}},{key:"switchTurn",value:function(){this.turn="p1"===this.turn?"p2":"p1"}},{key:"checkWin",value:function(e){return 5===e.shipsSunk()&&(this.winner=this.turn),this.winner}},{key:"playPlayerTurn",value:function(e){if(null!=this.winner)return!1;var t=this.p2.board,n={validMove:!1,opponent:this.p2,winner:null};if(!t.board[e].isShot){if(n.validMove=!0,this.p1.fireShot(this.p2,e),!this.checkWin(t)){this.switchTurn();var r=this.p2.AI.getSmartShot(this.p2.movesMade),i=this.view.getCell(this.p1.name,r);this.p2.AI.clickCell(r,i)}n.winner=this.winner}return n}},{key:"playComputerTurn",value:function(e){if(null!=this.winner)return!1;var t={validMove:!1,opponent:this.p1,winner:null};return"p2"===this.turn&&(t.validMove=!0,this.p2.fireShot(this.p1,e),this.checkWin(this.p1.board)?t.winner=this.winner:this.switchTurn()),t}},{key:"checkValidPlacement",value:function(e){var t,n=this,i={valid:!1,boardState:this.p1.board.board};if(!this.placementState.allShipsPlaced){var o=r.shipLengths[this.placementState.currentShip],a=(t=Array(o).keys(),function(e){if(Array.isArray(e))return A(e)}(t)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(e,t){if(e){if("string"==typeof e)return A(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?A(e,t):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(t){return"x"===n.placementState.axis?e+t:e+10*t}));if(this.p1.board.checkCollisions(a,this.placementState.axis))i.valid=!0,i.viewLocs=a;else if("y"===this.placementState.axis)i.viewLocs=a.filter((function(e){return e<100}));else{var s=a[0];i.viewLocs=s<10?a.filter((function(e){return e<10})):a.filter((function(e){return e.toString()[0]===s.toString()[0]}))}}return i}},{key:"placeShip",value:function(e){var t={};if(this.p1.board.placeShip(this.placementState.currentShip,e,this.placementState.axis),t.board=this.p1.board.board,5===this.p1.board.getShipsPlaced().length)t.nextShip=null,this.placementState.allShipsPlaced=!0;else{var n=(0,r.getNextShip)(this.placementState.currentShip);this.placementState.currentShip=n,t.nextShip=n}return t}},{key:"togglePlacementAxis",value:function(){this.placementState.axis="x"===this.placementState.axis?"y":"x"}},{key:"randomizePlayerShips",value:function(){return this.p1.board.resetBoard(),this.p1.board.placeShipsRandomly(),this.placementState.allShipsPlaced=!0,this.p1.board.board}},{key:"resetPlayerBoard",value:function(){return this.p1.board.resetBoard(),this.placementState.allShipsPlaced=!1,this.placementState.currentShip="carrier",this.p1.board.board}},{key:"setupGame",value:function(){this.view.renderBoard(this.p1),this.view.renderStartScreen(),this.view.bindMouseOverCell(this.checkValidPlacement.bind(this)),this.view.bindPressSpaceKey(this.togglePlacementAxis.bind(this)),this.view.bindClickPlacementCell(this.placeShip.bind(this)),this.view.bindClickRandomButton(this.randomizePlayerShips.bind(this)),this.view.bindClickResetButton(this.resetPlayerBoard.bind(this)),this.view.bindClickStartButton(this.startGame.bind(this))}},{key:"startGame",value:function(){this.view.resetBoardEventListeners(this.p1.name),this.view.renderBoard(this.p1),this.view.renderBoardInfo(this.p1),this.view.renderBoard(this.p2),this.view.renderBoardInfo(this.p2),this.view.bindClickOpponentCell(this.playPlayerTurn.bind(this),this.p1),this.view.bindClickOpponentCell(this.playComputerTurn.bind(this),this.p2),this.view.bindClickRestartButton(this.restartGame.bind(this))}},{key:"restartGame",value:function(){this.init(),this.setupGame()}}])&&S(n.prototype,i),Object.defineProperty(n,"prototype",{writable:!1}),e}();var C=n(379),k=n.n(C),B=n(795),x=n.n(B),E=n(569),j=n.n(E),P=n(565),M=n.n(P),I=n(216),T=n.n(I),O=n(589),L=n.n(O),G=n(756),R={};R.styleTagTransform=L(),R.setAttributes=M(),R.insert=j().bind(null,"head"),R.domAPI=x(),R.insertStyleElement=T(),k()(G.Z,R),G.Z&&G.Z.locals&&G.Z.locals,(new w).setupGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFzQnJULEtBQUt1VCxpQkFBaUJiLEtBQUsxUyxNQUFPQSxLQUFLcVIsSUFDdkVyUixLQUFLc1IsS0FBS2tDLHVCQUF1QnhULEtBQUt5VCxZQUFZZixLQUFLMVMsTUFDekQsR0FBQyx5QkFFRCxXQUNFQSxLQUFLbVIsT0FFTG5SLEtBQUswVCxXQUNQLE0sb0VBQUMsRUEvTE8sRyx5SENLTjlNLEVBQVUsQ0FBQyxFQUVmQSxFQUFRMkMsa0JBQW9CLElBQzVCM0MsRUFBUXFDLGNBQWdCLElBRWxCckMsRUFBUXlCLE9BQVMsU0FBYyxLQUFNLFFBRTNDekIsRUFBUWUsT0FBUyxJQUNqQmYsRUFBUTBDLG1CQUFxQixJQUVoQixJQUFJLElBQVMxQyxHQUtKLEtBQVcsWUFBaUIsWUN0QnJDLElBQUkrTSxHQUVaRCxXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9hcHAvbW9kZWxzL0dhbWVCb2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2FwcC9tb2RlbHMvUGxheWVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvYXBwL21vZGVscy9TaGlwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvYXBwL21vZHVsZXMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlcy9jb21wb25lbnRzL2JvZHkuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL2NvbXBvbmVudHMvZm9vdGVyLmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlcy9jb21wb25lbnRzL2dhbWUtd2luZG93LmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlcy9jb21wb25lbnRzL2hlYWRlci5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvbWFpbi5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9hcHAvbW9kdWxlcy92aWV3LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvYXBwL21vZHVsZXMvQUkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9hcHAvbW9kdWxlcy9nYW1lLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL21haW4uY3NzP2U4MGEiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9hcHAvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU2hpcCA9IHJlcXVpcmUoJy4vU2hpcCcpO1xuY29uc3QgeyBjaGVja0VkZ2VDb2xsaXNpb25zIH0gPSByZXF1aXJlKCcuLi9tb2R1bGVzL2hlbHBlcnMnKTtcblxuY2xhc3MgR2FtZUJvYXJkIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ib2FyZCA9IFtdO1xuXG4gICAgdGhpcy5yZXNldEJvYXJkKCk7XG5cbiAgICB0aGlzLnNoaXBzID0ge1xuICAgICAgY2FycmllcjogbmV3IFNoaXAoNSwgJ2NhcnJpZXInKSxcbiAgICAgIGJhdHRsZXNoaXA6IG5ldyBTaGlwKDQsICdiYXR0bGVzaGlwJyksXG4gICAgICBjcnVpc2VyOiBuZXcgU2hpcCgzLCAnY3J1aXNlcicpLFxuICAgICAgc3VibWFyaW5lOiBuZXcgU2hpcCgzLCAnc3VibWFyaW5lJyksXG4gICAgICBwYXRyb2xCb2F0OiBuZXcgU2hpcCgyLCAncGF0cm9sQm9hdCcpLFxuICAgIH07XG4gIH1cblxuICBwbGFjZVNoaXAoc2hpcE5hbWUsIHN0YXJ0LCBheGlzKSB7XG4gICAgY29uc3Qgc2hpcCA9IHRoaXMuc2hpcHNbc2hpcE5hbWVdO1xuICAgIHNoaXAucGxhY2UoKTtcblxuICAgIGNvbnN0IGxvY3MgPSBbLi4uQXJyYXkoc2hpcC5sZW5ndGgpLmtleXMoKV0ubWFwKChuKSA9PiAoKGF4aXMgPT09ICd4JykgPyBzdGFydCArIG4gOiBzdGFydCArIChuICogMTApKSk7XG5cbiAgICBjb25zdCBpc1ZhbGlkID0gdGhpcy5jaGVja0NvbGxpc2lvbnMobG9jcywgYXhpcywgdGhpcy5ib2FyZCk7XG5cbiAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgZm9yIChjb25zdCBsb2Mgb2YgbG9jcykge1xuICAgICAgICB0aGlzLmJvYXJkW2xvY10uc2hpcCA9IHNoaXAubmFtZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZ2V0U2hpcHNQbGFjZWQoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuc2hpcHMpLmZpbHRlcigoc2hpcCkgPT4gdGhpcy5zaGlwc1tzaGlwXS5pc1BsYWNlZCk7XG4gIH1cblxuICByZXNldEJvYXJkKCkge1xuICAgIHRoaXMuYm9hcmQgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTAwOyBpICs9IDEpIHtcbiAgICAgIHRoaXMuYm9hcmQucHVzaCh7IHNoaXA6IG51bGwsIGlzU2hvdDogZmFsc2UgfSk7XG4gICAgfVxuICB9XG5cbiAgaXNTaG90SGl0KGxvYykge1xuICAgIHJldHVybiB0aGlzLmJvYXJkW2xvY10uaXNTaG90ICYmIHRoaXMuYm9hcmRbbG9jXS5zaGlwICE9IG51bGw7XG4gIH1cblxuICByZWNlaXZlQXR0YWNrKGxvYykge1xuICAgIGNvbnN0IG1vdmVJbmZvID0ge1xuICAgICAgc2hpcDogbnVsbCxcbiAgICAgIGNlbGw6IGxvYyxcbiAgICB9O1xuXG4gICAgaWYgKCF0aGlzLmJvYXJkW2xvY10uaXNTaG90KSB7XG4gICAgICB0aGlzLmJvYXJkW2xvY10uaXNTaG90ID0gdHJ1ZTtcblxuICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5ib2FyZFtsb2NdLnNoaXA7XG5cbiAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgY29uc3Qgc2hpcCA9IHRoaXMuc2hpcHNbdGFyZ2V0XTtcblxuICAgICAgICBtb3ZlSW5mby5zaGlwID0gc2hpcDtcbiAgICAgICAgc2hpcC5oaXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1vdmVJbmZvLnNoaXAgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtb3ZlSW5mbztcbiAgfVxuXG4gIHNoaXBBdChsb2MpIHtcbiAgICByZXR1cm4gdGhpcy5zaGlwc1t0aGlzLmJvYXJkW2xvY10uc2hpcF07XG4gIH1cblxuICBzaGlwc1N1bmsoKSB7XG4gICAgbGV0IHN1bmsgPSAwO1xuXG4gICAgT2JqZWN0LmtleXModGhpcy5zaGlwcykuZm9yRWFjaCgoc2hpcE5hbWUpID0+IHtcbiAgICAgIGlmICh0aGlzLnNoaXBzW3NoaXBOYW1lXS5pc1N1bmsoKSkge1xuICAgICAgICBzdW5rICs9IDE7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3VuaztcbiAgfVxuXG4gIHBsYWNlU2hpcHNSYW5kb21seSgpIHtcbiAgICBjb25zdCBheGVzID0gWyd4JywgJ3knXTtcbiAgICBjb25zdCBjZWxscyA9IFsuLi5BcnJheSgxMDApLmtleXMoKV07XG5cbiAgICBPYmplY3Qua2V5cyh0aGlzLnNoaXBzKS5mb3JFYWNoKChzaGlwTmFtZSkgPT4ge1xuICAgICAgbGV0IHZhbGlkUGxhY2VtZW50ID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICghdmFsaWRQbGFjZW1lbnQpIHtcbiAgICAgICAgY29uc3QgbG9jID0gY2VsbHNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwKV07XG4gICAgICAgIGNvbnN0IGF4aXMgPSBheGVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpXTtcblxuICAgICAgICB2YWxpZFBsYWNlbWVudCA9IHRoaXMucGxhY2VTaGlwKHNoaXBOYW1lLCBsb2MsIGF4aXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY2hlY2tDb2xsaXNpb25zKGxvY3MsIGF4aXMpIHtcbiAgICBpZiAoIWNoZWNrRWRnZUNvbGxpc2lvbnMobG9jcywgYXhpcykpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoY29uc3QgbG9jIG9mIGxvY3MpIHtcbiAgICAgIGlmICh0aGlzLmJvYXJkW2xvY10uc2hpcCAhPSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHYW1lQm9hcmQ7XG4iLCJjb25zdCBHYW1lQm9hcmQgPSByZXF1aXJlKCcuL0dhbWVCb2FyZCcpO1xuXG5jbGFzcyBQbGF5ZXIge1xuICBjb25zdHJ1Y3RvcihhaSkge1xuICAgIHRoaXMuYm9hcmQgPSBuZXcgR2FtZUJvYXJkKCk7XG4gICAgdGhpcy5zaGlwcyA9IHRoaXMuYm9hcmQuc2hpcHM7XG4gICAgdGhpcy5uYW1lID0gYWkgPyAncDInIDogJ3AxJztcbiAgICB0aGlzLm1vdmVzTWFkZSA9IFtdO1xuXG4gICAgaWYgKGFpKSB7XG4gICAgICB0aGlzLkFJID0gYWk7XG4gICAgfVxuICB9XG5cbiAgZmlyZVNob3Qob3Bwb25lbnQsIGxvYykge1xuICAgIGNvbnN0IG1vdmVJbmZvID0gb3Bwb25lbnQuYm9hcmQucmVjZWl2ZUF0dGFjayhsb2MpO1xuICAgIHRoaXMubW92ZXNNYWRlLnB1c2gobW92ZUluZm8pO1xuXG4gICAgcmV0dXJuIG1vdmVJbmZvO1xuICB9XG5cbiAgZ2V0Q2VsbChsb2MpIHtcbiAgICByZXR1cm4gdGhpcy5ib2FyZC5ib2FyZFtsb2NdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGxheWVyO1xuIiwiY2xhc3MgU2hpcCB7XG4gIGNvbnN0cnVjdG9yKGxlbmd0aCwgbmFtZSkge1xuICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5oaXRzID0gMDtcbiAgICB0aGlzLnN1bmsgPSBmYWxzZTtcbiAgICB0aGlzLmlzUGxhY2VkID0gZmFsc2U7XG4gIH1cblxuICBoaXQoKSB7XG4gICAgdGhpcy5oaXRzICs9IDE7XG5cbiAgICBpZiAodGhpcy5oaXRzID09PSB0aGlzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zdW5rID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpc1N1bmsoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3VuaztcbiAgfVxuXG4gIHBsYWNlKCkge1xuICAgIHRoaXMuaXNQbGFjZWQgPSB0cnVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hpcDtcbiIsImV4cG9ydCBmdW5jdGlvbiBjaGVja0VkZ2VDb2xsaXNpb25zKGxvY3MsIGF4aXMpIHtcbiAgZm9yIChjb25zdCBsb2Mgb2YgbG9jcykge1xuICAgIGlmIChsb2MgPCAwIHx8IGxvYyA+IDk5KSByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoYXhpcyA9PT0gJ3gnIHx8IGF4aXMgPT09IDEgfHwgYXhpcyA9PT0gLTEpIHtcbiAgICBjb25zdCBsb2NzU3RyID0gbG9jcy5tYXAoKGxvYykgPT4gbG9jLnRvU3RyaW5nKCkpO1xuXG4gICAgaWYgKGxvY3NTdHIuc29tZSgobG9jKSA9PiBsb2Muc2xpY2UoLTEpID09PSAnOScgJiYgbG9jc1N0ci5pbmRleE9mKGxvYykgIT09IChsb2NzU3RyLmxlbmd0aCAtIDEpKSkgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KHRhZywgY2xhc3NOYW1lKSB7XG4gIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuXG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFuZEVsZW1lbnQoYXJyKSB7XG4gIHJldHVybiBhcnJbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyLmxlbmd0aCldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWN0aXZlU2hpcHMobW92ZXNNYWRlKSB7XG4gIGNvbnN0IHNoaXBNb3ZlcyA9IG1vdmVzTWFkZS5maWx0ZXIoKG1vdmUpID0+IG1vdmUuc2hpcCAhPSBudWxsICYmICFtb3ZlLnNoaXAuaXNTdW5rKCkpO1xuXG4gIHJldHVybiAoc2hpcE1vdmVzLmxlbmd0aCA+IDApID8gWy4uLm5ldyBTZXQoc2hpcE1vdmVzLm1hcCgobW92ZSkgPT4gbW92ZS5zaGlwKSldIDogW107XG59XG5cbmV4cG9ydCBjb25zdCBzaGlwTGVuZ3RocyA9IHtcbiAgY2FycmllcjogNSxcbiAgYmF0dGxlc2hpcDogNCxcbiAgY3J1aXNlcjogMyxcbiAgc3VibWFyaW5lOiAzLFxuICBwYXRyb2xCb2F0OiAyLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRTaGlwKGN1cnJlbnRTaGlwKSB7XG4gIGNvbnN0IHNoaXBOYW1lcyA9IE9iamVjdC5rZXlzKHNoaXBMZW5ndGhzKTtcblxuICBjb25zdCBpbmRleCA9IHNoaXBOYW1lcy5pbmRleE9mKGN1cnJlbnRTaGlwKTtcblxuICBpZiAoaW5kZXggPCA0KSByZXR1cm4gc2hpcE5hbWVzW2luZGV4ICsgMV07XG5cbiAgcmV0dXJuIHNoaXBOYW1lc1tpbmRleF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0U2hpcExvY3Moc3RhcnQsIG9mZnNldCwgbGVuZ3RoLCBzaGlmdCA9IDApIHtcbiAgcmV0dXJuIFsuLi5BcnJheShsZW5ndGgpLmtleXMoKV0ubWFwKChpKSA9PiBzdGFydCArIChvZmZzZXQgKiAoaSArIHNoaWZ0KSkpO1xufVxuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZ2FtZS13aW5kb3cuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJcIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiXCIsXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIjZm9vdGVyIHtcXG5cXHRkaXNwbGF5OiBmbGV4O1xcblxcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFx0Z2FwOiA4cHg7XFxufVxcblxcbiNnaXRodWItbG9nbyB7XFxuXFx0d2lkdGg6IDI1cHg7XFxuXFx0aGVpZ2h0OiAyNXB4O1xcbn1cXG5cXG4jZm9vdGVyID4gcCA+IGEge1xcblxcdGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL2NvbXBvbmVudHMvZm9vdGVyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtDQUNDLGFBQWE7Q0FDYixtQkFBbUI7Q0FDbkIsdUJBQXVCO0NBQ3ZCLFFBQVE7QUFDVDs7QUFFQTtDQUNDLFdBQVc7Q0FDWCxZQUFZO0FBQ2I7O0FBRUE7Q0FDQyxpQkFBaUI7QUFDbEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiI2Zvb3RlciB7XFxuXFx0ZGlzcGxheTogZmxleDtcXG5cXHRhbGlnbi1pdGVtczogY2VudGVyO1xcblxcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcdGdhcDogOHB4O1xcbn1cXG5cXG4jZ2l0aHViLWxvZ28ge1xcblxcdHdpZHRoOiAyNXB4O1xcblxcdGhlaWdodDogMjVweDtcXG59XFxuXFxuI2Zvb3RlciA+IHAgPiBhIHtcXG5cXHRmb250LXdlaWdodDogYm9sZDtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiI2dhbWUtd2luZG93IGgyIHtcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbiNnYW1lLXdpbmRvdyB7XFxuXFx0ZGlzcGxheTogZmxleDtcXG5cXHRhbGlnbi1pdGVtczogY2VudGVyO1xcblxcdGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcblxcdGZsZXgtd3JhcDogd3JhcDtcXG59XFxuXFxuLmdhbWUtYm9hcmQge1xcblxcdGRpc3BsYXk6IGdyaWQ7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMTAsIDFmcik7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMTAsIDFmcik7XFxuXFx0Ym9yZGVyOiAwLjVweCBzb2xpZCBibGFjaztcXG59XFxuXFxuLmNlbGwge1xcblxcdHdpZHRoOiAzMHB4O1xcblxcdGhlaWdodDogMzBweDtcXG5cXHRib3JkZXI6IDAuNXB4IHNvbGlkIGJsYWNrO1xcblxcdGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4uYm9hcmQtaW5mbyB7XFxuXFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgyLCA1MHB4KTtcXG5cXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg1LCAxZnIpO1xcbn1cXG5cXG4uYm9hcmQtaW5mbyBwIHtcXG5cXHRmb250LXNpemU6IDhweDtcXG59XFxuXFxuLnByb2dyZXNzLW1ldGVyIHtcXG5cXHR3aWR0aDogNTBweDtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9jb21wb25lbnRzL2dhbWUtd2luZG93LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtDQUNDLGtCQUFrQjtBQUNuQjs7QUFFQTtDQUNDLGFBQWE7Q0FDYixtQkFBbUI7Q0FDbkIsNkJBQTZCO0NBQzdCLGVBQWU7QUFDaEI7O0FBRUE7Q0FDQyxhQUFhO0NBQ2IsbUNBQW1DO0NBQ25DLHNDQUFzQztDQUN0Qyx5QkFBeUI7QUFDMUI7O0FBRUE7Q0FDQyxXQUFXO0NBQ1gsWUFBWTtDQUNaLHlCQUF5QjtDQUN6Qix1QkFBdUI7QUFDeEI7O0FBRUE7Q0FDQyxhQUFhO0NBQ2IsbUNBQW1DO0NBQ25DLHFDQUFxQztBQUN0Qzs7QUFFQTtDQUNDLGNBQWM7QUFDZjs7QUFFQTtDQUNDLFdBQVc7QUFDWlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIjZ2FtZS13aW5kb3cgaDIge1xcblxcdHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuI2dhbWUtd2luZG93IHtcXG5cXHRkaXNwbGF5OiBmbGV4O1xcblxcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuXFx0ZmxleC13cmFwOiB3cmFwO1xcbn1cXG5cXG4uZ2FtZS1ib2FyZCB7XFxuXFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgxMCwgMWZyKTtcXG5cXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgxMCwgMWZyKTtcXG5cXHRib3JkZXI6IDAuNXB4IHNvbGlkIGJsYWNrO1xcbn1cXG5cXG4uY2VsbCB7XFxuXFx0d2lkdGg6IDMwcHg7XFxuXFx0aGVpZ2h0OiAzMHB4O1xcblxcdGJvcmRlcjogMC41cHggc29saWQgYmxhY2s7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxufVxcblxcbi5ib2FyZC1pbmZvIHtcXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDIsIDUwcHgpO1xcblxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDUsIDFmcik7XFxufVxcblxcbi5ib2FyZC1pbmZvIHAge1xcblxcdGZvbnQtc2l6ZTogOHB4O1xcbn1cXG5cXG4ucHJvZ3Jlc3MtbWV0ZXIge1xcblxcdHdpZHRoOiA1MHB4O1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJcIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiXCIsXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29tcG9uZW50cy9oZWFkZXIuY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29tcG9uZW50cy9ib2R5LmNzc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMl9fXyBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NvbXBvbmVudHMvZm9vdGVyLmNzc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzFfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzJfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKiB7XFxuXFx0cGFkZGluZzogMDtcXG5cXHRtYXJnaW46IDA7XFxufVxcblxcbmEge1xcblxcdHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuYm9keSB7XFxuXFx0aGVpZ2h0OiAxMDB2aDtcXG5cXHR3aWR0aDogMTAwdnc7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvbWFpbi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBSUE7Q0FDQyxVQUFVO0NBQ1YsU0FBUztBQUNWOztBQUVBO0NBQ0MscUJBQXFCO0FBQ3RCOztBQUVBO0NBQ0MsYUFBYTtDQUNiLFlBQVk7QUFDYlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0ICcuL2NvbXBvbmVudHMvaGVhZGVyLmNzcyc7XFxuQGltcG9ydCAnLi9jb21wb25lbnRzL2JvZHkuY3NzJztcXG5AaW1wb3J0ICcuL2NvbXBvbmVudHMvZm9vdGVyLmNzcyc7XFxuXFxuKiB7XFxuXFx0cGFkZGluZzogMDtcXG5cXHRtYXJnaW46IDA7XFxufVxcblxcbmEge1xcblxcdHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuYm9keSB7XFxuXFx0aGVpZ2h0OiAxMDB2aDtcXG5cXHR3aWR0aDogMTAwdnc7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsImltcG9ydCB7XG4gIGNyZWF0ZUVsZW1lbnQsXG59IGZyb20gJy4vaGVscGVycyc7XG5cbmNsYXNzIFZpZXcge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBzdGFydEJ1dHRvbiA9IGNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsICdzdGFydC1idXR0b24nKTtcbiAgICBzdGFydEJ1dHRvbi5pbm5lclRleHQgPSAnU3RhcnQnO1xuXG4gICAgY29uc3QgcmVzdGFydEJ1dHRvbiA9IGNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsICdyZXN0YXJ0LWJ1dHRvbicpO1xuICAgIHJlc3RhcnRCdXR0b24uaW5uZXJUZXh0ID0gJ1Jlc3RhcnQnO1xuXG4gICAgdGhpcy5lbGVtZW50cyA9IHtcbiAgICAgIHAxR2FtZVdpbmRvdzogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3AxLXdpbmRvdycpLFxuICAgICAgcDJHYW1lV2luZG93OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncDItd2luZG93JyksXG4gICAgICBwMUJvYXJkOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncDEtYm9hcmQnKSxcbiAgICAgIHAyQm9hcmQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwMi1ib2FyZCcpLFxuICAgICAgZ2FtZU1lc3NhZ2U6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtZXNzYWdlLXdpbmRvdycpLFxuXG4gICAgICBzdGFydEJ1dHRvbixcbiAgICAgIHJlc3RhcnRCdXR0b24sXG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlckJvYXJkKHBsYXllcikge1xuICAgIGNvbnN0IGdyaWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHtwbGF5ZXIubmFtZX0tYm9hcmRgKTtcblxuICAgIGdyaWQuaW5uZXJIVE1MID0gJyc7XG4gICAgdGhpcy5lbGVtZW50c1tgJHtwbGF5ZXIubmFtZX1HYW1lV2luZG93YF0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cbiAgICBjb25zdCB7IGJvYXJkIH0gPSBwbGF5ZXIuYm9hcmQ7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBjZWxsID0gY3JlYXRlRWxlbWVudCgnZGl2JywgJ2NlbGwnKTtcbiAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JywgaSk7XG5cbiAgICAgIGlmIChwbGF5ZXIubmFtZSA9PT0gJ3AxJyAmJiBib2FyZFtpXS5zaGlwKSB7XG4gICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ2dyYXknO1xuICAgICAgfVxuXG4gICAgICBncmlkLmFwcGVuZENoaWxkKGNlbGwpO1xuICAgIH1cbiAgfVxuXG4gIGNvbG9yQm9hcmQoYm9hcmQpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBjZWxsID0gdGhpcy5lbGVtZW50cy5wMUJvYXJkLmNoaWxkcmVuW2ldO1xuICAgICAgY2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAoYm9hcmRbaV0uc2hpcCA9PSBudWxsKSA/ICd3aGl0ZScgOiAnZ3JheSc7XG4gICAgfVxuICB9XG5cbiAgc2V0R2FtZU1lc3NhZ2UodGV4dCkge1xuICAgIHRoaXMuZWxlbWVudHMuZ2FtZU1lc3NhZ2UuaW5uZXJIVE1MID0gJyc7XG5cbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlRWxlbWVudCgncCcsICdnYW1lLW1lc3NhZ2UnKTtcbiAgICBtZXNzYWdlLmlubmVyVGV4dCA9IHRleHQ7XG4gICAgdGhpcy5lbGVtZW50cy5nYW1lTWVzc2FnZS5hcHBlbmRDaGlsZChtZXNzYWdlKTtcbiAgfVxuXG4gIHJlbmRlclN0YXJ0U2NyZWVuKCkge1xuICAgIHRoaXMuc2V0R2FtZU1lc3NhZ2UoJ1BsYWNlIHlvdXIgY2FycmllciAoUHJlc3Mgc3BhY2UgdG8gcm90YXRlKScpO1xuXG4gICAgY29uc3QgZ2FtZUJ1dHRvbnMgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCAnZ2FtZS1idXR0b25zJyk7XG5cbiAgICBjb25zdCByYW5kb21CdXR0b24gPSBjcmVhdGVFbGVtZW50KCdidXR0b24nLCAncmFuZG9tLWJ1dHRvbicpO1xuICAgIHJhbmRvbUJ1dHRvbi5pbm5lclRleHQgPSAnUmFuZG9tJztcbiAgICBjb25zdCByZXNldEJ1dHRvbiA9IGNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsICdyZXNldC1idXR0b24nKTtcbiAgICByZXNldEJ1dHRvbi5pbm5lclRleHQgPSAnUmVzZXQnO1xuXG4gICAgZ2FtZUJ1dHRvbnMuYXBwZW5kQ2hpbGQocmFuZG9tQnV0dG9uKTtcbiAgICBnYW1lQnV0dG9ucy5hcHBlbmRDaGlsZChyZXNldEJ1dHRvbik7XG5cbiAgICB0aGlzLmVsZW1lbnRzLnJhbmRvbUJ1dHRvbiA9IHJhbmRvbUJ1dHRvbjtcbiAgICB0aGlzLmVsZW1lbnRzLnJlc2V0QnV0dG9uID0gcmVzZXRCdXR0b247XG5cbiAgICB0aGlzLmVsZW1lbnRzLnAxR2FtZVdpbmRvdy5hcHBlbmRDaGlsZChnYW1lQnV0dG9ucyk7XG4gICAgdGhpcy5lbGVtZW50cy5wMkdhbWVXaW5kb3cuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfVxuXG4gIHJlbmRlckluR2FtZU1lc3NhZ2UoZWxlbWVudCwgcmVzZXQgPSBmYWxzZSkge1xuICAgIGlmIChyZXNldCkgdGhpcy5lbGVtZW50cy5nYW1lTWVzc2FnZS5pbm5lckhUTUwgPSAnJztcblxuICAgIHRoaXMuZWxlbWVudHMuZ2FtZU1lc3NhZ2UuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gIH1cblxuICByZW5kZXJCb2FyZEluZm8ocGxheWVyKSB7XG4gICAgY29uc3QgYm9hcmRJbmZvID0gY3JlYXRlRWxlbWVudCgnZGl2JywgJ2JvYXJkLWluZm8nKTtcbiAgICBib2FyZEluZm8uaWQgPSBgJHtwbGF5ZXIubmFtZX0tYm9hcmQtaW5mb2A7XG5cbiAgICBjb25zdCB7IHNoaXBzIH0gPSBwbGF5ZXI7XG5cbiAgICBPYmplY3Qua2V5cyhzaGlwcykuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgY29uc3Qgc2hpcE5hbWUgPSAoc2hpcCA9PT0gJ3BhdHJvbEJvYXQnKSA/ICdwYXRyb2wgYm9hdCcgOiBzaGlwO1xuXG4gICAgICBjb25zdCBzaGlwVGV4dCA9IGNyZWF0ZUVsZW1lbnQoJ3AnLCAnc2hpcC1uYW1lJyk7XG4gICAgICBzaGlwVGV4dC5pbm5lclRleHQgPSBzaGlwTmFtZTtcblxuICAgICAgYm9hcmRJbmZvLmFwcGVuZENoaWxkKHNoaXBUZXh0KTtcbiAgICB9KTtcblxuICAgIE9iamVjdC5rZXlzKHNoaXBzKS5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICBjb25zdCBwcm9ncmVzc01ldGVyID0gY3JlYXRlRWxlbWVudCgnbWV0ZXInLCAncHJvZ3Jlc3MtbWV0ZXInKTtcbiAgICAgIHByb2dyZXNzTWV0ZXIuaWQgPSBgJHtwbGF5ZXIubmFtZX0tJHtzaGlwfS1tZXRlcmA7XG5cbiAgICAgIHByb2dyZXNzTWV0ZXIuc2V0QXR0cmlidXRlKCd2YWx1ZScsIDApO1xuICAgICAgcHJvZ3Jlc3NNZXRlci5zZXRBdHRyaWJ1dGUoJ21pbicsIDApO1xuICAgICAgcHJvZ3Jlc3NNZXRlci5zZXRBdHRyaWJ1dGUoJ21heCcsIHNoaXBzW3NoaXBdLmxlbmd0aCk7XG5cbiAgICAgIGJvYXJkSW5mby5hcHBlbmRDaGlsZChwcm9ncmVzc01ldGVyKTtcbiAgICB9KTtcblxuICAgIHRoaXMuZWxlbWVudHNbYCR7cGxheWVyLm5hbWV9R2FtZVdpbmRvd2BdLmFwcGVuZENoaWxkKGJvYXJkSW5mbyk7XG4gIH1cblxuICBiaW5kTW91c2VPdmVyQ2VsbChoYW5kbGVyKSB7XG4gICAgY29uc3QgY2VsbHMgPSB0aGlzLmVsZW1lbnRzLnAxQm9hcmQuY2hpbGRyZW47XG5cbiAgICBmb3IgKGNvbnN0IGNlbGwgb2YgY2VsbHMpIHtcbiAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKGV2dCkgPT4ge1xuICAgICAgICBjb25zdCBpID0gcGFyc2VJbnQoZXZ0LnRhcmdldC5kYXRhc2V0LmluZGV4LCAxMCk7XG5cbiAgICAgICAgY29uc3Qgb3V0Y29tZSA9IGhhbmRsZXIoaSk7XG5cbiAgICAgICAgaWYgKG91dGNvbWUudmlld0xvY3MpIHtcbiAgICAgICAgICBjb25zdCBjZWxsQ29sb3IgPSAob3V0Y29tZS52YWxpZCkgPyAnZ3JlZW4nIDogJ3JlZCc7XG5cbiAgICAgICAgICBmb3IgKGNvbnN0IGJvYXJkQ2VsbCBvZiBvdXRjb21lLmJvYXJkU3RhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gb3V0Y29tZS5ib2FyZFN0YXRlLmluZGV4T2YoYm9hcmRDZWxsKTtcbiAgICAgICAgICAgIGNvbnN0IHZpZXdDZWxsID0gdGhpcy5lbGVtZW50cy5wMUJvYXJkLnF1ZXJ5U2VsZWN0b3IoYC5jZWxsW2RhdGEtaW5kZXg9XCIke2luZGV4fVwiXWApO1xuXG4gICAgICAgICAgICBpZiAob3V0Y29tZS52aWV3TG9jcy5pbmNsdWRlcyhpbmRleCkpIHtcbiAgICAgICAgICAgICAgdmlld0NlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY2VsbENvbG9yO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChib2FyZENlbGwuc2hpcCkge1xuICAgICAgICAgICAgICB2aWV3Q2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnZ3JheSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2aWV3Q2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnd2hpdGUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYmluZFByZXNzU3BhY2VLZXkoaGFuZGxlcikge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGV2dCkgPT4ge1xuICAgICAgaWYgKGV2dC5jb2RlID09PSAnU3BhY2UnKSB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnOmhvdmVyJyldLnNsaWNlKC0xKVswXTtcblxuICAgICAgICBpZiAoY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ2NlbGwnKSkge1xuICAgICAgICAgIGhhbmRsZXIoKTtcblxuICAgICAgICAgIGNvbnN0IG1vdXNlb3ZlckV2ZW50ID0gbmV3IEV2ZW50KCdtb3VzZW92ZXInKTtcbiAgICAgICAgICBjZWxsLmRpc3BhdGNoRXZlbnQobW91c2VvdmVyRXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBiaW5kQ2xpY2tQbGFjZW1lbnRDZWxsKGhhbmRsZXIpIHtcbiAgICB0aGlzLmVsZW1lbnRzLnAxQm9hcmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZ0KSA9PiB7XG4gICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KGV2dC50YXJnZXQuZGF0YXNldC5pbmRleCwgMTApO1xuICAgICAgY29uc3QgY2xpY2tlZENlbGwgPSB0aGlzLmVsZW1lbnRzLnAxQm9hcmQuY2hpbGRyZW5baW5kZXhdO1xuXG4gICAgICBpZiAoY2xpY2tlZENlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID09PSAnZ3JlZW4nKSB7XG4gICAgICAgIGNvbnN0IGluZm8gPSBoYW5kbGVyKGluZGV4KTtcblxuICAgICAgICB0aGlzLmNvbG9yQm9hcmQoaW5mby5ib2FyZCk7XG5cbiAgICAgICAgY29uc3QgbmV4dFNoaXAgPSAoaW5mby5uZXh0U2hpcCA9PT0gJ3BhdHJvbEJvYXQnKSA/ICdwYXRyb2wgYm9hdCcgOiBpbmZvLm5leHRTaGlwO1xuXG4gICAgICAgIGlmIChuZXh0U2hpcCAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5zZXRHYW1lTWVzc2FnZShgUGxhY2UgeW91ciAke25leHRTaGlwfSAoUHJlc3Mgc3BhY2UgdG8gcm90YXRlKWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVuZGVySW5HYW1lTWVzc2FnZSh0aGlzLmVsZW1lbnRzLnN0YXJ0QnV0dG9uLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYmluZENsaWNrT3Bwb25lbnRDZWxsKGhhbmRsZXIsIHBsYXllcikge1xuICAgIGNvbnN0IGNlbGxzID0gKHBsYXllci5uYW1lID09PSAncDEnKSA/IHRoaXMuZWxlbWVudHMucDJCb2FyZC5jaGlsZHJlbiA6IHRoaXMuZWxlbWVudHMucDFCb2FyZC5jaGlsZHJlbjtcblxuICAgIGZvciAoY29uc3QgY2VsbCBvZiBjZWxscykge1xuICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldnQpID0+IHtcbiAgICAgICAgY29uc3QgaSA9IHBhcnNlSW50KGV2dC50YXJnZXQuZGF0YXNldC5pbmRleCwgMTApO1xuXG4gICAgICAgIGNvbnN0IG91dGNvbWUgPSBoYW5kbGVyKGkpO1xuXG4gICAgICAgIGlmIChvdXRjb21lLnZhbGlkTW92ZSkge1xuICAgICAgICAgIGNvbnN0IG9wcEJvYXJkID0gb3V0Y29tZS5vcHBvbmVudC5ib2FyZC5ib2FyZDtcbiAgICAgICAgICBjb25zdCB7IHNoaXAgfSA9IG9wcEJvYXJkW2ldO1xuXG4gICAgICAgICAgaWYgKHNoaXAgJiYgb3BwQm9hcmRbaV0uaXNTaG90KSB7XG4gICAgICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdncmVlbic7XG5cbiAgICAgICAgICAgIGNvbnN0IHNoaXBOYW1lID0gKHNoaXAgPT09ICdwYXRyb2xCb2F0JykgPyAncGF0cm9sIGJvYXQnIDogc2hpcDtcbiAgICAgICAgICAgIHRoaXMuc2V0R2FtZU1lc3NhZ2UoYFlvdSBoaXQgdGhlICR7c2hpcE5hbWV9LmApO1xuXG4gICAgICAgICAgICBjb25zdCBwcm9ncmVzc01ldGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7b3V0Y29tZS5vcHBvbmVudC5uYW1lfS0ke3NoaXB9LW1ldGVyYCk7XG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHBhcnNlSW50KHByb2dyZXNzTWV0ZXIuZ2V0QXR0cmlidXRlKCd2YWx1ZScpLCAxMCkgKyAxO1xuICAgICAgICAgICAgcHJvZ3Jlc3NNZXRlci5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgbmV3VmFsdWUpO1xuXG4gICAgICAgICAgICBpZiAob3V0Y29tZS53aW5uZXIpIHtcbiAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IChwbGF5ZXIubmFtZSA9PT0gJ3AxJykgPyAnWW91IHdvbiEnIDogJ1lvdSBsb3N0Li4uJztcbiAgICAgICAgICAgICAgdGhpcy5zZXRHYW1lTWVzc2FnZShtZXNzYWdlKTtcblxuICAgICAgICAgICAgICB0aGlzLnJlbmRlckluR2FtZU1lc3NhZ2UodGhpcy5lbGVtZW50cy5yZXN0YXJ0QnV0dG9uKTtcbiAgICAgICAgICAgICAgdGhpcy5yZXNldEJvYXJkRXZlbnRMaXN0ZW5lcnMoJ3AyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JlZCc7XG4gICAgICAgICAgICBpZiAoIW91dGNvbWUud2lubmVyKSB0aGlzLnNldEdhbWVNZXNzYWdlKCdZb3UgbWlzc2VkIScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwbGF5ZXIubmFtZSA9PT0gJ3AxJyAmJiAhb3V0Y29tZS53aW5uZXIpIHtcbiAgICAgICAgICB0aGlzLnNldEdhbWVNZXNzYWdlKCdZb3UgYWxyZWFkeSBzaG90IGF0IHRoYXQgY2VsbC4nKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYmluZENsaWNrUmFuZG9tQnV0dG9uKGhhbmRsZXIpIHtcbiAgICB0aGlzLmVsZW1lbnRzLnJhbmRvbUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGNvbnN0IGJvYXJkID0gaGFuZGxlcigpO1xuXG4gICAgICB0aGlzLmNvbG9yQm9hcmQoYm9hcmQpO1xuXG4gICAgICB0aGlzLnJlbmRlckluR2FtZU1lc3NhZ2UodGhpcy5lbGVtZW50cy5zdGFydEJ1dHRvbiwgdHJ1ZSk7XG4gICAgfSk7XG4gIH1cblxuICBiaW5kQ2xpY2tSZXNldEJ1dHRvbihoYW5kbGVyKSB7XG4gICAgdGhpcy5lbGVtZW50cy5yZXNldEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGNvbnN0IGJvYXJkID0gaGFuZGxlcigpO1xuXG4gICAgICB0aGlzLmNvbG9yQm9hcmQoYm9hcmQpO1xuXG4gICAgICB0aGlzLnNldEdhbWVNZXNzYWdlKCdQbGFjZSB5b3VyIGNhcnJpZXIgKFByZXNzIHNwYWNlIHRvIHJvdGF0ZSknKTtcbiAgICB9KTtcbiAgfVxuXG4gIGJpbmRDbGlja1N0YXJ0QnV0dG9uKGhhbmRsZXIpIHtcbiAgICB0aGlzLmVsZW1lbnRzLnN0YXJ0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5lbGVtZW50cy5wMUdhbWVXaW5kb3cucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50cy5wMUdhbWVXaW5kb3cubGFzdENoaWxkKTtcblxuICAgICAgaGFuZGxlcigpO1xuXG4gICAgICB0aGlzLnNldEdhbWVNZXNzYWdlKCdDbGljayB0byBmaXJlIHNob3RzLicpO1xuICAgIH0pO1xuICB9XG5cbiAgYmluZENsaWNrUmVzdGFydEJ1dHRvbihoYW5kbGVyKSB7XG4gICAgdGhpcy5lbGVtZW50cy5yZXN0YXJ0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCB3aW5kb3cgb2YgW3RoaXMuZWxlbWVudHMucDFHYW1lV2luZG93LCB0aGlzLmVsZW1lbnRzLnAyR2FtZVdpbmRvd10pIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUNoaWxkKHdpbmRvdy5sYXN0Q2hpbGQpO1xuICAgICAgfVxuXG4gICAgICBoYW5kbGVyKCk7XG4gICAgfSk7XG4gIH1cblxuICByZXNldEJvYXJkRXZlbnRMaXN0ZW5lcnMocGxheWVyTmFtZSkge1xuICAgIGNvbnN0IG9sZEJvYXJkID0gdGhpcy5lbGVtZW50c1tgJHtwbGF5ZXJOYW1lfUJvYXJkYF07XG5cbiAgICBjb25zdCBjbG9uZUJvYXJkID0gb2xkQm9hcmQuY2xvbmVOb2RlKHRydWUpO1xuICAgIG9sZEJvYXJkLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGNsb25lQm9hcmQsIG9sZEJvYXJkKTtcblxuICAgIHRoaXMuZWxlbWVudHNbYCR7cGxheWVyTmFtZX1Cb2FyZGBdID0gY2xvbmVCb2FyZDtcbiAgfVxuXG4gIGdldENlbGwocGxheWVyTmFtZSwgaW5kZXgpIHtcbiAgICBjb25zdCBib2FyZCA9IHRoaXMuZWxlbWVudHNbYCR7cGxheWVyTmFtZX1Cb2FyZGBdO1xuXG4gICAgcmV0dXJuIGJvYXJkLmNoaWxkcmVuW2luZGV4XTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBWaWV3O1xuIiwiaW1wb3J0IEdhbWVCb2FyZCBmcm9tICcuLi9tb2RlbHMvR2FtZUJvYXJkJztcblxuaW1wb3J0IHtcbiAgcmFuZEVsZW1lbnQsXG4gIGdldEFjdGl2ZVNoaXBzLFxuICBzaGlwTGVuZ3RocyxcbiAgY2hlY2tFZGdlQ29sbGlzaW9ucyxcbiAgcHJvamVjdFNoaXBMb2NzLFxufSBmcm9tICcuL2hlbHBlcnMnO1xuXG5jbGFzcyBBSSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY2VsbHNIaXQgPSB7XG4gICAgICBjYXJyaWVyOiBbXSxcbiAgICAgIGJhdHRsZXNoaXA6IFtdLFxuICAgICAgY3J1aXNlcjogW10sXG4gICAgICBzdWJtYXJpbmU6IFtdLFxuICAgICAgcGF0cm9sQm9hdDogW10sXG4gICAgfTtcblxuICAgIHRoaXMubW9kZWxCb2FyZCA9IChuZXcgR2FtZUJvYXJkKCkpLmJvYXJkO1xuICAgIHRoaXMub2Zmc2V0cyA9IFstMSwgMSwgLTEwLCAxMF07XG4gIH1cblxuICBnZXRSYW5kb21TaG90KG1vdmVzTWFkZSkge1xuICAgIC8vIEdldCBtb3Zlc01hZGUgb2JqZWN0IHJlZmVyZW5jZSBmcm9tIFBsYXllciB3aXRoIEFJIG1vZHVsZSBhbmQgZGV0ZXJtaW5lIHBvc3NpYmxlIG1vdmVzXG4gICAgY29uc3QgY2VsbHNTaG90ID0gbW92ZXNNYWRlLm1hcCgobW92ZSkgPT4gbW92ZS5jZWxsKTtcbiAgICBjb25zdCBsZWdhbE1vdmVzID0gWy4uLkFycmF5KDEwMCkua2V5cygpXS5maWx0ZXIoKGluZGV4KSA9PiAhY2VsbHNTaG90LmluY2x1ZGVzKGluZGV4KSk7XG5cbiAgICBjb25zdCBsb2MgPSByYW5kRWxlbWVudChsZWdhbE1vdmVzKTtcblxuICAgIHJldHVybiBsb2M7XG4gIH1cblxuICBnZXRTbWFydFNob3QobW92ZXNNYWRlKSB7XG4gICAgaWYgKG1vdmVzTWFkZS5sZW5ndGggPT09IDApIHJldHVybiB0aGlzLmdldFJhbmRvbVNob3QobW92ZXNNYWRlKTsgLy8gRmlyc3Qgc2hvdCBpcyByYW5kb21cblxuICAgIGxldCBsb2MgPSBudWxsO1xuXG4gICAgY29uc3QgcHJldk1vdmUgPSBtb3Zlc01hZGUuc2xpY2UoLTEpWzBdO1xuICAgIGNvbnN0IHByZXZDZWxsID0gcHJldk1vdmUuY2VsbDtcblxuICAgIGNvbnN0IHsgc2hpcCB9ID0gcHJldk1vdmU7XG5cbiAgICBpZiAoc2hpcCAmJiAhc2hpcC5pc1N1bmsoKSkge1xuICAgICAgLy8gSWYgcHJldmlvdXMgbW92ZSBoaXQgYSBzaGlwIHRoYXQgaXMgbm90IHN1bmssIHVwZGF0ZSBjZWxsc0hpdCB0byByZW1lbWJlciB0aGUgbW92ZVxuICAgICAgdGhpcy5jZWxsc0hpdFtzaGlwLm5hbWVdLnB1c2gocHJldkNlbGwpO1xuICAgICAgdGhpcy5tb2RlbEJvYXJkW3ByZXZDZWxsXS5zaGlwID0gc2hpcDtcblxuICAgICAgbG9jID0gdGhpcy5maW5kU3VpdGFibGVNb3ZlcyhzaGlwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgYXJlIGFueSBvdGhlciBhY3RpdmUgc2hpcHMgZGlzY292ZXJlZFxuICAgICAgY29uc3QgYWN0aXZlU2hpcHMgPSBnZXRBY3RpdmVTaGlwcyhtb3Zlc01hZGUpO1xuXG4gICAgICBpZiAoYWN0aXZlU2hpcHMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBwcmV2U2hpcCA9IGFjdGl2ZVNoaXBzLnNsaWNlKC0xKVswXTtcblxuICAgICAgICAvLyBSZXBlYXQgc2VhcmNoaW5nIGFsZ29yaXRobSBhYm92ZVxuICAgICAgICBsb2MgPSB0aGlzLmZpbmRTdWl0YWJsZU1vdmVzKHByZXZTaGlwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSBtYWtlIHNtYXJ0IGd1ZXNzXG4gICAgICAgIGNvbnN0IGhpZGRlblNoaXBMZW5ndGhzID0gdGhpcy5nZXRVbmRpc2NvdmVyZWRTaGlwTGVuZ3RocygpO1xuICAgICAgICBjb25zdCBzaGlwTGVuZ3RoID0gcmFuZEVsZW1lbnQoaGlkZGVuU2hpcExlbmd0aHMpOyAvLyBQaWNrIHJhbmRvbSB1bmRpc2NvdmVyZWQgc2hpcFxuXG4gICAgICAgIC8vIEdldCBhbGwgdmFsaWQgcGxhY2VtZW50cyBvbiB0aGUgYm9hcmQgZm9yIHRoYXQgc2hpcFxuICAgICAgICBjb25zdCB2YWxpZExvY3MgPSB0aGlzLm1vZGVsVmFsaWRQbGFjZW1lbnRzKHNoaXBMZW5ndGgpO1xuXG4gICAgICAgIC8vIFBpY2sgcmFuZG9tIGVsZW1lbnQgb2YgcmFuZG9tbHkgc2VsZWN0ZWQgbG9jYXRpb24gYXJyYXlcbiAgICAgICAgbG9jID0gcmFuZEVsZW1lbnQocmFuZEVsZW1lbnQodmFsaWRMb2NzKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvYztcbiAgfVxuXG4gIGZpbmRTdWl0YWJsZU1vdmVzKHNoaXApIHtcbiAgICBjb25zdCBzaGlwQ2VsbHNIaXQgPSB0aGlzLmNlbGxzSGl0W3NoaXAubmFtZV07XG4gICAgY29uc3QgdmFsaWROZXh0TW92ZXMgPSBbXTtcblxuICAgIGlmIChzaGlwQ2VsbHNIaXQubGVuZ3RoID09PSAxKSB7XG4gICAgICAvLyBJZiBzaGlwIGhpdCBvbmNlLCBwcm9qZWN0IHNoaXAgb250byB2YWxpZCBhZGphY2VudCBsZWZ0L3JpZ2h0L3VwL2Rvd24gY2VsbHNcbiAgICAgIGNvbnN0IGNlbGwgPSBzaGlwQ2VsbHNIaXRbMF07XG5cbiAgICAgIGZvciAoY29uc3Qgb2Zmc2V0IG9mIHRoaXMub2Zmc2V0cykge1xuICAgICAgICBjb25zdCBtb3ZlID0gdGhpcy5maW5kVmFsaWRQcm9qZWN0aW9uKGNlbGwsIG9mZnNldCwgc2hpcC5sZW5ndGggLSAxKTtcbiAgICAgICAgaWYgKG1vdmUpIHZhbGlkTmV4dE1vdmVzLnB1c2gobW92ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHNoaXAgaGFzID4gMSBoaXQsIGVzdGFibGlzaCBsaW1pdHMgYW5kIGF4aXNcbiAgICAgIGNvbnN0IGxpbWl0cyA9IFtNYXRoLm1pbiguLi5zaGlwQ2VsbHNIaXQpLCBNYXRoLm1heCguLi5zaGlwQ2VsbHNIaXQpXTtcblxuICAgICAgbGV0IGF4aXNPZmZzZXRzID0gbnVsbDtcblxuICAgICAgaWYgKChsaW1pdHNbMV0gLSBsaW1pdHNbMF0pICUgMTAgPT09IDApIHtcbiAgICAgICAgYXhpc09mZnNldHMgPSB0aGlzLm9mZnNldHMuc2xpY2UoMik7IC8vIHktYXhpc1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXhpc09mZnNldHMgPSB0aGlzLm9mZnNldHMuc2xpY2UoMCwgMik7IC8vIHgtYXhpc1xuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBpZiBhZGphY2VudCBjZWxsIG9uIHNhbWUgYXhpcyBpcyB2YWxpZFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgbGltaXQgPSBsaW1pdHNbaV07XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGF4aXNPZmZzZXRzW2ldO1xuXG4gICAgICAgIGNvbnN0IG1vdmUgPSB0aGlzLmZpbmRWYWxpZFByb2plY3Rpb24obGltaXQsIG9mZnNldCwgc2hpcC5sZW5ndGggLSBzaGlwQ2VsbHNIaXQubGVuZ3RoKTtcbiAgICAgICAgaWYgKG1vdmUpIHZhbGlkTmV4dE1vdmVzLnB1c2gobW92ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhbmRFbGVtZW50KHZhbGlkTmV4dE1vdmVzKTsgLy8gU2VsZWN0IHJhbmRvbSBuZXh0IHZhbGlkIG1vdmVcbiAgfVxuXG4gIG1vZGVsVmFsaWRQbGFjZW1lbnRzKGxlbmd0aCkge1xuICAgIGNvbnN0IHZhbGlkTG9jcyA9IFtdO1xuXG4gICAgY29uc3QgZW1wdHlMb2NzID0gdGhpcy5nZXRFbXB0eUxvY3MoKTtcblxuICAgIC8vIENoZWNrIHByb2plY3Qgc2hpcCBvbiB4IGFuZCB5IGF4aXMgb250byBhbGwgZW1wdHkgY2VsbHNcbiAgICBmb3IgKGNvbnN0IGVtcHR5TG9jIG9mIGVtcHR5TG9jcykge1xuICAgICAgZm9yIChjb25zdCBvZmZzZXQgb2YgWzEsIDEwXSkge1xuICAgICAgICBjb25zdCBsb2NzID0gcHJvamVjdFNoaXBMb2NzKGVtcHR5TG9jLCBvZmZzZXQsIGxlbmd0aCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY2hlY2tDb2xsaXNpb25zKGxvY3MsIG9mZnNldCkpIHZhbGlkTG9jcy5wdXNoKGxvY3MpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWxpZExvY3M7XG4gIH1cblxuICBjbGlja0NlbGwoaW5kZXgsIGNlbGwpIHtcbiAgICB0aGlzLm1vZGVsQm9hcmRbaW5kZXhdLmlzU2hvdCA9IHRydWU7XG5cbiAgICBjZWxsLmNsaWNrKCk7XG4gIH1cblxuICBnZXRVbmRpc2NvdmVyZWRTaGlwTGVuZ3RocygpIHtcbiAgICBjb25zdCBoaWRkZW5TaGlwTGVuZ3RocyA9IFtdO1xuXG4gICAgT2JqZWN0LmtleXModGhpcy5jZWxsc0hpdCkuZm9yRWFjaCgoc2hpcE5hbWUpID0+IHtcbiAgICAgIGNvbnN0IHNoaXBMZW5ndGggPSBzaGlwTGVuZ3Roc1tzaGlwTmFtZV07XG5cbiAgICAgIGlmICh0aGlzLmNlbGxzSGl0W3NoaXBOYW1lXS5sZW5ndGggPT09IDApIGhpZGRlblNoaXBMZW5ndGhzLnB1c2goc2hpcExlbmd0aCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGlkZGVuU2hpcExlbmd0aHM7XG4gIH1cblxuICBnZXRFbXB0eUxvY3MoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kZWxCb2FyZC5maWx0ZXIoKGNlbGwpID0+ICFjZWxsLmlzU2hvdClcbiAgICAgIC5tYXAoKGNlbGwpID0+IHRoaXMubW9kZWxCb2FyZC5pbmRleE9mKGNlbGwpKTtcbiAgfVxuXG4gIGNoZWNrQ29sbGlzaW9ucyhsb2NzLCBheGlzKSB7XG4gICAgaWYgKCFjaGVja0VkZ2VDb2xsaXNpb25zKGxvY3MsIGF4aXMpKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGNvbnN0IGxvYyBvZiBsb2NzKSB7XG4gICAgICBpZiAodGhpcy5tb2RlbEJvYXJkW2xvY10uaXNTaG90KSByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmaW5kVmFsaWRQcm9qZWN0aW9uKHN0YXJ0LCBvZmZzZXQsIGwpIHtcbiAgICBsZXQgbGVuZ3RoID0gbDtcblxuICAgIC8vIHByb2plY3Qgc2hpcCBvbnRvIHZhbGlkIGFkamFjZW50IGxlZnQvcmlnaHQvdXAvZG93biBjZWxscyBhdCBlYWNoIGVkZ2VcbiAgICB3aGlsZSAobGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgcHJvamVjdGVkTG9jcyA9IHByb2plY3RTaGlwTG9jcyhzdGFydCwgb2Zmc2V0LCBsZW5ndGgsIDEpO1xuICAgICAgY29uc3QgY2hlY2sgPSB0aGlzLmNoZWNrQ29sbGlzaW9ucyhwcm9qZWN0ZWRMb2NzLCBvZmZzZXQpO1xuXG4gICAgICBpZiAoY2hlY2spIHJldHVybiBzdGFydCArIG9mZnNldDtcblxuICAgICAgLy8gSWYgbm8gdmFsaWQgbW92ZXMgZm91bmQgZm9yIHRoZSBwcm9qZWN0aW9uLCByZWR1Y2UgcHJvamVjdGVkIHNpemVcbiAgICAgIGxlbmd0aCAtPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFJO1xuIiwiaW1wb3J0IFBsYXllciBmcm9tICcuLi9tb2RlbHMvUGxheWVyJztcbmltcG9ydCBWaWV3IGZyb20gJy4vdmlldyc7XG5pbXBvcnQgQUkgZnJvbSAnLi9BSSc7XG5cbmltcG9ydCB7IHNoaXBMZW5ndGhzLCBnZXROZXh0U2hpcCB9IGZyb20gJy4vaGVscGVycyc7XG5cbmNsYXNzIEdhbWUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5wMSA9IG5ldyBQbGF5ZXIoKTsgLy8gSHVtYW4gcGxheWVyXG4gICAgdGhpcy5wMiA9IG5ldyBQbGF5ZXIobmV3IEFJKCkpOyAvLyBDb21wdXRlclxuXG4gICAgdGhpcy52aWV3ID0gbmV3IFZpZXcoKTtcblxuICAgIHRoaXMudHVybiA9ICdwMSc7XG4gICAgdGhpcy53aW5uZXIgPSBudWxsO1xuICAgIHRoaXMucGxhY2VtZW50U3RhdGUgPSB7XG4gICAgICBheGlzOiAneCcsXG4gICAgICBjdXJyZW50U2hpcDogJ2NhcnJpZXInLFxuICAgICAgYWxsU2hpcHNQbGFjZWQ6IGZhbHNlLFxuICAgIH07XG5cbiAgICAvLyBQbGFjZSBjb21wdXRlciBzaGlwc1xuICAgIHRoaXMucDIuYm9hcmQucGxhY2VTaGlwc1JhbmRvbWx5KCk7XG4gIH1cblxuICBzd2l0Y2hUdXJuKCkge1xuICAgIHRoaXMudHVybiA9ICh0aGlzLnR1cm4gPT09ICdwMScpID8gJ3AyJyA6ICdwMSc7XG4gIH1cblxuICBjaGVja1dpbihvcHBCb2FyZCkge1xuICAgIGlmIChvcHBCb2FyZC5zaGlwc1N1bmsoKSA9PT0gNSkge1xuICAgICAgdGhpcy53aW5uZXIgPSB0aGlzLnR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMud2lubmVyO1xuICB9XG5cbiAgcGxheVBsYXllclR1cm4oaW5kZXgpIHtcbiAgICBpZiAodGhpcy53aW5uZXIgIT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgY29uc3Qgb3BwQm9hcmQgPSB0aGlzLnAyLmJvYXJkO1xuICAgIGNvbnN0IG91dGNvbWUgPSB7XG4gICAgICB2YWxpZE1vdmU6IGZhbHNlLFxuICAgICAgb3Bwb25lbnQ6IHRoaXMucDIsXG4gICAgICB3aW5uZXI6IG51bGwsXG4gICAgfTtcblxuICAgIGlmICghb3BwQm9hcmQuYm9hcmRbaW5kZXhdLmlzU2hvdCkge1xuICAgICAgb3V0Y29tZS52YWxpZE1vdmUgPSB0cnVlO1xuXG4gICAgICB0aGlzLnAxLmZpcmVTaG90KHRoaXMucDIsIGluZGV4KTtcblxuICAgICAgaWYgKCF0aGlzLmNoZWNrV2luKG9wcEJvYXJkKSkge1xuICAgICAgICB0aGlzLnN3aXRjaFR1cm4oKTtcblxuICAgICAgICBjb25zdCBuZXh0SW5kZXggPSB0aGlzLnAyLkFJLmdldFNtYXJ0U2hvdCh0aGlzLnAyLm1vdmVzTWFkZSk7XG4gICAgICAgIGNvbnN0IGNlbGwgPSB0aGlzLnZpZXcuZ2V0Q2VsbCh0aGlzLnAxLm5hbWUsIG5leHRJbmRleCk7XG4gICAgICAgIHRoaXMucDIuQUkuY2xpY2tDZWxsKG5leHRJbmRleCwgY2VsbCk7XG4gICAgICB9XG5cbiAgICAgIG91dGNvbWUud2lubmVyID0gdGhpcy53aW5uZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dGNvbWU7XG4gIH1cblxuICBwbGF5Q29tcHV0ZXJUdXJuKGluZGV4KSB7XG4gICAgaWYgKHRoaXMud2lubmVyICE9IG51bGwpIHJldHVybiBmYWxzZTtcblxuICAgIGNvbnN0IG91dGNvbWUgPSB7XG4gICAgICB2YWxpZE1vdmU6IGZhbHNlLFxuICAgICAgb3Bwb25lbnQ6IHRoaXMucDEsXG4gICAgICB3aW5uZXI6IG51bGwsXG4gICAgfTtcblxuICAgIGlmICh0aGlzLnR1cm4gPT09ICdwMicpIHtcbiAgICAgIG91dGNvbWUudmFsaWRNb3ZlID0gdHJ1ZTtcbiAgICAgIHRoaXMucDIuZmlyZVNob3QodGhpcy5wMSwgaW5kZXgpO1xuXG4gICAgICBpZiAodGhpcy5jaGVja1dpbih0aGlzLnAxLmJvYXJkKSkge1xuICAgICAgICBvdXRjb21lLndpbm5lciA9IHRoaXMud2lubmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zd2l0Y2hUdXJuKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dGNvbWU7XG4gIH1cblxuICBjaGVja1ZhbGlkUGxhY2VtZW50KGkpIHtcbiAgICBjb25zdCBvdXRjb21lID0ge1xuICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgYm9hcmRTdGF0ZTogdGhpcy5wMS5ib2FyZC5ib2FyZCxcbiAgICB9O1xuXG4gICAgaWYgKCF0aGlzLnBsYWNlbWVudFN0YXRlLmFsbFNoaXBzUGxhY2VkKSB7XG4gICAgICBjb25zdCBzaGlwTGVuZ3RoID0gc2hpcExlbmd0aHNbdGhpcy5wbGFjZW1lbnRTdGF0ZS5jdXJyZW50U2hpcF07XG5cbiAgICAgIGNvbnN0IGxvY3MgPSBbLi4uQXJyYXkoc2hpcExlbmd0aCkua2V5cygpXS5tYXAoKG4pID0+ICgodGhpcy5wbGFjZW1lbnRTdGF0ZS5heGlzID09PSAneCcpID8gaSArIG4gOiBpICsgKG4gKiAxMCkpKTtcblxuICAgICAgY29uc3QgaXNWYWxpZCA9IHRoaXMucDEuYm9hcmQuY2hlY2tDb2xsaXNpb25zKGxvY3MsIHRoaXMucGxhY2VtZW50U3RhdGUuYXhpcyk7XG5cbiAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgIG91dGNvbWUudmFsaWQgPSB0cnVlO1xuICAgICAgICBvdXRjb21lLnZpZXdMb2NzID0gbG9jcztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wbGFjZW1lbnRTdGF0ZS5heGlzID09PSAneScpIHtcbiAgICAgICAgb3V0Y29tZS52aWV3TG9jcyA9IGxvY3MuZmlsdGVyKChsb2MpID0+IGxvYyA8IDEwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBmaXJzdExvYyA9IGxvY3NbMF07XG5cbiAgICAgICAgaWYgKGZpcnN0TG9jIDwgMTApIHtcbiAgICAgICAgICBvdXRjb21lLnZpZXdMb2NzID0gbG9jcy5maWx0ZXIoKGxvYykgPT4gbG9jIDwgMTApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dGNvbWUudmlld0xvY3MgPSBsb2NzLmZpbHRlcigobG9jKSA9PiBsb2MudG9TdHJpbmcoKVswXSA9PT0gZmlyc3RMb2MudG9TdHJpbmcoKVswXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0Y29tZTtcbiAgfVxuXG4gIHBsYWNlU2hpcChpbmRleCkge1xuICAgIGNvbnN0IGluZm8gPSB7fTtcblxuICAgIHRoaXMucDEuYm9hcmQucGxhY2VTaGlwKHRoaXMucGxhY2VtZW50U3RhdGUuY3VycmVudFNoaXAsIGluZGV4LCB0aGlzLnBsYWNlbWVudFN0YXRlLmF4aXMpO1xuXG4gICAgaW5mby5ib2FyZCA9IHRoaXMucDEuYm9hcmQuYm9hcmQ7XG5cbiAgICBpZiAodGhpcy5wMS5ib2FyZC5nZXRTaGlwc1BsYWNlZCgpLmxlbmd0aCA9PT0gNSkge1xuICAgICAgaW5mby5uZXh0U2hpcCA9IG51bGw7XG4gICAgICB0aGlzLnBsYWNlbWVudFN0YXRlLmFsbFNoaXBzUGxhY2VkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbmV4dFNoaXAgPSBnZXROZXh0U2hpcCh0aGlzLnBsYWNlbWVudFN0YXRlLmN1cnJlbnRTaGlwKTtcbiAgICAgIHRoaXMucGxhY2VtZW50U3RhdGUuY3VycmVudFNoaXAgPSBuZXh0U2hpcDtcbiAgICAgIGluZm8ubmV4dFNoaXAgPSBuZXh0U2hpcDtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5mbztcbiAgfVxuXG4gIHRvZ2dsZVBsYWNlbWVudEF4aXMoKSB7XG4gICAgdGhpcy5wbGFjZW1lbnRTdGF0ZS5heGlzID0gKHRoaXMucGxhY2VtZW50U3RhdGUuYXhpcyA9PT0gJ3gnKSA/ICd5JyA6ICd4JztcbiAgfVxuXG4gIHJhbmRvbWl6ZVBsYXllclNoaXBzKCkge1xuICAgIHRoaXMucDEuYm9hcmQucmVzZXRCb2FyZCgpO1xuICAgIHRoaXMucDEuYm9hcmQucGxhY2VTaGlwc1JhbmRvbWx5KCk7XG5cbiAgICB0aGlzLnBsYWNlbWVudFN0YXRlLmFsbFNoaXBzUGxhY2VkID0gdHJ1ZTtcblxuICAgIHJldHVybiB0aGlzLnAxLmJvYXJkLmJvYXJkO1xuICB9XG5cbiAgcmVzZXRQbGF5ZXJCb2FyZCgpIHtcbiAgICB0aGlzLnAxLmJvYXJkLnJlc2V0Qm9hcmQoKTtcblxuICAgIHRoaXMucGxhY2VtZW50U3RhdGUuYWxsU2hpcHNQbGFjZWQgPSBmYWxzZTtcbiAgICB0aGlzLnBsYWNlbWVudFN0YXRlLmN1cnJlbnRTaGlwID0gJ2NhcnJpZXInO1xuXG4gICAgcmV0dXJuIHRoaXMucDEuYm9hcmQuYm9hcmQ7XG4gIH1cblxuICBzZXR1cEdhbWUoKSB7XG4gICAgdGhpcy52aWV3LnJlbmRlckJvYXJkKHRoaXMucDEpO1xuICAgIHRoaXMudmlldy5yZW5kZXJTdGFydFNjcmVlbigpO1xuXG4gICAgdGhpcy52aWV3LmJpbmRNb3VzZU92ZXJDZWxsKHRoaXMuY2hlY2tWYWxpZFBsYWNlbWVudC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnZpZXcuYmluZFByZXNzU3BhY2VLZXkodGhpcy50b2dnbGVQbGFjZW1lbnRBeGlzLmJpbmQodGhpcykpO1xuICAgIHRoaXMudmlldy5iaW5kQ2xpY2tQbGFjZW1lbnRDZWxsKHRoaXMucGxhY2VTaGlwLmJpbmQodGhpcykpO1xuXG4gICAgdGhpcy52aWV3LmJpbmRDbGlja1JhbmRvbUJ1dHRvbih0aGlzLnJhbmRvbWl6ZVBsYXllclNoaXBzLmJpbmQodGhpcykpO1xuICAgIHRoaXMudmlldy5iaW5kQ2xpY2tSZXNldEJ1dHRvbih0aGlzLnJlc2V0UGxheWVyQm9hcmQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy52aWV3LmJpbmRDbGlja1N0YXJ0QnV0dG9uKHRoaXMuc3RhcnRHYW1lLmJpbmQodGhpcykpO1xuICB9XG5cbiAgc3RhcnRHYW1lKCkge1xuICAgIHRoaXMudmlldy5yZXNldEJvYXJkRXZlbnRMaXN0ZW5lcnModGhpcy5wMS5uYW1lKTtcblxuICAgIHRoaXMudmlldy5yZW5kZXJCb2FyZCh0aGlzLnAxKTtcbiAgICB0aGlzLnZpZXcucmVuZGVyQm9hcmRJbmZvKHRoaXMucDEpO1xuXG4gICAgdGhpcy52aWV3LnJlbmRlckJvYXJkKHRoaXMucDIpO1xuICAgIHRoaXMudmlldy5yZW5kZXJCb2FyZEluZm8odGhpcy5wMik7XG5cbiAgICB0aGlzLnZpZXcuYmluZENsaWNrT3Bwb25lbnRDZWxsKHRoaXMucGxheVBsYXllclR1cm4uYmluZCh0aGlzKSwgdGhpcy5wMSk7XG4gICAgdGhpcy52aWV3LmJpbmRDbGlja09wcG9uZW50Q2VsbCh0aGlzLnBsYXlDb21wdXRlclR1cm4uYmluZCh0aGlzKSwgdGhpcy5wMik7XG4gICAgdGhpcy52aWV3LmJpbmRDbGlja1Jlc3RhcnRCdXR0b24odGhpcy5yZXN0YXJ0R2FtZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHJlc3RhcnRHYW1lKCkge1xuICAgIHRoaXMuaW5pdCgpO1xuXG4gICAgdGhpcy5zZXR1cEdhbWUoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHYW1lO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBHYW1lIGZyb20gJy4vbW9kdWxlcy9nYW1lJztcblxuaW1wb3J0ICcuLi9zdHlsZXMvbWFpbi5jc3MnO1xuXG5jb25zdCBnYW1lID0gbmV3IEdhbWUoKTtcblxuZ2FtZS5zZXR1cEdhbWUoKTtcbi8vIGdhbWUuc3RhcnRHYW1lKCk7XG4iXSwibmFtZXMiOlsiU2hpcCIsInJlcXVpcmUiLCJjaGVja0VkZ2VDb2xsaXNpb25zIiwiR2FtZUJvYXJkIiwidGhpcyIsImJvYXJkIiwicmVzZXRCb2FyZCIsInNoaXBzIiwiY2FycmllciIsImJhdHRsZXNoaXAiLCJjcnVpc2VyIiwic3VibWFyaW5lIiwicGF0cm9sQm9hdCIsInNoaXBOYW1lIiwic3RhcnQiLCJheGlzIiwic2hpcCIsInBsYWNlIiwibG9jcyIsIkFycmF5IiwibGVuZ3RoIiwia2V5cyIsIm1hcCIsIm4iLCJjaGVja0NvbGxpc2lvbnMiLCJsb2MiLCJuYW1lIiwiT2JqZWN0IiwiZmlsdGVyIiwiaXNQbGFjZWQiLCJpIiwicHVzaCIsImlzU2hvdCIsIm1vdmVJbmZvIiwiY2VsbCIsInRhcmdldCIsImhpdCIsInN1bmsiLCJmb3JFYWNoIiwiaXNTdW5rIiwiYXhlcyIsImNlbGxzIiwidmFsaWRQbGFjZW1lbnQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJwbGFjZVNoaXAiLCJtb2R1bGUiLCJleHBvcnRzIiwiUGxheWVyIiwiYWkiLCJtb3Zlc01hZGUiLCJBSSIsIm9wcG9uZW50IiwicmVjZWl2ZUF0dGFjayIsImhpdHMiLCJsb2NzU3RyIiwidG9TdHJpbmciLCJzb21lIiwic2xpY2UiLCJpbmRleE9mIiwiY3JlYXRlRWxlbWVudCIsInRhZyIsImNsYXNzTmFtZSIsImVsZW1lbnQiLCJkb2N1bWVudCIsInJhbmRFbGVtZW50IiwiYXJyIiwiZ2V0QWN0aXZlU2hpcHMiLCJzaGlwTW92ZXMiLCJtb3ZlIiwiU2V0Iiwic2hpcExlbmd0aHMiLCJnZXROZXh0U2hpcCIsImN1cnJlbnRTaGlwIiwic2hpcE5hbWVzIiwiaW5kZXgiLCJwcm9qZWN0U2hpcExvY3MiLCJvZmZzZXQiLCJzaGlmdCIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiaWQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0Iiwiam9pbiIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwibmMiLCJzdGFydEJ1dHRvbiIsImlubmVyVGV4dCIsInJlc3RhcnRCdXR0b24iLCJlbGVtZW50cyIsInAxR2FtZVdpbmRvdyIsImdldEVsZW1lbnRCeUlkIiwicDJHYW1lV2luZG93IiwicDFCb2FyZCIsInAyQm9hcmQiLCJnYW1lTWVzc2FnZSIsInBsYXllciIsImdyaWQiLCJpbm5lckhUTUwiLCJkaXNwbGF5IiwiYmFja2dyb3VuZENvbG9yIiwiY2hpbGRyZW4iLCJ0ZXh0IiwibWVzc2FnZSIsInNldEdhbWVNZXNzYWdlIiwiZ2FtZUJ1dHRvbnMiLCJyYW5kb21CdXR0b24iLCJyZXNldEJ1dHRvbiIsInJlc2V0IiwiYm9hcmRJbmZvIiwic2hpcFRleHQiLCJwcm9ncmVzc01ldGVyIiwiaGFuZGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJwYXJzZUludCIsImRhdGFzZXQiLCJvdXRjb21lIiwidmlld0xvY3MiLCJjZWxsQ29sb3IiLCJ2YWxpZCIsImJvYXJkU3RhdGUiLCJib2FyZENlbGwiLCJ2aWV3Q2VsbCIsImluY2x1ZGVzIiwiY29kZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsIm1vdXNlb3ZlckV2ZW50IiwiRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiaW5mbyIsImNvbG9yQm9hcmQiLCJuZXh0U2hpcCIsInJlbmRlckluR2FtZU1lc3NhZ2UiLCJ2YWxpZE1vdmUiLCJvcHBCb2FyZCIsIm5ld1ZhbHVlIiwiZ2V0QXR0cmlidXRlIiwid2lubmVyIiwicmVzZXRCb2FyZEV2ZW50TGlzdGVuZXJzIiwibGFzdENoaWxkIiwicGxheWVyTmFtZSIsIm9sZEJvYXJkIiwiY2xvbmVCb2FyZCIsImNsb25lTm9kZSIsInJlcGxhY2VDaGlsZCIsImNlbGxzSGl0IiwibW9kZWxCb2FyZCIsIm9mZnNldHMiLCJjZWxsc1Nob3QiLCJsZWdhbE1vdmVzIiwiZ2V0UmFuZG9tU2hvdCIsInByZXZNb3ZlIiwicHJldkNlbGwiLCJmaW5kU3VpdGFibGVNb3ZlcyIsImFjdGl2ZVNoaXBzIiwicHJldlNoaXAiLCJoaWRkZW5TaGlwTGVuZ3RocyIsImdldFVuZGlzY292ZXJlZFNoaXBMZW5ndGhzIiwic2hpcExlbmd0aCIsInZhbGlkTG9jcyIsIm1vZGVsVmFsaWRQbGFjZW1lbnRzIiwic2hpcENlbGxzSGl0IiwidmFsaWROZXh0TW92ZXMiLCJmaW5kVmFsaWRQcm9qZWN0aW9uIiwiYXhpc09mZnNldHMiLCJsaW1pdHMiLCJtaW4iLCJtYXgiLCJsaW1pdCIsImdldEVtcHR5TG9jcyIsImVtcHR5TG9jIiwiY2xpY2siLCJsIiwicHJvamVjdGVkTG9jcyIsImluaXQiLCJwMSIsInAyIiwidmlldyIsIlZpZXciLCJ0dXJuIiwicGxhY2VtZW50U3RhdGUiLCJhbGxTaGlwc1BsYWNlZCIsInBsYWNlU2hpcHNSYW5kb21seSIsInNoaXBzU3VuayIsImZpcmVTaG90IiwiY2hlY2tXaW4iLCJzd2l0Y2hUdXJuIiwibmV4dEluZGV4IiwiZ2V0U21hcnRTaG90IiwiZ2V0Q2VsbCIsImNsaWNrQ2VsbCIsImZpcnN0TG9jIiwiZ2V0U2hpcHNQbGFjZWQiLCJyZW5kZXJCb2FyZCIsInJlbmRlclN0YXJ0U2NyZWVuIiwiYmluZE1vdXNlT3ZlckNlbGwiLCJjaGVja1ZhbGlkUGxhY2VtZW50IiwiYmluZCIsImJpbmRQcmVzc1NwYWNlS2V5IiwidG9nZ2xlUGxhY2VtZW50QXhpcyIsImJpbmRDbGlja1BsYWNlbWVudENlbGwiLCJiaW5kQ2xpY2tSYW5kb21CdXR0b24iLCJyYW5kb21pemVQbGF5ZXJTaGlwcyIsImJpbmRDbGlja1Jlc2V0QnV0dG9uIiwicmVzZXRQbGF5ZXJCb2FyZCIsImJpbmRDbGlja1N0YXJ0QnV0dG9uIiwic3RhcnRHYW1lIiwicmVuZGVyQm9hcmRJbmZvIiwiYmluZENsaWNrT3Bwb25lbnRDZWxsIiwicGxheVBsYXllclR1cm4iLCJwbGF5Q29tcHV0ZXJUdXJuIiwiYmluZENsaWNrUmVzdGFydEJ1dHRvbiIsInJlc3RhcnRHYW1lIiwic2V0dXBHYW1lIiwiR2FtZSJdLCJzb3VyY2VSb290IjoiIn0=