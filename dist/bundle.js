(()=>{var t={21:(t,e,n)=>{function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function i(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=a(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,l=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return s=t.done,t},e:function(t){l=!0,o=t},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw o}}}}function o(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||a(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(t,e){if(t){if("string"==typeof t)return s(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(t,e):void 0}}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function l(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==r(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var i=n.call(t,"string");if("object"!==r(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i.key),"symbol"===r(o)?o:String(o)),i)}var o}var c=n(883),u=n(167).checkEdgeCollisions,p=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.board=[],this.ships={carrier:new c(5,"carrier"),battleship:new c(4,"battleship"),cruiser:new c(3,"cruiser"),submarine:new c(3,"submarine"),patrolBoat:new c(2,"patrolBoat")},this.initBoard()}var e,n;return e=t,(n=[{key:"placeShip",value:function(t,e,n){var r=this.ships[t];r.place();var a=o(Array(r.length).keys()).map((function(t){return"x"===n?e+t:e+10*t}));if(this.checkCollisions(a,n,this.board)){var s,l=i(a);try{for(l.s();!(s=l.n()).done;){var c=s.value;this.board[c].ship=r.name}}catch(t){l.e(t)}finally{l.f()}return!0}return!1}},{key:"getShipsPlaced",value:function(){var t=this;return Object.keys(this.ships).filter((function(e){return t.ships[e].isPlaced}))}},{key:"initBoard",value:function(){var t=this;this.board=[];for(var e=0;e<100;e+=1)this.board.push({ship:null,isShot:!1});Object.keys(this.ships).forEach((function(e){t.ships[e].isPlaced=!1}))}},{key:"isShotHit",value:function(t){return this.board[t].isShot&&null!=this.board[t].ship}},{key:"receiveAttack",value:function(t){var e={ship:null,cell:t};if(!this.board[t].isShot){this.board[t].isShot=!0;var n=this.board[t].ship;if(n){var r=this.ships[n];e.ship=r,r.hit()}else e.ship=null}return e}},{key:"shipAt",value:function(t){return this.ships[this.board[t].ship]}},{key:"shipsSunk",value:function(){var t=this,e=0;return Object.keys(this.ships).forEach((function(n){t.ships[n].isSunk()&&(e+=1)})),e}},{key:"placeShipsRandomly",value:function(){var t=this,e=["x","y"],n=o(Array(100).keys());Object.keys(this.ships).forEach((function(r){for(var i=!1;!i;){var o=n[Math.floor(100*Math.random())],a=e[Math.floor(2*Math.random())];i=t.placeShip(r,o,a)}}))}},{key:"checkCollisions",value:function(t,e){if(!u(t,e))return!1;var n,r=i(t);try{for(r.s();!(n=r.n()).done;){var o=n.value;if(null!=this.board[o].ship)return!1}}catch(t){r.e(t)}finally{r.f()}return!0}}])&&l(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();t.exports=p},779:(t,e,n)=>{function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==r(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var i=n.call(t,"string");if("object"!==r(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i.key),"symbol"===r(o)?o:String(o)),i)}var o}var o=n(21),a=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.board=new o,this.ships=this.board.ships,this.name=e?"p2":"p1",this.movesMade=[],e&&(this.AI=e)}var e,n;return e=t,(n=[{key:"fireShot",value:function(t,e){var n=t.board.receiveAttack(e);return this.movesMade.push(n),n}},{key:"getCell",value:function(t){return this.board.board[t]}}])&&i(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();t.exports=a},883:t=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(t)}function n(t,n){for(var r=0;r<n.length;r++){var i=n[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,(void 0,o=function(t,n){if("object"!==e(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var i=r.call(t,"string");if("object"!==e(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(i.key),"symbol"===e(o)?o:String(o)),i)}var o}var r=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.length=e,this.name=n,this.hits=0,this.sunk=!1,this.isPlaced=!1}var e,r;return e=t,(r=[{key:"hit",value:function(){this.hits+=1,this.hits===this.length&&(this.sunk=!0)}},{key:"isSunk",value:function(){return this.sunk}},{key:"place",value:function(){this.isPlaced=!0}}])&&n(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();t.exports=r},167:(t,e,n)=>{"use strict";function r(t){return function(t){if(Array.isArray(t))return o(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||i(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(t,e){if(t){if("string"==typeof t)return o(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?o(t,e):void 0}}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function a(t,e){var n,r=function(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=i(t))){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,s=!0,l=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return s=t.done,t},e:function(t){l=!0,a=t},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw a}}}}(t);try{for(r.s();!(n=r.n()).done;){var o=n.value;if(o<0||o>99)return!1}}catch(t){r.e(t)}finally{r.f()}if(1===t.length)return!0;if("x"===e||1===e||-1===e){var a=t.map((function(t){return t.toString()}));if(a.some((function(t){return"9"===t.slice(-1)&&a.indexOf(t)!==a.length-1})))return!1}return!0}function s(t,e){var n=document.createElement(t);return n.className=e,n}function l(t){return t[Math.floor(Math.random()*t.length)]}function c(t){var e=t.filter((function(t){return null!=t.ship&&!t.ship.isSunk()}));return e.length>0?r(new Set(e.map((function(t){return t.ship})))):[]}n.r(e),n.d(e,{checkEdgeCollisions:()=>a,createElement:()=>s,getActiveShips:()=>c,getNextShip:()=>p,projectShipLocs:()=>f,randElement:()=>l,shipLengths:()=>u});var u={carrier:5,battleship:4,cruiser:3,submarine:3,patrolBoat:2};function p(t){var e=Object.keys(u),n=e.indexOf(t);return n<4?e[n+1]:e[n]}function f(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;return r(Array(n).keys()).map((function(n){return t+e*(n+i)}))}},411:(t,e,n)=>{"use strict";n.d(e,{Z:()=>u});var r=n(537),i=n.n(r),o=n(645),a=n.n(o),s=n(131),l=n(561),c=a()(i());c.i(s.Z),c.i(l.Z),c.push([t.id,"#body {\n\tdisplay: grid;\n\tgrid-template-rows: auto 1fr;\n\tbackground-color: lightskyblue;\n}\n\n#body, button {\n\tfont-family: 'TypoRoundLight', sans-serif;\n}","",{version:3,sources:["webpack://./src/styles/components/body.css"],names:[],mappings:"AAGA;CACC,aAAa;CACb,4BAA4B;CAC5B,8BAA8B;AAC/B;;AAEA;CACC,yCAAyC;AAC1C",sourcesContent:["@import './message-window.css';\n@import './game-window.css';\n\n#body {\n\tdisplay: grid;\n\tgrid-template-rows: auto 1fr;\n\tbackground-color: lightskyblue;\n}\n\n#body, button {\n\tfont-family: 'TypoRoundLight', sans-serif;\n}"],sourceRoot:""}]);const u=c},760:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([t.id,"#footer {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tgap: 8px;\n\tpadding: 8px;\n\tfont-family: 'TypoRoundLight', sans-serif;\n}\n\n#github-logo {\n\twidth: 25px;\n\theight: 25px;\n}\n\n#footer > p > a {\n\tfont-weight: bold;\n}","",{version:3,sources:["webpack://./src/styles/components/footer.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,mBAAmB;CACnB,uBAAuB;CACvB,QAAQ;CACR,YAAY;CACZ,yCAAyC;AAC1C;;AAEA;CACC,WAAW;CACX,YAAY;AACb;;AAEA;CACC,iBAAiB;AAClB",sourcesContent:["#footer {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tgap: 8px;\n\tpadding: 8px;\n\tfont-family: 'TypoRoundLight', sans-serif;\n}\n\n#github-logo {\n\twidth: 25px;\n\theight: 25px;\n}\n\n#footer > p > a {\n\tfont-weight: bold;\n}"],sourceRoot:""}]);const s=a},561:(t,e,n)=>{"use strict";n.d(e,{Z:()=>h});var r=n(537),i=n.n(r),o=n(645),a=n.n(o),s=n(667),l=n.n(s),c=new URL(n(342),n.b),u=new URL(n(688),n.b),p=a()(i()),f=l()(c),d=l()(u);p.push([t.id,"#game-window h2 {\n\ttext-align: center;\n}\n\n#game-window {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-around;\n\tflex-wrap: wrap;\n}\n\n.game-board {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(10, 1fr);\n\tgrid-template-columns: repeat(10, 1fr);\n\tgap: 1px;\n}\n\n.cell {\n\tposition: relative;\n\twidth: 30px;\n\theight: 30px;\n\tbackground-color: white;\n\tborder-radius: 4px;\n}\n\n#p1-board .cell.has-ship, #p2-board .cell.has-ship.hit {\n\tbackground-color: #3343AE;\n}\n\n.cell.valid {\n\tbackground-color: rgb(142, 223, 142);\n}\n\n.cell.invalid {\n\tbackground-color: rgb(255, 92, 92);\n}\n\n#p1-board .cell.has-ship.hit::after, #p2-board .cell.has-ship.hit::after {\n\tcontent: url("+f+");\n\tposition: absolute; \n\tinset: 0;\n\tmargin: auto;\n\twidth: 30px;\n\theight: 30px;\n}\n\n.cell.hit::after {\n\tcontent: url("+d+");\n\tposition: absolute; \n\tinset: 0;\n\tmargin: auto;\n\twidth: 30px;\n\theight: 30px;\n}\n\n.board-info {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(2, min-content);\n\tgrid-template-columns: repeat(5, 1fr);\n}\n\n.board-info p {\n\tfont-size: 8px;\n}\n\n.game-buttons {\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr;\n\tgrid-template-rows: auto auto;\n}\n\n.progress-meter {\n\twidth: 50px;\n}","",{version:3,sources:["webpack://./src/styles/components/game-window.css"],names:[],mappings:"AAAA;CACC,kBAAkB;AACnB;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,6BAA6B;CAC7B,eAAe;AAChB;;AAEA;CACC,aAAa;CACb,mCAAmC;CACnC,sCAAsC;CACtC,QAAQ;AACT;;AAEA;CACC,kBAAkB;CAClB,WAAW;CACX,YAAY;CACZ,uBAAuB;CACvB,kBAAkB;AACnB;;AAEA;CACC,yBAAyB;AAC1B;;AAEA;CACC,oCAAoC;AACrC;;AAEA;CACC,kCAAkC;AACnC;;AAEA;CACC,gDAAsC;CACtC,kBAAkB;CAClB,QAAQ;CACR,YAAY;CACZ,WAAW;CACX,YAAY;AACb;;AAEA;CACC,gDAAoC;CACpC,kBAAkB;CAClB,QAAQ;CACR,YAAY;CACZ,WAAW;CACX,YAAY;AACb;;AAEA;CACC,aAAa;CACb,0CAA0C;CAC1C,qCAAqC;AACtC;;AAEA;CACC,cAAc;AACf;;AAEA;CACC,aAAa;CACb,8BAA8B;CAC9B,6BAA6B;AAC9B;;AAEA;CACC,WAAW;AACZ",sourcesContent:["#game-window h2 {\n\ttext-align: center;\n}\n\n#game-window {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-around;\n\tflex-wrap: wrap;\n}\n\n.game-board {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(10, 1fr);\n\tgrid-template-columns: repeat(10, 1fr);\n\tgap: 1px;\n}\n\n.cell {\n\tposition: relative;\n\twidth: 30px;\n\theight: 30px;\n\tbackground-color: white;\n\tborder-radius: 4px;\n}\n\n#p1-board .cell.has-ship, #p2-board .cell.has-ship.hit {\n\tbackground-color: #3343AE;\n}\n\n.cell.valid {\n\tbackground-color: rgb(142, 223, 142);\n}\n\n.cell.invalid {\n\tbackground-color: rgb(255, 92, 92);\n}\n\n#p1-board .cell.has-ship.hit::after, #p2-board .cell.has-ship.hit::after {\n\tcontent: url('../../assets/cross.svg');\n\tposition: absolute; \n\tinset: 0;\n\tmargin: auto;\n\twidth: 30px;\n\theight: 30px;\n}\n\n.cell.hit::after {\n\tcontent: url('../../assets/dot.svg');\n\tposition: absolute; \n\tinset: 0;\n\tmargin: auto;\n\twidth: 30px;\n\theight: 30px;\n}\n\n.board-info {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(2, min-content);\n\tgrid-template-columns: repeat(5, 1fr);\n}\n\n.board-info p {\n\tfont-size: 8px;\n}\n\n.game-buttons {\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr;\n\tgrid-template-rows: auto auto;\n}\n\n.progress-meter {\n\twidth: 50px;\n}"],sourceRoot:""}]);const h=p},637:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([t.id,"#header {\n\tpadding: 16px;\n}\n\n#header h1 {\n\ttext-align: center;\n\tfont-family: 'AristaPro', sans-serif;\n\tfont-size: 48px;\n}\n\n","",{version:3,sources:["webpack://./src/styles/components/header.css"],names:[],mappings:"AAAA;CACC,aAAa;AACd;;AAEA;CACC,kBAAkB;CAClB,oCAAoC;CACpC,eAAe;AAChB",sourcesContent:["#header {\n\tpadding: 16px;\n}\n\n#header h1 {\n\ttext-align: center;\n\tfont-family: 'AristaPro', sans-serif;\n\tfont-size: 48px;\n}\n\n"],sourceRoot:""}]);const s=a},131:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),i=n.n(r),o=n(645),a=n.n(o)()(i());a.push([t.id,"#message-window {\n\tdisplay: grid;\n\tgrid-template-columns: 1fr auto auto;\n\tpadding: 0px 8px 8px 8px;\n}\n\n.game-message {\n\ttext-align: center;\n}\n\n.start-button {\n\twidth: 100px;\n\theight: 40px;\n\tmargin: auto;\n}","",{version:3,sources:["webpack://./src/styles/components/message-window.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,oCAAoC;CACpC,wBAAwB;AACzB;;AAEA;CACC,kBAAkB;AACnB;;AAEA;CACC,YAAY;CACZ,YAAY;CACZ,YAAY;AACb",sourcesContent:["#message-window {\n\tdisplay: grid;\n\tgrid-template-columns: 1fr auto auto;\n\tpadding: 0px 8px 8px 8px;\n}\n\n.game-message {\n\ttext-align: center;\n}\n\n.start-button {\n\twidth: 100px;\n\theight: 40px;\n\tmargin: auto;\n}"],sourceRoot:""}]);const s=a},756:(t,e,n)=>{"use strict";n.d(e,{Z:()=>C});var r=n(537),i=n.n(r),o=n(645),a=n.n(o),s=n(637),l=n(411),c=n(760),u=n(667),p=n.n(u),f=new URL(n(549),n.b),d=new URL(n(813),n.b),h=new URL(n(954),n.b),m=new URL(n(227),n.b),y=a()(i());y.i(s.Z),y.i(l.Z),y.i(c.Z);var v=p()(f),A=p()(d),b=p()(h),g=p()(m);y.push([t.id,"* {\n\tpadding: 0;\n\tmargin: 0;\n}\n\n@font-face {\n  font-family: 'TypoRoundLight';\n  src: url("+v+") format('woff2'),\n       url("+A+") format('woff');\n}\n\n@font-face {\n  font-family: 'AristaPro';\n  src: url("+b+") format('woff2'),\n       url("+g+") format('woff');\n}\n\na {\n\ttext-decoration: none;\n}\n\nbody {\n\theight: 100vh;\n\twidth: 100vw;\n\tdisplay: grid;\n\tgrid-template-rows: auto 1fr auto;\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAIA;CACC,UAAU;CACV,SAAS;AACV;;AAEA;EACE,6BAA6B;EAC7B;6DACgE;AAClE;;AAEA;EACE,wBAAwB;EACxB;6DACkE;AACpE;;AAEA;CACC,qBAAqB;AACtB;;AAEA;CACC,aAAa;CACb,YAAY;CACZ,aAAa;CACb,iCAAiC;AAClC",sourcesContent:["@import './components/header.css';\n@import './components/body.css';\n@import './components/footer.css';\n\n* {\n\tpadding: 0;\n\tmargin: 0;\n}\n\n@font-face {\n  font-family: 'TypoRoundLight';\n  src: url('../assets/fonts/typo-round-light.woff2') format('woff2'),\n       url('../assets/fonts/typo-round-light.woff') format('woff');\n}\n\n@font-face {\n  font-family: 'AristaPro';\n  src: url('../assets/fonts/arista-pro-regular.woff2') format('woff2'),\n       url('../assets/fonts/arista-pro-regular.woff') format('woff');\n}\n\na {\n\ttext-decoration: none;\n}\n\nbody {\n\theight: 100vh;\n\twidth: 100vw;\n\tdisplay: grid;\n\tgrid-template-rows: auto 1fr auto;\n}"],sourceRoot:""}]);const C=y},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);r&&a[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),e.push(u))}},e}},667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},a=[],s=0;s<t.length;s++){var l=t[s],c=r.base?l[0]+r.base:l[0],u=o[c]||0,p="".concat(c," ").concat(u);o[c]=u+1;var f=n(p),d={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)e[f].references++,e[f].updater(d);else{var h=i(d,r);r.byIndex=s,e.splice(s,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var s=n(o[a]);e[s].references--}for(var l=r(t,i),c=0;c<o.length;c++){var u=n(o[c]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}o=l}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},342:(t,e,n)=>{"use strict";t.exports=n.p+"assets/cross.svg"},688:(t,e,n)=>{"use strict";t.exports=n.p+"assets/dot.svg"},227:(t,e,n)=>{"use strict";t.exports=n.p+"a8de1ea51c5ef52c12b5.woff"},954:(t,e,n)=>{"use strict";t.exports=n.p+"27bc98208f3a618fe52e.woff2"},813:(t,e,n)=>{"use strict";t.exports=n.p+"526662fb4d367efb7226.woff"},549:(t,e,n)=>{"use strict";t.exports=n.p+"53019bd3fac6c9a75505.woff2"}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{"use strict";var t=n(779),e=n.n(t),r=n(167);function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}function o(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=a(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,l=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return s=t.done,t},e:function(t){l=!0,o=t},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw o}}}}function a(t,e){if(t){if("string"==typeof t)return s(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(t,e):void 0}}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==i(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==i(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===i(o)?o:String(o)),r)}var o}const c=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var e=(0,r.createElement)("button","start-button");e.innerText="Start";var n=(0,r.createElement)("button","restart-button");n.innerText="Restart";var i=(0,r.createElement)("p");i.id="turn-counter",i.innerText="Turn 1",this.elements={p1GameWindow:document.getElementById("p1-window"),p2GameWindow:document.getElementById("p2-window"),p1Board:document.getElementById("p1-board"),p2Board:document.getElementById("p2-board"),messageWindow:document.getElementById("message-window"),gameMessage:document.querySelector(".game-message"),startButton:e,restartButton:n,turnCounter:i}}var e,n;return e=t,n=[{key:"renderBoard",value:function(t){var e=document.getElementById("".concat(t.name,"-board"));e.innerHTML="",this.elements["".concat(t.name,"GameWindow")].style.display="block";for(var n=t.board.board,i=0;i<100;i+=1){var o=(0,r.createElement)("div","cell");o.setAttribute("data-index",i),n[i].ship&&o.classList.add("has-ship"),e.appendChild(o)}}},{key:"colorBoard",value:function(t){for(var e=0;e<100;e+=1){var n=this.elements.p1Board.children[e];n.className="cell",null!=t[e].ship&&n.classList.add("has-ship")}}},{key:"setMessage",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e&&(this.elements.messageWindow.innerHTML="",this.elements.messageWindow.appendChild(this.elements.gameMessage)),this.elements.gameMessage.innerText=t}},{key:"renderStartScreen",value:function(){this.setMessage("Place your carrier (Press space to rotate)",!0);var t=(0,r.createElement)("div","game-buttons"),e=(0,r.createElement)("button","random-button");e.innerText="Random";var n=(0,r.createElement)("button","reset-button");n.innerText="Reset",t.appendChild(e),t.appendChild(n),this.elements.randomButton=e,this.elements.resetButton=n,this.elements.p1GameWindow.appendChild(t),this.elements.p2GameWindow.style.display="none"}},{key:"renderInMessageWindow",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e&&(this.elements.gameMessage.innerHTML=""),this.elements.messageWindow.appendChild(t)}},{key:"renderBoardInfo",value:function(t){var e=(0,r.createElement)("div","board-info");e.id="".concat(t.name,"-board-info");var n=t.ships;Object.keys(n).forEach((function(t){var n="patrolBoat"===t?"patrol boat":t,i=(0,r.createElement)("p","ship-name");i.innerText=n,e.appendChild(i)})),Object.keys(n).forEach((function(i){var o=(0,r.createElement)("meter","progress-meter");o.id="".concat(t.name,"-").concat(i,"-meter"),o.setAttribute("value",0),o.setAttribute("min",0),o.setAttribute("max",n[i].length),e.appendChild(o)})),this.elements["".concat(t.name,"GameWindow")].appendChild(e)}},{key:"bindMouseOverCell",value:function(t){var e,n=this,r=o(this.elements.p1Board.children);try{for(r.s();!(e=r.n()).done;)e.value.addEventListener("mouseover",(function(e){var r=parseInt(e.target.dataset.index,10),i=t(r);if(i.viewLocs){var a,s=i.valid?"valid":"invalid",l=o(i.boardState);try{for(l.s();!(a=l.n()).done;){var c=a.value,u=i.boardState.indexOf(c),p=n.elements.p1Board.querySelector('.cell[data-index="'.concat(u,'"]'));i.viewLocs.includes(u)&&!c.ship?p.classList.add(s):c.ship?p.classList.add("has-ship"):p.className="cell"}}catch(t){l.e(t)}finally{l.f()}}}))}catch(t){r.e(t)}finally{r.f()}}},{key:"bindPressSpaceKey",value:function(t){document.addEventListener("keyup",(function(e){if("Space"===e.code){var n=(i=document.querySelectorAll(":hover"),function(t){if(Array.isArray(t))return s(t)}(i)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(i)||a(i)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).slice(-1)[0];if(n.classList.contains("cell")){t();var r=new Event("mouseover");n.dispatchEvent(r)}}var i}))}},{key:"bindClickPlacementCell",value:function(t){var e=this;this.elements.p1Board.addEventListener("click",(function(n){var r=parseInt(n.target.dataset.index,10);if(e.elements.p1Board.children[r].classList.contains("valid")){var i=t(r);e.colorBoard(i.board);var o="patrolBoat"===i.nextShip?"patrol boat":i.nextShip;null!=o?e.setMessage("Place your ".concat(o," (Press space to rotate)")):e.renderInMessageWindow(e.elements.startButton,!0)}}))}},{key:"bindClickOpponentCell",value:function(t,e){var n,r=this,i=o("p1"===e.name?this.elements.p2Board.children:this.elements.p1Board.children);try{var a=function(){var i=n.value;i.addEventListener("click",(function(n){var o=parseInt(n.target.dataset.index,10),a=t(o);if(a.validMove){var s=a.opponent.board.board,l=s[o].ship;if("p1"===e.name&&(r.elements.turnCounter.innerText="Turn ".concat(a.turnCount)),i.classList.add("hit"),l&&s[o].isShot){var c="patrolBoat"===l?"patrol boat":l;r.setMessage("You hit the ".concat(c));var u=document.getElementById("".concat(a.opponent.name,"-").concat(l,"-meter")),p=parseInt(u.getAttribute("value"),10)+1;if(u.setAttribute("value",p),a.winner){var f="p1"===e.name?"You won!":"You lost...";r.setMessage(f),r.resetBoardEventListeners("p2")}}else a.winner||r.setMessage("")}else"p1"!==e.name||a.winner||r.setMessage("You already shot at that cell")}))};for(i.s();!(n=i.n()).done;)a()}catch(t){i.e(t)}finally{i.f()}}},{key:"bindClickRandomButton",value:function(t){var e=this;this.elements.randomButton.addEventListener("click",(function(){var n=t();e.colorBoard(n),e.elements.messageWindow.innerHTML="",e.elements.messageWindow.appendChild(e.elements.startButton)}))}},{key:"bindClickResetButton",value:function(t){var e=this;this.elements.resetButton.addEventListener("click",(function(){var n=t();e.colorBoard(n),e.setMessage("Place your carrier (Press space to rotate)",!0)}))}},{key:"bindClickStartButton",value:function(t){var e=this;this.elements.startButton.addEventListener("click",(function(){e.elements.p1GameWindow.removeChild(e.elements.p1GameWindow.lastChild),t(),e.setMessage("Click to fire a shot",!0),e.elements.messageWindow.appendChild(e.elements.turnCounter),e.elements.messageWindow.appendChild(e.elements.restartButton)}))}},{key:"bindClickRestartButton",value:function(t){var e=this;this.elements.restartButton.addEventListener("click",(function(){for(var n=0,r=[e.elements.p1GameWindow,e.elements.p2GameWindow];n<r.length;n++){var i=r[n];i.removeChild(i.lastChild)}t()}))}},{key:"resetBoardEventListeners",value:function(t){var e=this.elements["".concat(t,"Board")],n=e.cloneNode(!0);e.parentNode.replaceChild(n,e),this.elements["".concat(t,"Board")]=n}},{key:"getCell",value:function(t,e){return this.elements["".concat(t,"Board")].children[e]}}],n&&l(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();var u=n(21),p=n.n(u);function f(t){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f(t)}function d(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=m(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,a=!0,s=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,o=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function h(t){return function(t){if(Array.isArray(t))return y(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||m(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(t,e){if(t){if("string"==typeof t)return y(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?y(t,e):void 0}}function y(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function v(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==f(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==f(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===f(i)?i:String(i)),r)}var i}const A=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.cellsHit={carrier:[],battleship:[],cruiser:[],submarine:[],patrolBoat:[]},this.modelBoard=(new(p())).board,this.offsets=[-1,1,-10,10]}var e,n;return e=t,(n=[{key:"getRandomShot",value:function(t){var e=t.map((function(t){return t.cell})),n=h(Array(100).keys()).filter((function(t){return!e.includes(t)}));return(0,r.randElement)(n)}},{key:"getSmartShot",value:function(t){if(0===t.length)return this.getRandomShot(t);var e=null,n=t.slice(-1)[0],i=n.cell,o=n.ship;if(o&&!o.isSunk())this.cellsHit[o.name].push(i),this.modelBoard[i].ship=o,e=this.findSuitableMoves(o);else{var a=(0,r.getActiveShips)(t);if(a.length>0){var s=a.slice(-1)[0];e=this.findSuitableMoves(s)}else{var l=this.getUndiscoveredShipLengths(),c=(0,r.randElement)(l),u=this.modelValidPlacements(c);e=(0,r.randElement)((0,r.randElement)(u))}}return e}},{key:"findSuitableMoves",value:function(t){var e=this.cellsHit[t.name],n=[];if(1===e.length){var i,o=e[0],a=d(this.offsets);try{for(a.s();!(i=a.n()).done;){var s=i.value,l=this.findValidProjection(o,s,t.length-1);l&&n.push(l)}}catch(t){a.e(t)}finally{a.f()}}else{var c,u=[Math.min.apply(Math,h(e)),Math.max.apply(Math,h(e))];c=(u[1]-u[0])%10==0?this.offsets.slice(2):this.offsets.slice(0,2);for(var p=0;p<2;p+=1){var f=u[p],m=c[p],y=this.findValidProjection(f,m,t.length-e.length);null!=y&&n.push(y)}}return(0,r.randElement)(n)}},{key:"modelValidPlacements",value:function(t){var e,n=[],i=d(this.getEmptyLocs());try{for(i.s();!(e=i.n()).done;)for(var o=e.value,a=0,s=[1,10];a<s.length;a++){var l=s[a],c=(0,r.projectShipLocs)(o,l,t);this.checkCollisions(c,l)&&n.push(c)}}catch(t){i.e(t)}finally{i.f()}return n}},{key:"clickCell",value:function(t,e){this.modelBoard[t].isShot=!0,e.click()}},{key:"getUndiscoveredShipLengths",value:function(){var t=this,e=[];return Object.keys(this.cellsHit).forEach((function(n){var i=r.shipLengths[n];0===t.cellsHit[n].length&&e.push(i)})),e}},{key:"getEmptyLocs",value:function(){var t=this;return this.modelBoard.filter((function(t){return!t.isShot})).map((function(e){return t.modelBoard.indexOf(e)}))}},{key:"checkCollisions",value:function(t,e){if(!(0,r.checkEdgeCollisions)(t,e))return!1;var n,i=d(t);try{for(i.s();!(n=i.n()).done;){var o=n.value;if(this.modelBoard[o].isShot)return!1}}catch(t){i.e(t)}finally{i.f()}return!0}},{key:"findValidProjection",value:function(t,e,n){for(var i=n;i>0;){var o=(0,r.projectShipLocs)(t,e,i,1);if(this.checkCollisions(o,e))return t+e;i-=1}return null}}])&&v(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function b(t){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},b(t)}function g(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function C(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==b(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==b(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===b(i)?i:String(i)),r)}var i}const w=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.init()}var n,i;return n=t,(i=[{key:"init",value:function(){this.p1=new(e()),this.p2=new(e())(new A),this.view=new c,this.turn="p1",this.turnCounter=1,this.winner=null,this.placementState={axis:"x",currentShip:"carrier",allShipsPlaced:!1}}},{key:"switchTurn",value:function(){this.turn="p1"===this.turn?"p2":"p1"}},{key:"checkWin",value:function(t){return 5===t.shipsSunk()&&(this.winner=this.turn),this.winner}},{key:"playPlayerTurn",value:function(t){if(null!=this.winner)return!1;var e=this.p2.board,n={validMove:!1,opponent:this.p2,winner:null};if(!e.board[t].isShot){if(n.validMove=!0,this.turnCounter+=1,this.p1.fireShot(this.p2,t),!this.checkWin(e)){this.switchTurn();var r=this.p2.AI.getSmartShot(this.p2.movesMade),i=this.view.getCell(this.p1.name,r);this.p2.AI.clickCell(r,i)}n.winner=this.winner}return n.turnCount=this.turnCounter,n}},{key:"playComputerTurn",value:function(t){if(null!=this.winner)return!1;var e={validMove:!1,opponent:this.p1,winner:null};return"p2"===this.turn&&(e.validMove=!0,this.p2.fireShot(this.p1,t),this.checkWin(this.p1.board)?e.winner=this.winner:this.switchTurn()),e}},{key:"checkValidPlacement",value:function(t){var e,n=this,i={valid:!1,boardState:this.p1.board.board};if(!this.placementState.allShipsPlaced){var o=r.shipLengths[this.placementState.currentShip],a=(e=Array(o).keys(),function(t){if(Array.isArray(t))return g(t)}(e)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(e)||function(t,e){if(t){if("string"==typeof t)return g(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?g(t,e):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(e){return"x"===n.placementState.axis?t+e:t+10*e}));if(this.p1.board.checkCollisions(a,this.placementState.axis))i.valid=!0,i.viewLocs=a;else if("y"===this.placementState.axis)i.viewLocs=a.filter((function(t){return t<100}));else{var s=a[0];i.viewLocs=s<10?a.filter((function(t){return t<10})):a.filter((function(t){return t.toString()[0]===s.toString()[0]}))}}return i}},{key:"placeShip",value:function(t){var e={};if(this.p1.board.placeShip(this.placementState.currentShip,t,this.placementState.axis),e.board=this.p1.board.board,5===this.p1.board.getShipsPlaced().length)e.nextShip=null,this.placementState.allShipsPlaced=!0;else{var n=(0,r.getNextShip)(this.placementState.currentShip);this.placementState.currentShip=n,e.nextShip=n}return e}},{key:"togglePlacementAxis",value:function(){this.placementState.axis="x"===this.placementState.axis?"y":"x"}},{key:"randomizePlayerShips",value:function(){return this.p1.board.initBoard(),this.p1.board.placeShipsRandomly(),this.placementState.allShipsPlaced=!0,this.p1.board.board}},{key:"resetPlayerBoard",value:function(){return this.p1.board.initBoard(),this.placementState={axis:"x",currentShip:"carrier",allShipsPlaced:!1},this.p1.board.board}},{key:"setupGame",value:function(){this.view.renderBoard(this.p1),this.view.renderStartScreen(),this.view.bindMouseOverCell(this.checkValidPlacement.bind(this)),this.view.bindPressSpaceKey(this.togglePlacementAxis.bind(this)),this.view.bindClickPlacementCell(this.placeShip.bind(this)),this.view.bindClickRandomButton(this.randomizePlayerShips.bind(this)),this.view.bindClickResetButton(this.resetPlayerBoard.bind(this)),this.view.bindClickStartButton(this.startGame.bind(this))}},{key:"startGame",value:function(){this.p2.board.placeShipsRandomly(),this.view.resetBoardEventListeners(this.p1.name),this.view.renderBoard(this.p1),this.view.renderBoardInfo(this.p1),this.view.renderBoard(this.p2),this.view.renderBoardInfo(this.p2),this.view.bindClickOpponentCell(this.playPlayerTurn.bind(this),this.p1),this.view.bindClickOpponentCell(this.playComputerTurn.bind(this),this.p2),this.view.bindClickRestartButton(this.restartGame.bind(this))}},{key:"restartGame",value:function(){this.init(),this.setupGame()}}])&&C(n.prototype,i),Object.defineProperty(n,"prototype",{writable:!1}),t}();var S=n(379),k=n.n(S),B=n(795),x=n.n(B),E=n(569),j=n.n(E),P=n(565),T=n.n(P),M=n(216),L=n.n(M),I=n(589),O=n.n(I),R=n(756),W={};W.styleTagTransform=O(),W.setAttributes=T(),W.insert=j().bind(null,"head"),W.domAPI=x(),W.insertStyleElement=L(),k()(R.Z,W),R.Z&&R.Z.locals&&R.Z.locals,(new w).setupGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,