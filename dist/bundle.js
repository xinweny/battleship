(()=>{var t={21:(t,e,n)=>{function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function o(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=a(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,l=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return s=t.done,t},e:function(t){l=!0,i=t},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw i}}}}function i(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||a(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(t,e){if(t){if("string"==typeof t)return s(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(t,e):void 0}}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function l(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==r(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===r(i)?i:String(i)),o)}var i}var c=n(883),u=n(167).checkEdgeCollisions,p=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.board=[],this.ships={carrier:new c(5,"carrier"),battleship:new c(4,"battleship"),cruiser:new c(3,"cruiser"),submarine:new c(3,"submarine"),patrolBoat:new c(2,"patrolBoat")},this.initBoard()}var e,n;return e=t,(n=[{key:"placeShip",value:function(t,e,n){var r=this.ships[t];r.place();var a=i(Array(r.length).keys()).map((function(t){return"x"===n?e+t:e+10*t}));if(this.checkCollisions(a,n,this.board)){var s,l=o(a);try{for(l.s();!(s=l.n()).done;){var c=s.value;this.board[c].ship=r.name}}catch(t){l.e(t)}finally{l.f()}return!0}return!1}},{key:"getShipsPlaced",value:function(){var t=this;return Object.keys(this.ships).filter((function(e){return t.ships[e].isPlaced}))}},{key:"initBoard",value:function(){var t=this;this.board=[];for(var e=0;e<100;e+=1)this.board.push({ship:null,isShot:!1});Object.keys(this.ships).forEach((function(e){t.ships[e].isPlaced=!1}))}},{key:"isShotHit",value:function(t){return this.board[t].isShot&&null!=this.board[t].ship}},{key:"receiveAttack",value:function(t){var e={ship:null,cell:t};if(!this.board[t].isShot){this.board[t].isShot=!0;var n=this.board[t].ship;if(n){var r=this.ships[n];e.ship=r,r.hit()}else e.ship=null}return e}},{key:"shipAt",value:function(t){return this.ships[this.board[t].ship]}},{key:"shipsSunk",value:function(){var t=this,e=0;return Object.keys(this.ships).forEach((function(n){t.ships[n].isSunk()&&(e+=1)})),e}},{key:"placeShipsRandomly",value:function(){var t=this,e=["x","y"],n=i(Array(100).keys());Object.keys(this.ships).forEach((function(r){for(var o=!1;!o;){var i=n[Math.floor(100*Math.random())],a=e[Math.floor(2*Math.random())];o=t.placeShip(r,i,a)}}))}},{key:"checkCollisions",value:function(t,e){if(!u(t,e))return!1;var n,r=o(t);try{for(r.s();!(n=r.n()).done;){var i=n.value;if(null!=this.board[i].ship)return!1}}catch(t){r.e(t)}finally{r.f()}return!0}}])&&l(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();t.exports=p},779:(t,e,n)=>{function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}function o(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==r(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===r(i)?i:String(i)),o)}var i}var i=n(21),a=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.board=new i,this.ships=this.board.ships,this.name=e?"p2":"p1",this.movesMade=[],e&&(this.AI=e)}var e,n;return e=t,(n=[{key:"fireShot",value:function(t,e){var n=t.board.receiveAttack(e);return this.movesMade.push(n),n}},{key:"getCell",value:function(t){return this.board.board[t]}}])&&o(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();t.exports=a},883:t=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(t)}function n(t,n){for(var r=0;r<n.length;r++){var o=n[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,n){if("object"!==e(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,"string");if("object"!==e(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===e(i)?i:String(i)),o)}var i}var r=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.length=e,this.name=n,this.hits=0,this.sunk=!1,this.isPlaced=!1}var e,r;return e=t,(r=[{key:"hit",value:function(){this.hits+=1,this.hits===this.length&&(this.sunk=!0)}},{key:"isSunk",value:function(){return this.sunk}},{key:"place",value:function(){this.isPlaced=!0}}])&&n(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();t.exports=r},167:(t,e,n)=>{"use strict";function r(t){return function(t){if(Array.isArray(t))return i(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||o(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t,e){if(t){if("string"==typeof t)return i(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(t,e):void 0}}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function a(t,e){var n,r=function(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=o(t))){n&&(t=n);var r=0,i=function(){};return{s:i,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,s=!0,l=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return s=t.done,t},e:function(t){l=!0,a=t},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw a}}}}(t);try{for(r.s();!(n=r.n()).done;){var i=n.value;if(i<0||i>99)return!1}}catch(t){r.e(t)}finally{r.f()}if(1===t.length)return!0;if("x"===e||1===e||-1===e){var a=t.map((function(t){return t.toString()}));if(a.some((function(t){return"9"===t.slice(-1)&&a.indexOf(t)!==a.length-1})))return!1}return!0}function s(t,e){var n=document.createElement(t);return e&&(n.className=e),n}function l(t){return t[Math.floor(Math.random()*t.length)]}function c(t){var e=t.filter((function(t){return null!=t.ship&&!t.ship.isSunk()}));return e.length>0?r(new Set(e.map((function(t){return t.ship})))):[]}n.r(e),n.d(e,{checkEdgeCollisions:()=>a,createElement:()=>s,getActiveShips:()=>c,getNextShip:()=>p,projectShipLocs:()=>f,randElement:()=>l,shipLengths:()=>u});var u={carrier:5,battleship:4,cruiser:3,submarine:3,patrolBoat:2};function p(t){var e=Object.keys(u),n=e.indexOf(t);return n<4?e[n+1]:e[n]}function f(t,e,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;return r(Array(n).keys()).map((function(n){return t+e*(n+o)}))}},411:(t,e,n)=>{"use strict";n.d(e,{Z:()=>u});var r=n(537),o=n.n(r),i=n(645),a=n.n(i),s=n(131),l=n(561),c=a()(o());c.i(s.Z),c.i(l.Z),c.push([t.id,"#body {\n\tdisplay: grid;\n\tgrid-template-rows: auto 1fr;\n\tbackground-color: rgb(221, 175, 252);\n}\n\n#body, button {\n\tfont-family: 'TypoRoundLight', sans-serif;\n}\n\nbutton {\n\tborder: none;\n\tbackground-color: transparent;\n}","",{version:3,sources:["webpack://./src/styles/components/body.css"],names:[],mappings:"AAGA;CACC,aAAa;CACb,4BAA4B;CAC5B,oCAAoC;AACrC;;AAEA;CACC,yCAAyC;AAC1C;;AAEA;CACC,YAAY;CACZ,6BAA6B;AAC9B",sourcesContent:["@import './message-window.css';\n@import './game-window.css';\n\n#body {\n\tdisplay: grid;\n\tgrid-template-rows: auto 1fr;\n\tbackground-color: rgb(221, 175, 252);\n}\n\n#body, button {\n\tfont-family: 'TypoRoundLight', sans-serif;\n}\n\nbutton {\n\tborder: none;\n\tbackground-color: transparent;\n}"],sourceRoot:""}]);const u=c},760:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,"#footer {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tgap: 8px;\n\tpadding: 8px;\n\tfont-family: 'TypoRoundLight', sans-serif;\n\tbackground-color: rgb(113, 47, 255);\n\tcolor: white;\n}\n\n#github-logo {\n\twidth: 25px;\n\theight: 25px;\n}\n\n#footer > p > a {\n\tcolor: rgb(177, 246, 255);\n\tfont-weight: bold;\n}","",{version:3,sources:["webpack://./src/styles/components/footer.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,mBAAmB;CACnB,uBAAuB;CACvB,QAAQ;CACR,YAAY;CACZ,yCAAyC;CACzC,mCAAmC;CACnC,YAAY;AACb;;AAEA;CACC,WAAW;CACX,YAAY;AACb;;AAEA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["#footer {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tgap: 8px;\n\tpadding: 8px;\n\tfont-family: 'TypoRoundLight', sans-serif;\n\tbackground-color: rgb(113, 47, 255);\n\tcolor: white;\n}\n\n#github-logo {\n\twidth: 25px;\n\theight: 25px;\n}\n\n#footer > p > a {\n\tcolor: rgb(177, 246, 255);\n\tfont-weight: bold;\n}"],sourceRoot:""}]);const s=a},3:(t,e,n)=>{"use strict";n.d(e,{Z:()=>h});var r=n(537),o=n.n(r),i=n(645),a=n.n(i),s=n(667),l=n.n(s),c=new URL(n(342),n.b),u=new URL(n(688),n.b),p=a()(o()),f=l()(c),d=l()(u);p.push([t.id,".game-board {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(10, 1fr);\n\tgrid-template-columns: repeat(10, 1fr);\n\tgap: 2px;\n\tbackground-color: skyblue;\n\tpadding: 4px;\n\tborder: 4px solid navy;\n\tborder-radius: 4px;\n\tmargin-bottom: 8px;\n}\n\n.cell {\n\tposition: relative;\n\twidth: 30px;\n\theight: 30px;\n\tbackground-color: white;\n\tborder-radius: 4px;\n}\n\n#p1-board .cell.has-ship, #p2-board .cell.has-ship.hit {\n\tbackground-color: #3343AE;\n}\n\n.cell.valid {\n\tbackground-color: rgb(147, 255, 248);\n}\n\n.cell.invalid {\n\tbackground-color: rgb(255, 92, 92);\n}\n\n#p1-board .cell.has-ship.hit::after, #p2-board .cell.has-ship.hit::after {\n\tcontent: url("+f+");\n\tposition: absolute; \n\tinset: 0;\n\tmargin: auto;\n\twidth: 30px;\n\theight: 30px;\n}\n\n.cell.hit::after {\n\tcontent: url("+d+");\n\tposition: absolute; \n\tinset: 0;\n\tmargin: auto;\n\twidth: 30px;\n\theight: 30px;\n}","",{version:3,sources:["webpack://./src/styles/components/game-board.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,mCAAmC;CACnC,sCAAsC;CACtC,QAAQ;CACR,yBAAyB;CACzB,YAAY;CACZ,sBAAsB;CACtB,kBAAkB;CAClB,kBAAkB;AACnB;;AAEA;CACC,kBAAkB;CAClB,WAAW;CACX,YAAY;CACZ,uBAAuB;CACvB,kBAAkB;AACnB;;AAEA;CACC,yBAAyB;AAC1B;;AAEA;CACC,oCAAoC;AACrC;;AAEA;CACC,kCAAkC;AACnC;;AAEA;CACC,gDAAsC;CACtC,kBAAkB;CAClB,QAAQ;CACR,YAAY;CACZ,WAAW;CACX,YAAY;AACb;;AAEA;CACC,gDAAoC;CACpC,kBAAkB;CAClB,QAAQ;CACR,YAAY;CACZ,WAAW;CACX,YAAY;AACb",sourcesContent:[".game-board {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(10, 1fr);\n\tgrid-template-columns: repeat(10, 1fr);\n\tgap: 2px;\n\tbackground-color: skyblue;\n\tpadding: 4px;\n\tborder: 4px solid navy;\n\tborder-radius: 4px;\n\tmargin-bottom: 8px;\n}\n\n.cell {\n\tposition: relative;\n\twidth: 30px;\n\theight: 30px;\n\tbackground-color: white;\n\tborder-radius: 4px;\n}\n\n#p1-board .cell.has-ship, #p2-board .cell.has-ship.hit {\n\tbackground-color: #3343AE;\n}\n\n.cell.valid {\n\tbackground-color: rgb(147, 255, 248);\n}\n\n.cell.invalid {\n\tbackground-color: rgb(255, 92, 92);\n}\n\n#p1-board .cell.has-ship.hit::after, #p2-board .cell.has-ship.hit::after {\n\tcontent: url('../../assets/cross.svg');\n\tposition: absolute; \n\tinset: 0;\n\tmargin: auto;\n\twidth: 30px;\n\theight: 30px;\n}\n\n.cell.hit::after {\n\tcontent: url('../../assets/dot.svg');\n\tposition: absolute; \n\tinset: 0;\n\tmargin: auto;\n\twidth: 30px;\n\theight: 30px;\n}"],sourceRoot:""}]);const h=p},561:(t,e,n)=>{"use strict";n.d(e,{Z:()=>c});var r=n(537),o=n.n(r),i=n(645),a=n.n(i),s=n(3),l=a()(o());l.i(s.Z),l.push([t.id,"#game-window h2 {\n\ttext-align: center;\n}\n\n#game-window {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-around;\n\tflex-wrap: wrap;\n}\n\n.game-buttons {\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr;\n\tgrid-template-rows: auto auto;\n}\n\n.game-buttons button {\n\tfont-size: 16px;\n}\n\n.game-buttons button:hover {\n\tcolor: white;\n}\n\n.board-info {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(2, min-content);\n\tgrid-template-columns: repeat(5, 1fr);\n}\n\n.board-info p {\n\tfont-size: 8px;\n}\n\n.progress-meter {\n\twidth: 50px;\n}","",{version:3,sources:["webpack://./src/styles/components/game-window.css"],names:[],mappings:"AAEA;CACC,kBAAkB;AACnB;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,6BAA6B;CAC7B,eAAe;AAChB;;AAEA;CACC,aAAa;CACb,8BAA8B;CAC9B,6BAA6B;AAC9B;;AAEA;CACC,eAAe;AAChB;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,aAAa;CACb,0CAA0C;CAC1C,qCAAqC;AACtC;;AAEA;CACC,cAAc;AACf;;AAEA;CACC,WAAW;AACZ",sourcesContent:["@import './game-board.css';\n\n#game-window h2 {\n\ttext-align: center;\n}\n\n#game-window {\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-around;\n\tflex-wrap: wrap;\n}\n\n.game-buttons {\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr;\n\tgrid-template-rows: auto auto;\n}\n\n.game-buttons button {\n\tfont-size: 16px;\n}\n\n.game-buttons button:hover {\n\tcolor: white;\n}\n\n.board-info {\n\tdisplay: grid;\n\tgrid-template-rows: repeat(2, min-content);\n\tgrid-template-columns: repeat(5, 1fr);\n}\n\n.board-info p {\n\tfont-size: 8px;\n}\n\n.progress-meter {\n\twidth: 50px;\n}"],sourceRoot:""}]);const c=l},637:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,"#header {\n\tpadding: 16px;\n\tbackground-color: rgb(113, 47, 255);\n\tcolor: white;\n}\n\n#header h1 {\n\tmargin-left: 24px;\n\tfont-family: 'AristaPro', sans-serif;\n\tfont-size: 48px;\n}\n\n","",{version:3,sources:["webpack://./src/styles/components/header.css"],names:[],mappings:"AAAA;CACC,aAAa;CACb,mCAAmC;CACnC,YAAY;AACb;;AAEA;CACC,iBAAiB;CACjB,oCAAoC;CACpC,eAAe;AAChB",sourcesContent:["#header {\n\tpadding: 16px;\n\tbackground-color: rgb(113, 47, 255);\n\tcolor: white;\n}\n\n#header h1 {\n\tmargin-left: 24px;\n\tfont-family: 'AristaPro', sans-serif;\n\tfont-size: 48px;\n}\n\n"],sourceRoot:""}]);const s=a},131:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,"#message-window {\n\theight: 48px;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr auto auto;\n\tmargin-bottom: 16px;\n\tbackground-color: rgb(58, 13, 156);\n\tcolor: white;\n\tgap: 24px;\n}\n\n.game-message {\n\ttext-align: center;\n\tmargin: auto;\n\tfont-size: 20px;\n}\n\n#message-window button {\n\tcolor: white;\n\tmargin-top: auto;\n\tmargin-bottom: auto;\n}\n\n.start-button {\n\tfont-size: 24px;\n}\n\n#turn-counter {\n\tmargin: auto;\n}\n\n.restart-button {\n\tfont-size: 16px;\n\tmargin-right: 16px;\n}","",{version:3,sources:["webpack://./src/styles/components/message-window.css"],names:[],mappings:"AAAA;CACC,YAAY;CACZ,aAAa;CACb,oCAAoC;CACpC,mBAAmB;CACnB,kCAAkC;CAClC,YAAY;CACZ,SAAS;AACV;;AAEA;CACC,kBAAkB;CAClB,YAAY;CACZ,eAAe;AAChB;;AAEA;CACC,YAAY;CACZ,gBAAgB;CAChB,mBAAmB;AACpB;;AAEA;CACC,eAAe;AAChB;;AAEA;CACC,YAAY;AACb;;AAEA;CACC,eAAe;CACf,kBAAkB;AACnB",sourcesContent:["#message-window {\n\theight: 48px;\n\tdisplay: grid;\n\tgrid-template-columns: 1fr auto auto;\n\tmargin-bottom: 16px;\n\tbackground-color: rgb(58, 13, 156);\n\tcolor: white;\n\tgap: 24px;\n}\n\n.game-message {\n\ttext-align: center;\n\tmargin: auto;\n\tfont-size: 20px;\n}\n\n#message-window button {\n\tcolor: white;\n\tmargin-top: auto;\n\tmargin-bottom: auto;\n}\n\n.start-button {\n\tfont-size: 24px;\n}\n\n#turn-counter {\n\tmargin: auto;\n}\n\n.restart-button {\n\tfont-size: 16px;\n\tmargin-right: 16px;\n}"],sourceRoot:""}]);const s=a},756:(t,e,n)=>{"use strict";n.d(e,{Z:()=>g});var r=n(537),o=n.n(r),i=n(645),a=n.n(i),s=n(637),l=n(411),c=n(760),u=n(667),p=n.n(u),f=new URL(n(549),n.b),d=new URL(n(813),n.b),h=new URL(n(954),n.b),m=new URL(n(227),n.b),A=a()(o());A.i(s.Z),A.i(l.Z),A.i(c.Z);var y=p()(f),b=p()(d),v=p()(h),C=p()(m);A.push([t.id,"* {\n\tpadding: 0;\n\tmargin: 0;\n}\n\n@font-face {\n  font-family: 'TypoRoundLight';\n  src: url("+y+") format('woff2'),\n       url("+b+") format('woff');\n}\n\n@font-face {\n  font-family: 'AristaPro';\n  src: url("+v+") format('woff2'),\n       url("+C+") format('woff');\n}\n\na {\n\ttext-decoration: none;\n}\n\nbody {\n\theight: 100vh;\n\twidth: 100vw;\n\tdisplay: grid;\n\tgrid-template-rows: auto 1fr auto;\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAIA;CACC,UAAU;CACV,SAAS;AACV;;AAEA;EACE,6BAA6B;EAC7B;6DACgE;AAClE;;AAEA;EACE,wBAAwB;EACxB;6DACkE;AACpE;;AAEA;CACC,qBAAqB;AACtB;;AAEA;CACC,aAAa;CACb,YAAY;CACZ,aAAa;CACb,iCAAiC;AAClC",sourcesContent:["@import './components/header.css';\n@import './components/body.css';\n@import './components/footer.css';\n\n* {\n\tpadding: 0;\n\tmargin: 0;\n}\n\n@font-face {\n  font-family: 'TypoRoundLight';\n  src: url('../assets/fonts/typo-round-light.woff2') format('woff2'),\n       url('../assets/fonts/typo-round-light.woff') format('woff');\n}\n\n@font-face {\n  font-family: 'AristaPro';\n  src: url('../assets/fonts/arista-pro-regular.woff2') format('woff2'),\n       url('../assets/fonts/arista-pro-regular.woff') format('woff');\n}\n\na {\n\ttext-decoration: none;\n}\n\nbody {\n\theight: 100vh;\n\twidth: 100vw;\n\tdisplay: grid;\n\tgrid-template-rows: auto 1fr auto;\n}"],sourceRoot:""}]);const g=A},645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<t.length;c++){var u=[].concat(t[c]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{"use strict";t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:t=>{"use strict";var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},a=[],s=0;s<t.length;s++){var l=t[s],c=r.base?l[0]+r.base:l[0],u=i[c]||0,p="".concat(c," ").concat(u);i[c]=u+1;var f=n(p),d={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)e[f].references++,e[f].updater(d);else{var h=o(d,r);r.byIndex=s,e.splice(s,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=n(i[a]);e[s].references--}for(var l=r(t,o),c=0;c<i.length;c++){var u=n(i[c]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=l}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},342:(t,e,n)=>{"use strict";t.exports=n.p+"assets/cross.svg"},688:(t,e,n)=>{"use strict";t.exports=n.p+"assets/dot.svg"},227:(t,e,n)=>{"use strict";t.exports=n.p+"a8de1ea51c5ef52c12b5.woff"},954:(t,e,n)=>{"use strict";t.exports=n.p+"27bc98208f3a618fe52e.woff2"},813:(t,e,n)=>{"use strict";t.exports=n.p+"526662fb4d367efb7226.woff"},549:(t,e,n)=>{"use strict";t.exports=n.p+"53019bd3fac6c9a75505.woff2"}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{"use strict";var t=n(779),e=n.n(t),r=n(167);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function i(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=a(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,l=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return s=t.done,t},e:function(t){l=!0,i=t},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw i}}}}function a(t,e){if(t){if("string"==typeof t)return s(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(t,e):void 0}}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,i=function(t,e){if("object"!==o(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==o(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===o(i)?i:String(i)),r)}var i}const c=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var e=(0,r.createElement)("button","start-button");e.innerText="Start Game";var n=(0,r.createElement)("button","restart-button");n.innerText="Restart";var o=(0,r.createElement)("p");o.id="turn-counter",o.innerText="Turn 1",this.elements={p1GameWindow:document.getElementById("p1-window"),p2GameWindow:document.getElementById("p2-window"),p1Board:document.getElementById("p1-board"),p2Board:document.getElementById("p2-board"),messageWindow:document.getElementById("message-window"),gameMessage:document.querySelector(".game-message"),startButton:e,restartButton:n,turnCounter:o}}var e,n;return e=t,n=[{key:"renderBoard",value:function(t){var e=document.getElementById("".concat(t.name,"-board"));e.innerHTML="",this.elements["".concat(t.name,"GameWindow")].style.display="block";for(var n=t.board.board,o=0;o<100;o+=1){var i=(0,r.createElement)("div","cell");i.setAttribute("data-index",o),n[o].ship&&i.classList.add("has-ship"),e.append(i)}}},{key:"colorBoard",value:function(t){for(var e=0;e<100;e+=1){var n=this.elements.p1Board.children[e];n.className="cell",null!=t[e].ship&&n.classList.add("has-ship")}}},{key:"setMessage",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e&&this.renderInMessageWindow(this.elements.gameMessage),this.elements.gameMessage.innerText=t}},{key:"renderStartScreen",value:function(){this.setMessage("Place your carrier (Press space to rotate)",!0);var t=(0,r.createElement)("div","game-buttons"),e=(0,r.createElement)("button","random-button");e.innerText="Random";var n=(0,r.createElement)("button","reset-button");n.innerText="Reset",t.append(e),t.append(n),this.elements.randomButton=e,this.elements.resetButton=n,this.elements.p1GameWindow.append(t),this.elements.p2GameWindow.style.display="none"}},{key:"renderInMessageWindow",value:function(t){this.elements.messageWindow.innerHTML="",this.elements.messageWindow.append(t)}},{key:"renderBoardInfo",value:function(t){var e=(0,r.createElement)("div","board-info");e.id="".concat(t.name,"-board-info");var n=t.ships;Object.keys(n).forEach((function(t){var n="patrolBoat"===t?"patrol boat":t,o=(0,r.createElement)("p","ship-name");o.innerText=n,e.append(o)})),Object.keys(n).forEach((function(o){var i=(0,r.createElement)("meter","progress-meter");i.id="".concat(t.name,"-").concat(o,"-meter"),i.setAttribute("value",0),i.setAttribute("min",0),i.setAttribute("max",n[o].length),e.append(i)})),this.elements["".concat(t.name,"GameWindow")].append(e)}},{key:"bindMouseOverCell",value:function(t){var e,n=this,r=i(this.elements.p1Board.children);try{for(r.s();!(e=r.n()).done;)e.value.addEventListener("mouseover",(function(e){var r=parseInt(e.target.dataset.index,10),o=t(r);if(o.viewLocs){var a,s=o.valid?"valid":"invalid",l=i(o.boardState);try{for(l.s();!(a=l.n()).done;){var c=a.value,u=o.boardState.indexOf(c),p=n.elements.p1Board.querySelector('.cell[data-index="'.concat(u,'"]'));o.viewLocs.includes(u)&&!c.ship?p.classList.add(s):c.ship?p.classList.add("has-ship"):p.className="cell"}}catch(t){l.e(t)}finally{l.f()}}}))}catch(t){r.e(t)}finally{r.f()}}},{key:"bindPressSpaceKey",value:function(t){document.addEventListener("keyup",(function(e){if("Space"===e.code){var n=(o=document.querySelectorAll(":hover"),function(t){if(Array.isArray(t))return s(t)}(o)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(o)||a(o)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).slice(-1)[0];if(n.classList.contains("cell")){t();var r=new Event("mouseover");n.dispatchEvent(r)}}var o}))}},{key:"bindClickPlacementCell",value:function(t){var e=this;this.elements.p1Board.addEventListener("click",(function(n){var r=parseInt(n.target.dataset.index,10);if(e.elements.p1Board.children[r].classList.contains("valid")){var o=t(r);e.colorBoard(o.board);var i="patrolBoat"===o.nextShip?"patrol boat":o.nextShip;null!=i?e.setMessage("Place your ".concat(i," (Press space to rotate)")):e.renderInMessageWindow(e.elements.startButton)}}))}},{key:"bindClickOpponentCell",value:function(t,e){var n,r=this,o=i("p1"===e.name?this.elements.p2Board.children:this.elements.p1Board.children);try{var a=function(){var o=n.value;o.addEventListener("click",(function(n){var i=parseInt(n.target.dataset.index,10),a=t(i);if(a.validMove){var s=a.opponent.board.board,l=s[i].ship;if("p1"===e.name&&(r.elements.turnCounter.innerText="Turn ".concat(a.turnCount)),o.classList.add("hit"),l&&s[i].isShot){var c="patrolBoat"===l?"patrol boat":l;r.setMessage("You hit the ".concat(c));var u=document.getElementById("".concat(a.opponent.name,"-").concat(l,"-meter")),p=parseInt(u.getAttribute("value"),10)+1;if(u.setAttribute("value",p),a.winner){var f="p1"===e.name?"You won!":"You lost...";r.setMessage(f),r.resetBoardEventListeners("p2")}}else a.winner||r.setMessage("")}else"p1"!==e.name||a.winner||r.setMessage("You already shot at that cell")}))};for(o.s();!(n=o.n()).done;)a()}catch(t){o.e(t)}finally{o.f()}}},{key:"bindClickRandomButton",value:function(t){var e=this;this.elements.randomButton.addEventListener("click",(function(){var n=t();e.colorBoard(n),e.elements.messageWindow.innerHTML="",e.elements.messageWindow.append(e.elements.startButton)}))}},{key:"bindClickResetButton",value:function(t){var e=this;this.elements.resetButton.addEventListener("click",(function(){var n=t();e.colorBoard(n),e.setMessage("Place your carrier (Press space to rotate)",!0)}))}},{key:"bindClickStartButton",value:function(t){var e=this;this.elements.startButton.addEventListener("click",(function(){e.elements.p1GameWindow.removeChild(e.elements.p1GameWindow.lastChild);for(var n=0,o=["p1GameWindow","p2GameWindow"];n<o.length;n++){var i=o[n],a=(0,r.createElement)("p","window-label");a.innerText="p1GameWindow"===i?"Computer":"Player",e.elements[i].prepend(a)}t(),e.setMessage("Click to fire a shot",!0),e.elements.messageWindow.append(e.elements.turnCounter),e.elements.messageWindow.append(e.elements.restartButton)}))}},{key:"bindClickRestartButton",value:function(t){var e=this;this.elements.restartButton.addEventListener("click",(function(){for(var n=0,r=["p1GameWindow","p2GameWindow"];n<r.length;n++){var o=r[n],i=e.elements[o];i.removeChild(i.firstChild),i.removeChild(i.lastChild)}t()}))}},{key:"resetBoardEventListeners",value:function(t){var e=this.elements["".concat(t,"Board")],n=e.cloneNode(!0);e.parentNode.replaceChild(n,e),this.elements["".concat(t,"Board")]=n}},{key:"getCell",value:function(t,e){return this.elements["".concat(t,"Board")].children[e]}}],n&&l(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();var u=n(21),p=n.n(u);function f(t){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f(t)}function d(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=m(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,s=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){s=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw i}}}}function h(t){return function(t){if(Array.isArray(t))return A(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||m(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(t,e){if(t){if("string"==typeof t)return A(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?A(t,e):void 0}}function A(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function y(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==f(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==f(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===f(o)?o:String(o)),r)}var o}const b=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.cellsHit={carrier:[],battleship:[],cruiser:[],submarine:[],patrolBoat:[]},this.modelBoard=(new(p())).board,this.offsets=[-1,1,-10,10]}var e,n;return e=t,(n=[{key:"getRandomShot",value:function(t){var e=t.map((function(t){return t.cell})),n=h(Array(100).keys()).filter((function(t){return!e.includes(t)}));return(0,r.randElement)(n)}},{key:"getSmartShot",value:function(t){if(0===t.length)return this.getRandomShot(t);var e=null,n=t.slice(-1)[0],o=n.cell,i=n.ship;if(i&&!i.isSunk())this.cellsHit[i.name].push(o),this.modelBoard[o].ship=i,e=this.findSuitableMoves(i);else{var a=(0,r.getActiveShips)(t);if(a.length>0){var s=a.slice(-1)[0];e=this.findSuitableMoves(s)}else{var l=this.getUndiscoveredShipLengths(),c=(0,r.randElement)(l),u=this.modelValidPlacements(c);e=(0,r.randElement)((0,r.randElement)(u))}}return e}},{key:"findSuitableMoves",value:function(t){var e=this.cellsHit[t.name],n=[];if(1===e.length){var o,i=e[0],a=d(this.offsets);try{for(a.s();!(o=a.n()).done;){var s=o.value,l=this.findValidProjection(i,s,t.length-1);l&&n.push(l)}}catch(t){a.e(t)}finally{a.f()}}else{var c,u=[Math.min.apply(Math,h(e)),Math.max.apply(Math,h(e))];c=(u[1]-u[0])%10==0?this.offsets.slice(2):this.offsets.slice(0,2);for(var p=0;p<2;p+=1){var f=u[p],m=c[p],A=this.findValidProjection(f,m,t.length-e.length);null!=A&&n.push(A)}}return(0,r.randElement)(n)}},{key:"modelValidPlacements",value:function(t){var e,n=[],o=d(this.getEmptyLocs());try{for(o.s();!(e=o.n()).done;)for(var i=e.value,a=0,s=[1,10];a<s.length;a++){var l=s[a],c=(0,r.projectShipLocs)(i,l,t);this.checkCollisions(c,l)&&n.push(c)}}catch(t){o.e(t)}finally{o.f()}return n}},{key:"clickCell",value:function(t,e){this.modelBoard[t].isShot=!0,e.click()}},{key:"getUndiscoveredShipLengths",value:function(){var t=this,e=[];return Object.keys(this.cellsHit).forEach((function(n){var o=r.shipLengths[n];0===t.cellsHit[n].length&&e.push(o)})),e}},{key:"getEmptyLocs",value:function(){var t=this;return this.modelBoard.filter((function(t){return!t.isShot})).map((function(e){return t.modelBoard.indexOf(e)}))}},{key:"checkCollisions",value:function(t,e){if(!(0,r.checkEdgeCollisions)(t,e))return!1;var n,o=d(t);try{for(o.s();!(n=o.n()).done;){var i=n.value;if(this.modelBoard[i].isShot)return!1}}catch(t){o.e(t)}finally{o.f()}return!0}},{key:"findValidProjection",value:function(t,e,n){for(var o=n;o>0;){var i=(0,r.projectShipLocs)(t,e,o,1);if(this.checkCollisions(i,e))return t+e;o-=1}return null}}])&&y(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function v(t){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},v(t)}function C(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function g(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,(void 0,o=function(t,e){if("object"!==v(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==v(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(r.key),"symbol"===v(o)?o:String(o)),r)}var o}const w=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.init()}var n,o;return n=t,(o=[{key:"init",value:function(){this.p1=new(e()),this.p2=new(e())(new b),this.view=new c,this.turn="p1",this.turnCounter=1,this.winner=null,this.placementState={axis:"x",currentShip:"carrier",allShipsPlaced:!1}}},{key:"switchTurn",value:function(){this.turn="p1"===this.turn?"p2":"p1"}},{key:"checkWin",value:function(t){return 5===t.shipsSunk()&&(this.winner=this.turn),this.winner}},{key:"playPlayerTurn",value:function(t){if(null!=this.winner)return!1;var e=this.p2.board,n={validMove:!1,opponent:this.p2,winner:null};if(!e.board[t].isShot){if(n.validMove=!0,this.turnCounter+=1,this.p1.fireShot(this.p2,t),!this.checkWin(e)){this.switchTurn();var r=this.p2.AI.getSmartShot(this.p2.movesMade),o=this.view.getCell(this.p1.name,r);this.p2.AI.clickCell(r,o)}n.winner=this.winner}return n.turnCount=this.turnCounter,n}},{key:"playComputerTurn",value:function(t){if(null!=this.winner)return!1;var e={validMove:!1,opponent:this.p1,winner:null};return"p2"===this.turn&&(e.validMove=!0,this.p2.fireShot(this.p1,t),this.checkWin(this.p1.board)?e.winner=this.winner:this.switchTurn()),e}},{key:"checkValidPlacement",value:function(t){var e,n=this,o={valid:!1,boardState:this.p1.board.board};if(!this.placementState.allShipsPlaced){var i=r.shipLengths[this.placementState.currentShip],a=(e=Array(i).keys(),function(t){if(Array.isArray(t))return C(t)}(e)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(e)||function(t,e){if(t){if("string"==typeof t)return C(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?C(t,e):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(e){return"x"===n.placementState.axis?t+e:t+10*e}));if(this.p1.board.checkCollisions(a,this.placementState.axis))o.valid=!0,o.viewLocs=a;else if("y"===this.placementState.axis)o.viewLocs=a.filter((function(t){return t<100}));else{var s=a[0];o.viewLocs=s<10?a.filter((function(t){return t<10})):a.filter((function(t){return t.toString()[0]===s.toString()[0]}))}}return o}},{key:"placeShip",value:function(t){var e={};if(this.p1.board.placeShip(this.placementState.currentShip,t,this.placementState.axis),e.board=this.p1.board.board,5===this.p1.board.getShipsPlaced().length)e.nextShip=null,this.placementState.allShipsPlaced=!0;else{var n=(0,r.getNextShip)(this.placementState.currentShip);this.placementState.currentShip=n,e.nextShip=n}return e}},{key:"togglePlacementAxis",value:function(){this.placementState.axis="x"===this.placementState.axis?"y":"x"}},{key:"randomizePlayerShips",value:function(){return this.p1.board.initBoard(),this.p1.board.placeShipsRandomly(),this.placementState.allShipsPlaced=!0,this.p1.board.board}},{key:"resetPlayerBoard",value:function(){return this.p1.board.initBoard(),this.placementState={axis:"x",currentShip:"carrier",allShipsPlaced:!1},this.p1.board.board}},{key:"setupGame",value:function(){this.view.renderBoard(this.p1),this.view.renderStartScreen(),this.view.bindMouseOverCell(this.checkValidPlacement.bind(this)),this.view.bindPressSpaceKey(this.togglePlacementAxis.bind(this)),this.view.bindClickPlacementCell(this.placeShip.bind(this)),this.view.bindClickRandomButton(this.randomizePlayerShips.bind(this)),this.view.bindClickResetButton(this.resetPlayerBoard.bind(this)),this.view.bindClickStartButton(this.startGame.bind(this))}},{key:"startGame",value:function(){this.p2.board.placeShipsRandomly(),this.view.resetBoardEventListeners(this.p1.name),this.view.renderBoard(this.p1),this.view.renderBoardInfo(this.p1),this.view.renderBoard(this.p2),this.view.renderBoardInfo(this.p2),this.view.bindClickOpponentCell(this.playPlayerTurn.bind(this),this.p1),this.view.bindClickOpponentCell(this.playComputerTurn.bind(this),this.p2),this.view.bindClickRestartButton(this.restartGame.bind(this))}},{key:"restartGame",value:function(){this.init(),this.setupGame()}}])&&g(n.prototype,o),Object.defineProperty(n,"prototype",{writable:!1}),t}();var S=n(379),k=n.n(S),B=n(795),x=n.n(B),E=n(569),j=n.n(E),P=n(565),T=n.n(P),M=n(216),I=n.n(M),L=n(589),O=n.n(L),R=n(756),Y={};Y.styleTagTransform=O(),Y.setAttributes=T(),Y.insert=j().bind(null,"head"),Y.domAPI=x(),Y.insertStyleElement=I(),k()(R.Z,Y),R.Z&&R.Z.locals&&R.Z.locals,(new w).setupGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJrakVBQUEsSUFBTUEsRUFBT0MsRUFBUSxLQUNiQyxFQUF3QkQsRUFBUSxLQUFoQ0Msb0JBRUZDLEVBQVMsV0FDYixjLDRGQUFjLFNBQ1pDLEtBQUtDLE1BQVEsR0FFYkQsS0FBS0UsTUFBUSxDQUNYQyxRQUFTLElBQUlQLEVBQUssRUFBRyxXQUNyQlEsV0FBWSxJQUFJUixFQUFLLEVBQUcsY0FDeEJTLFFBQVMsSUFBSVQsRUFBSyxFQUFHLFdBQ3JCVSxVQUFXLElBQUlWLEVBQUssRUFBRyxhQUN2QlcsV0FBWSxJQUFJWCxFQUFLLEVBQUcsZUFHMUJJLEtBQUtRLFdBQ1AsQyxRQXlHQyxPLEVBekdBLEcsRUFBQSx3QkFFRCxTQUFVQyxFQUFVQyxFQUFPQyxHQUN6QixJQUFNQyxFQUFPWixLQUFLRSxNQUFNTyxHQUN4QkcsRUFBS0MsUUFFTCxJQUFNQyxFQUFPLEVBQUlDLE1BQU1ILEVBQUtJLFFBQVFDLFFBQVFDLEtBQUksU0FBQ0MsR0FBQyxNQUFnQixNQUFUUixFQUFnQkQsRUFBUVMsRUFBSVQsRUFBYSxHQUFKUyxDQUFPLElBSXJHLEdBRmdCbkIsS0FBS29CLGdCQUFnQk4sRUFBTUgsRUFBTVgsS0FBS0MsT0FFekMsS0FDVyxFQURYLElBQ09hLEdBQUksSUFBdEIsSUFBSyxFQUFMLHFCQUF3QixLQUFiTyxFQUFHLFFBQ1pyQixLQUFLQyxNQUFNb0IsR0FBS1QsS0FBT0EsRUFBS1UsSUFDOUIsQ0FBQywrQkFFRCxPQUFPLENBQ1QsQ0FFQSxPQUFPLENBQ1QsR0FBQyw0QkFFRCxXQUFpQixXQUNmLE9BQU9DLE9BQU9OLEtBQUtqQixLQUFLRSxPQUFPc0IsUUFBTyxTQUFDWixHQUFJLE9BQUssRUFBS1YsTUFBTVUsR0FBTWEsUUFBUSxHQUMzRSxHQUFDLHVCQUVELFdBQVksV0FDVnpCLEtBQUtDLE1BQVEsR0FFYixJQUFLLElBQUl5QixFQUFJLEVBQUdBLEVBQUksSUFBS0EsR0FBSyxFQUM1QjFCLEtBQUtDLE1BQU0wQixLQUFLLENBQUVmLEtBQU0sS0FBTWdCLFFBQVEsSUFHeENMLE9BQU9OLEtBQUtqQixLQUFLRSxPQUFPMkIsU0FBUSxTQUFDakIsR0FDL0IsRUFBS1YsTUFBTVUsR0FBTWEsVUFBVyxDQUM5QixHQUNGLEdBQUMsdUJBRUQsU0FBVUosR0FDUixPQUFPckIsS0FBS0MsTUFBTW9CLEdBQUtPLFFBQWtDLE1BQXhCNUIsS0FBS0MsTUFBTW9CLEdBQUtULElBQ25ELEdBQUMsMkJBRUQsU0FBY1MsR0FDWixJQUFNUyxFQUFXLENBQ2ZsQixLQUFNLEtBQ05tQixLQUFNVixHQUdSLElBQUtyQixLQUFLQyxNQUFNb0IsR0FBS08sT0FBUSxDQUMzQjVCLEtBQUtDLE1BQU1vQixHQUFLTyxRQUFTLEVBRXpCLElBQU1JLEVBQVNoQyxLQUFLQyxNQUFNb0IsR0FBS1QsS0FFL0IsR0FBSW9CLEVBQVEsQ0FDVixJQUFNcEIsRUFBT1osS0FBS0UsTUFBTThCLEdBRXhCRixFQUFTbEIsS0FBT0EsRUFDaEJBLEVBQUtxQixLQUNQLE1BQ0VILEVBQVNsQixLQUFPLElBRXBCLENBRUEsT0FBT2tCLENBQ1QsR0FBQyxvQkFFRCxTQUFPVCxHQUNMLE9BQU9yQixLQUFLRSxNQUFNRixLQUFLQyxNQUFNb0IsR0FBS1QsS0FDcEMsR0FBQyx1QkFFRCxXQUFZLFdBQ05zQixFQUFPLEVBUVgsT0FOQVgsT0FBT04sS0FBS2pCLEtBQUtFLE9BQU8yQixTQUFRLFNBQUNwQixHQUMzQixFQUFLUCxNQUFNTyxHQUFVMEIsV0FDdkJELEdBQVEsRUFFWixJQUVPQSxDQUNULEdBQUMsZ0NBRUQsV0FBcUIsV0FDYkUsRUFBTyxDQUFDLElBQUssS0FDYkMsRUFBUSxFQUFJdEIsTUFBTSxLQUFLRSxRQUU3Qk0sT0FBT04sS0FBS2pCLEtBQUtFLE9BQU8yQixTQUFRLFNBQUNwQixHQUcvQixJQUZBLElBQUk2QixHQUFpQixHQUViQSxHQUFnQixDQUN0QixJQUFNakIsRUFBTWdCLEVBQU1FLEtBQUtDLE1BQXNCLElBQWhCRCxLQUFLRSxXQUM1QjlCLEVBQU95QixFQUFLRyxLQUFLQyxNQUFzQixFQUFoQkQsS0FBS0UsV0FFbENILEVBQWlCLEVBQUtJLFVBQVVqQyxFQUFVWSxFQUFLVixFQUNqRCxDQUNGLEdBQ0YsR0FBQyw2QkFFRCxTQUFnQkcsRUFBTUgsR0FDcEIsSUFBS2IsRUFBb0JnQixFQUFNSCxHQUFPLE9BQU8sRUFBTSxJQUU3QixFQUY2QixJQUVqQ0csR0FBSSxJQUF0QixJQUFLLEVBQUwscUJBQXdCLEtBQWJPLEVBQUcsUUFDWixHQUE0QixNQUF4QnJCLEtBQUtDLE1BQU1vQixHQUFLVCxLQUFjLE9BQU8sQ0FDM0MsQ0FBQywrQkFFRCxPQUFPLENBQ1QsTSxvRUFBQyxFQXRIWSxHQXlIZitCLEVBQU9DLFFBQVU3QyxDLG1yQkM1SGpCLElBQU1BLEVBQVlGLEVBQVEsSUFFcEJnRCxFQUFNLFdBQ1YsV0FBWUMsSSw0RkFBSSxTQUNkOUMsS0FBS0MsTUFBUSxJQUFJRixFQUNqQkMsS0FBS0UsTUFBUUYsS0FBS0MsTUFBTUMsTUFDeEJGLEtBQUtzQixLQUFPd0IsRUFBSyxLQUFPLEtBQ3hCOUMsS0FBSytDLFVBQVksR0FFYkQsSUFDRjlDLEtBQUtnRCxHQUFLRixFQUVkLEMsUUFXQyxPLEVBWEEsRyxFQUFBLHVCQUVELFNBQVNHLEVBQVU1QixHQUNqQixJQUFNUyxFQUFXbUIsRUFBU2hELE1BQU1pRCxjQUFjN0IsR0FHOUMsT0FGQXJCLEtBQUsrQyxVQUFVcEIsS0FBS0csR0FFYkEsQ0FDVCxHQUFDLHFCQUVELFNBQVFULEdBQ04sT0FBT3JCLEtBQUtDLE1BQU1BLE1BQU1vQixFQUMxQixNLG9FQUFDLEVBckJTLEdBd0Jac0IsRUFBT0MsUUFBVUMsQyxpckJDMUJYakQsRUFBSSxXQUNSLFdBQVlvQixFQUFRTSxJLDRGQUFNLFNBQ3hCdEIsS0FBS2dCLE9BQVNBLEVBQ2RoQixLQUFLc0IsS0FBT0EsRUFDWnRCLEtBQUttRCxLQUFPLEVBQ1puRCxLQUFLa0MsTUFBTyxFQUNabEMsS0FBS3lCLFVBQVcsQ0FDbEIsQyxRQWdCQyxPLEVBaEJBLEcsRUFBQSxrQkFFRCxXQUNFekIsS0FBS21ELE1BQVEsRUFFVG5ELEtBQUttRCxPQUFTbkQsS0FBS2dCLFNBQ3JCaEIsS0FBS2tDLE1BQU8sRUFFaEIsR0FBQyxvQkFFRCxXQUNFLE9BQU9sQyxLQUFLa0MsSUFDZCxHQUFDLG1CQUVELFdBQ0VsQyxLQUFLeUIsVUFBVyxDQUNsQixNLG9FQUFDLEVBdkJPLEdBMEJWa0IsRUFBT0MsUUFBVWhELEMsZ3hCQzFCVixTQUFTRSxFQUFvQmdCLEVBQU1ILEdBQU0sSUFDeEIsRUFEd0IsRSwrbEJBQUEsQ0FDNUJHLEdBQUksSUFBdEIsSUFBSyxFQUFMLHFCQUF3QixLQUFiTyxFQUFHLFFBQ1osR0FBSUEsRUFBTSxHQUFLQSxFQUFNLEdBQUksT0FBTyxDQUNsQyxDQUFDLCtCQUVELEdBQW9CLElBQWhCUCxFQUFLRSxPQUFjLE9BQU8sRUFFOUIsR0FBYSxNQUFUTCxHQUF5QixJQUFUQSxJQUF3QixJQUFWQSxFQUFhLENBQzdDLElBQU15QyxFQUFVdEMsRUFBS0ksS0FBSSxTQUFDRyxHQUFHLE9BQUtBLEVBQUlnQyxVQUFVLElBRWhELEdBQUlELEVBQVFFLE1BQUssU0FBQ2pDLEdBQUcsTUFBdUIsTUFBbEJBLEVBQUlrQyxPQUFPLElBQWNILEVBQVFJLFFBQVFuQyxLQUFVK0IsRUFBUXBDLE9BQVMsQ0FBRSxJQUFHLE9BQU8sQ0FDNUcsQ0FFQSxPQUFPLENBQ1QsQ0FFTyxTQUFTeUMsRUFBY0MsRUFBS0MsR0FDakMsSUFBTUMsRUFBVUMsU0FBU0osY0FBY0MsR0FHdkMsT0FGSUMsSUFBV0MsRUFBUUQsVUFBWUEsR0FFNUJDLENBQ1QsQ0FFTyxTQUFTRSxFQUFZQyxHQUMxQixPQUFPQSxFQUFJeEIsS0FBS0MsTUFBTUQsS0FBS0UsU0FBV3NCLEVBQUkvQyxRQUM1QyxDQUVPLFNBQVNnRCxFQUFlakIsR0FDN0IsSUFBTWtCLEVBQVlsQixFQUFVdkIsUUFBTyxTQUFDMEMsR0FBSSxPQUFrQixNQUFiQSxFQUFLdEQsT0FBaUJzRCxFQUFLdEQsS0FBS3VCLFFBQVEsSUFFckYsT0FBUThCLEVBQVVqRCxPQUFTLEVBQUMsRUFBUSxJQUFJbUQsSUFBSUYsRUFBVS9DLEtBQUksU0FBQ2dELEdBQUksT0FBS0EsRUFBS3RELElBQUksTUFBTSxFQUNyRixDLCtKQUVPLElBQU13RCxFQUFjLENBQ3pCakUsUUFBUyxFQUNUQyxXQUFZLEVBQ1pDLFFBQVMsRUFDVEMsVUFBVyxFQUNYQyxXQUFZLEdBR1AsU0FBUzhELEVBQVlDLEdBQzFCLElBQU1DLEVBQVloRCxPQUFPTixLQUFLbUQsR0FFeEJJLEVBQVFELEVBQVVmLFFBQVFjLEdBRWhDLE9BQUlFLEVBQVEsRUFBVUQsRUFBVUMsRUFBUSxHQUVqQ0QsRUFBVUMsRUFDbkIsQ0FFTyxTQUFTQyxFQUFnQi9ELEVBQU9nRSxFQUFRMUQsR0FBbUIsSUFBWDJELEVBQVEsVUFBSCw2Q0FBRyxFQUM3RCxPQUFPLEVBQUk1RCxNQUFNQyxHQUFRQyxRQUFRQyxLQUFJLFNBQUNRLEdBQUMsT0FBS2hCLEVBQVNnRSxHQUFVaEQsRUFBSWlELEVBQU8sR0FDNUUsQyx3R0NoRElDLEVBQTBCLElBQTRCLEtBQzFEQSxFQUF3QmxELEVBQUUsS0FDMUJrRCxFQUF3QmxELEVBQUUsS0FFMUJrRCxFQUF3QmpELEtBQUssQ0FBQ2dCLEVBQU9rQyxHQUFJLCtPQUFnUCxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyw4Q0FBOEMsTUFBUSxHQUFHLFNBQVcsMEdBQTBHLGVBQWlCLENBQUMsaVRBQWlULFdBQWEsTUFFbHpCLFMsNkVDUklELEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCakQsS0FBSyxDQUFDZ0IsRUFBT2tDLEdBQUksNFZBQTZWLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLGdEQUFnRCxNQUFRLEdBQUcsU0FBVyw0S0FBNEssZUFBaUIsQ0FBQyw2VkFBNlYsV0FBYSxNQUUvZ0MsUyxzR0NISUMsRUFBZ0MsSUFBSUMsSUFBSSxZQUN4Q0MsRUFBZ0MsSUFBSUQsSUFBSSxZQUN4Q0gsRUFBMEIsSUFBNEIsS0FDdERLLEVBQXFDLElBQWdDSCxHQUNyRUksRUFBcUMsSUFBZ0NGLEdBRXpFSixFQUF3QmpELEtBQUssQ0FBQ2dCLEVBQU9rQyxHQUFJLDRxQkFBOHFCSSxFQUFxQyxzSUFBd0lDLEVBQXFDLCtGQUFnRyxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxvREFBb0QsTUFBUSxHQUFHLFNBQVcsZ2FBQWdhLGVBQWlCLENBQUMsMDdCQUEwN0IsV0FBYSxNQUV2K0UsUyw2RkNSSU4sRUFBMEIsSUFBNEIsS0FDMURBLEVBQXdCbEQsRUFBRSxLQUUxQmtELEVBQXdCakQsS0FBSyxDQUFDZ0IsRUFBT2tDLEdBQUkscWtCQUFza0IsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMscURBQXFELE1BQVEsR0FBRyxTQUFXLHNRQUFzUSxlQUFpQixDQUFDLHFtQkFBcW1CLFdBQWEsTUFFL2xELFMsNkVDTklELEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCakQsS0FBSyxDQUFDZ0IsRUFBT2tDLEdBQUksb01BQXFNLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLGdEQUFnRCxNQUFRLEdBQUcsU0FBVyw2RkFBNkYsZUFBaUIsQ0FBQyxxTUFBcU0sV0FBYSxNQUVocEIsUyw2RUNKSUQsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JqRCxLQUFLLENBQUNnQixFQUFPa0MsR0FBSSxvZ0JBQXFnQixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyx3REFBd0QsTUFBUSxHQUFHLFNBQVcsb1FBQW9RLGVBQWlCLENBQUMscWdCQUFxZ0IsV0FBYSxNQUUvN0MsUyxtSUNBSUMsRUFBZ0MsSUFBSUMsSUFBSSxZQUN4Q0MsRUFBZ0MsSUFBSUQsSUFBSSxZQUN4Q0ksRUFBZ0MsSUFBSUosSUFBSSxZQUN4Q0ssRUFBZ0MsSUFBSUwsSUFBSSxZQUN4Q0gsRUFBMEIsSUFBNEIsS0FDMURBLEVBQXdCbEQsRUFBRSxLQUMxQmtELEVBQXdCbEQsRUFBRSxLQUMxQmtELEVBQXdCbEQsRUFBRSxLQUMxQixJQUFJdUQsRUFBcUMsSUFBZ0NILEdBQ3JFSSxFQUFxQyxJQUFnQ0YsR0FDckVLLEVBQXFDLElBQWdDRixHQUNyRUcsRUFBcUMsSUFBZ0NGLEdBRXpFUixFQUF3QmpELEtBQUssQ0FBQ2dCLEVBQU9rQyxHQUFJLHFHQUF1R0ksRUFBcUMsa0NBQW9DQyxFQUFxQyxpRkFBbUZHLEVBQXFDLGtDQUFvQ0MsRUFBcUMsbUtBQW9LLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLG1DQUFtQyxNQUFRLEdBQUcsU0FBVyx3TEFBd0wsZUFBaUIsQ0FBQyxncUJBQWdxQixXQUFhLE1BRTlpRCxTLHVCQ2hCQTNDLEVBQU9DLFFBQVUsU0FBVTJDLEdBQ3pCLElBQUlDLEVBQU8sR0E0RVgsT0F6RUFBLEVBQUtuQyxTQUFXLFdBQ2QsT0FBT3JELEtBQUtrQixLQUFJLFNBQVV1RSxHQUN4QixJQUFJQyxFQUFVLEdBQ1ZDLE9BQStCLElBQVpGLEVBQUssR0FvQjVCLE9BbkJJQSxFQUFLLEtBQ1BDLEdBQVcsY0FBY0UsT0FBT0gsRUFBSyxHQUFJLFFBRXZDQSxFQUFLLEtBQ1BDLEdBQVcsVUFBVUUsT0FBT0gsRUFBSyxHQUFJLE9BRW5DRSxJQUNGRCxHQUFXLFNBQVNFLE9BQU9ILEVBQUssR0FBR3pFLE9BQVMsRUFBSSxJQUFJNEUsT0FBT0gsRUFBSyxJQUFNLEdBQUksT0FFNUVDLEdBQVdILEVBQXVCRSxHQUM5QkUsSUFDRkQsR0FBVyxLQUVURCxFQUFLLEtBQ1BDLEdBQVcsS0FFVEQsRUFBSyxLQUNQQyxHQUFXLEtBRU5BLENBQ1QsSUFBR0csS0FBSyxHQUNWLEVBR0FMLEVBQUs5RCxFQUFJLFNBQVdvRSxFQUFTQyxFQUFPQyxFQUFRQyxFQUFVQyxHQUM3QixpQkFBWkosSUFDVEEsRUFBVSxDQUFDLENBQUMsS0FBTUEsT0FBU0ssS0FFN0IsSUFBSUMsRUFBeUIsQ0FBQyxFQUM5QixHQUFJSixFQUNGLElBQUssSUFBSUssRUFBSSxFQUFHQSxFQUFJckcsS0FBS2dCLE9BQVFxRixJQUFLLENBQ3BDLElBQUl4QixFQUFLN0UsS0FBS3FHLEdBQUcsR0FDUCxNQUFOeEIsSUFDRnVCLEVBQXVCdkIsSUFBTSxFQUVqQyxDQUVGLElBQUssSUFBSXlCLEVBQUssRUFBR0EsRUFBS1IsRUFBUTlFLE9BQVFzRixJQUFNLENBQzFDLElBQUliLEVBQU8sR0FBR0csT0FBT0UsRUFBUVEsSUFDekJOLEdBQVVJLEVBQXVCWCxFQUFLLFdBR3JCLElBQVZTLFNBQ2MsSUFBWlQsRUFBSyxLQUdkQSxFQUFLLEdBQUssU0FBU0csT0FBT0gsRUFBSyxHQUFHekUsT0FBUyxFQUFJLElBQUk0RSxPQUFPSCxFQUFLLElBQU0sR0FBSSxNQUFNRyxPQUFPSCxFQUFLLEdBQUksTUFGL0ZBLEVBQUssR0FBS1MsR0FNVkgsSUFDR04sRUFBSyxJQUdSQSxFQUFLLEdBQUssVUFBVUcsT0FBT0gsRUFBSyxHQUFJLE1BQU1HLE9BQU9ILEVBQUssR0FBSSxLQUMxREEsRUFBSyxHQUFLTSxHQUhWTixFQUFLLEdBQUtNLEdBTVZFLElBQ0dSLEVBQUssSUFHUkEsRUFBSyxHQUFLLGNBQWNHLE9BQU9ILEVBQUssR0FBSSxPQUFPRyxPQUFPSCxFQUFLLEdBQUksS0FDL0RBLEVBQUssR0FBS1EsR0FIVlIsRUFBSyxHQUFLLEdBQUdHLE9BQU9LLElBTXhCVCxFQUFLN0QsS0FBSzhELEdBQ1osQ0FDRixFQUNPRCxDQUNULEMsdUJDbEZBN0MsRUFBT0MsUUFBVSxTQUFVMkQsRUFBS0MsR0FJOUIsT0FIS0EsSUFDSEEsRUFBVSxDQUFDLEdBRVJELEdBR0xBLEVBQU1FLE9BQU9GLEVBQUlHLFdBQWFILEVBQUlJLFFBQVVKLEdBR3hDLGVBQWVLLEtBQUtMLEtBQ3RCQSxFQUFNQSxFQUFJaEQsTUFBTSxHQUFJLElBRWxCaUQsRUFBUUssT0FDVk4sR0FBT0MsRUFBUUssTUFLYixvQkFBb0JELEtBQUtMLElBQVFDLEVBQVFNLFdBQ3BDLElBQUtsQixPQUFPVyxFQUFJUSxRQUFRLEtBQU0sT0FBT0EsUUFBUSxNQUFPLE9BQVEsS0FFOURSLEdBakJFQSxDQWtCWCxDLHVCQ3ZCQTVELEVBQU9DLFFBQVUsU0FBVTZDLEdBQ3pCLElBQUlDLEVBQVVELEVBQUssR0FDZnVCLEVBQWF2QixFQUFLLEdBQ3RCLElBQUt1QixFQUNILE9BQU90QixFQUVULEdBQW9CLG1CQUFUdUIsS0FBcUIsQ0FDOUIsSUFBSUMsRUFBU0QsS0FBS0UsU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVTixNQUN6RE8sRUFBTywrREFBK0QzQixPQUFPc0IsR0FDN0VNLEVBQWdCLE9BQU81QixPQUFPMkIsRUFBTSxPQUN4QyxNQUFPLENBQUM3QixHQUFTRSxPQUFPLENBQUM0QixJQUFnQjNCLEtBQUssS0FDaEQsQ0FDQSxNQUFPLENBQUNILEdBQVNHLEtBQUssS0FDeEIsQyx1QkNiQSxJQUFJNEIsRUFBYyxHQUVsQixTQUFTQyxFQUFxQkMsR0FHNUIsSUFGQSxJQUFJQyxHQUFVLEVBRUxsRyxFQUFJLEVBQUdBLEVBQUkrRixFQUFZekcsT0FBUVUsSUFDdEMsR0FBSStGLEVBQVkvRixHQUFHaUcsYUFBZUEsRUFBWSxDQUM1Q0MsRUFBU2xHLEVBQ1QsS0FDRixDQUdGLE9BQU9rRyxDQUNULENBRUEsU0FBU0MsRUFBYXJDLEVBQU1nQixHQUkxQixJQUhBLElBQUlzQixFQUFhLENBQUMsRUFDZEMsRUFBYyxHQUVUckcsRUFBSSxFQUFHQSxFQUFJOEQsRUFBS3hFLE9BQVFVLElBQUssQ0FDcEMsSUFBSStELEVBQU9ELEVBQUs5RCxHQUNabUQsRUFBSzJCLEVBQVF3QixLQUFPdkMsRUFBSyxHQUFLZSxFQUFRd0IsS0FBT3ZDLEVBQUssR0FDbER3QyxFQUFRSCxFQUFXakQsSUFBTyxFQUMxQjhDLEVBQWEsR0FBRy9CLE9BQU9mLEVBQUksS0FBS2UsT0FBT3FDLEdBQzNDSCxFQUFXakQsR0FBTW9ELEVBQVEsRUFDekIsSUFBSUMsRUFBb0JSLEVBQXFCQyxHQUN6Q1EsRUFBTSxDQUNSQyxJQUFLM0MsRUFBSyxHQUNWTSxNQUFPTixFQUFLLEdBQ1o0QyxVQUFXNUMsRUFBSyxHQUNoQlEsU0FBVVIsRUFBSyxHQUNmUyxNQUFPVCxFQUFLLElBR2QsSUFBMkIsSUFBdkJ5QyxFQUNGVCxFQUFZUyxHQUFtQkksYUFDL0JiLEVBQVlTLEdBQW1CSyxRQUFRSixPQUNsQyxDQUNMLElBQUlJLEVBQVVDLEVBQWdCTCxFQUFLM0IsR0FDbkNBLEVBQVFpQyxRQUFVL0csRUFDbEIrRixFQUFZaUIsT0FBT2hILEVBQUcsRUFBRyxDQUN2QmlHLFdBQVlBLEVBQ1pZLFFBQVNBLEVBQ1RELFdBQVksR0FFaEIsQ0FFQVAsRUFBWXBHLEtBQUtnRyxFQUNuQixDQUVBLE9BQU9JLENBQ1QsQ0FFQSxTQUFTUyxFQUFnQkwsRUFBSzNCLEdBQzVCLElBQUltQyxFQUFNbkMsRUFBUW9DLE9BQU9wQyxHQWV6QixPQWRBbUMsRUFBSUUsT0FBT1YsR0FFRyxTQUFpQlcsR0FDN0IsR0FBSUEsRUFBUSxDQUNWLEdBQUlBLEVBQU9WLE1BQVFELEVBQUlDLEtBQU9VLEVBQU8vQyxRQUFVb0MsRUFBSXBDLE9BQVMrQyxFQUFPVCxZQUFjRixFQUFJRSxXQUFhUyxFQUFPN0MsV0FBYWtDLEVBQUlsQyxVQUFZNkMsRUFBTzVDLFFBQVVpQyxFQUFJakMsTUFDekosT0FHRnlDLEVBQUlFLE9BQU9WLEVBQU1XLEVBQ25CLE1BQ0VILEVBQUlJLFFBRVIsQ0FHRixDQUVBcEcsRUFBT0MsUUFBVSxTQUFVNEMsRUFBTWdCLEdBRy9CLElBQUl3QyxFQUFrQm5CLEVBRHRCckMsRUFBT0EsR0FBUSxHQURmZ0IsRUFBVUEsR0FBVyxDQUFDLEdBR3RCLE9BQU8sU0FBZ0J5QyxHQUNyQkEsRUFBVUEsR0FBVyxHQUVyQixJQUFLLElBQUl2SCxFQUFJLEVBQUdBLEVBQUlzSCxFQUFnQmhJLE9BQVFVLElBQUssQ0FDL0MsSUFDSThDLEVBQVFrRCxFQURLc0IsRUFBZ0J0SCxJQUVqQytGLEVBQVlqRCxHQUFPOEQsWUFDckIsQ0FJQSxJQUZBLElBQUlZLEVBQXFCckIsRUFBYW9CLEVBQVN6QyxHQUV0QzJDLEVBQUssRUFBR0EsRUFBS0gsRUFBZ0JoSSxPQUFRbUksSUFBTSxDQUNsRCxJQUVJQyxFQUFTMUIsRUFGS3NCLEVBQWdCRyxJQUlLLElBQW5DMUIsRUFBWTJCLEdBQVFkLGFBQ3RCYixFQUFZMkIsR0FBUWIsVUFFcEJkLEVBQVlpQixPQUFPVSxFQUFRLEdBRS9CLENBRUFKLEVBQWtCRSxDQUNwQixDQUNGLEMsdUJDckdBLElBQUlHLEVBQU8sQ0FBQyxFQW9DWjFHLEVBQU9DLFFBVlAsU0FBMEIwRyxFQUFRQyxHQUNoQyxJQUFJdkgsRUF4Qk4sU0FBbUJBLEdBQ2pCLFFBQTRCLElBQWpCcUgsRUFBS3JILEdBQXlCLENBQ3ZDLElBQUl3SCxFQUFjM0YsU0FBUzRGLGNBQWN6SCxHQUV6QyxHQUFJMEgsT0FBT0MsbUJBQXFCSCxhQUF1QkUsT0FBT0Msa0JBQzVELElBR0VILEVBQWNBLEVBQVlJLGdCQUFnQkMsSUFJNUMsQ0FIRSxNQUFPQyxHQUVQTixFQUFjLElBQ2hCLENBR0ZILEVBQUtySCxHQUFVd0gsQ0FDakIsQ0FFQSxPQUFPSCxFQUFLckgsRUFDZCxDQUtlK0gsQ0FBVVQsR0FFdkIsSUFBS3RILEVBQ0gsTUFBTSxJQUFJZ0ksTUFBTSwyR0FHbEJoSSxFQUFPaUksWUFBWVYsRUFDckIsQyx1QkMxQkE1RyxFQUFPQyxRQVBQLFNBQTRCNEQsR0FDMUIsSUFBSTVDLEVBQVVDLFNBQVNKLGNBQWMsU0FHckMsT0FGQStDLEVBQVEwRCxjQUFjdEcsRUFBUzRDLEVBQVEyRCxZQUN2QzNELEVBQVE4QyxPQUFPMUYsRUFBUzRDLEVBQVFBLFNBQ3pCNUMsQ0FDVCxDLDZCQ0dBakIsRUFBT0MsUUFSUCxTQUF3Q3dILEdBQ3RDLElBQUlDLEVBQW1ELEtBRW5EQSxHQUNGRCxFQUFhRSxhQUFhLFFBQVNELEVBRXZDLEMsdUJDNERBMUgsRUFBT0MsUUFaUCxTQUFnQjRELEdBQ2QsSUFBSTRELEVBQWU1RCxFQUFRK0QsbUJBQW1CL0QsR0FDOUMsTUFBTyxDQUNMcUMsT0FBUSxTQUFnQlYsSUF6RDVCLFNBQWVpQyxFQUFjNUQsRUFBUzJCLEdBQ3BDLElBQUlDLEVBQU0sR0FFTkQsRUFBSWxDLFdBQ05tQyxHQUFPLGNBQWN4QyxPQUFPdUMsRUFBSWxDLFNBQVUsUUFHeENrQyxFQUFJcEMsUUFDTnFDLEdBQU8sVUFBVXhDLE9BQU91QyxFQUFJcEMsTUFBTyxPQUdyQyxJQUFJSixPQUFpQyxJQUFkd0MsRUFBSWpDLE1BRXZCUCxJQUNGeUMsR0FBTyxTQUFTeEMsT0FBT3VDLEVBQUlqQyxNQUFNbEYsT0FBUyxFQUFJLElBQUk0RSxPQUFPdUMsRUFBSWpDLE9BQVMsR0FBSSxPQUc1RWtDLEdBQU9ELEVBQUlDLElBRVB6QyxJQUNGeUMsR0FBTyxLQUdMRCxFQUFJcEMsUUFDTnFDLEdBQU8sS0FHTEQsRUFBSWxDLFdBQ05tQyxHQUFPLEtBR1QsSUFBSUMsRUFBWUYsRUFBSUUsVUFFaEJBLEdBQTZCLG9CQUFUcEIsT0FDdEJtQixHQUFPLHVEQUF1RHhDLE9BQU9xQixLQUFLRSxTQUFTQyxtQkFBbUJDLEtBQUtDLFVBQVVlLE1BQWUsUUFNdEk3QixFQUFRZ0Usa0JBQWtCcEMsRUFBS2dDLEVBQWM1RCxFQUFRQSxRQUN2RCxDQWlCTWlFLENBQU1MLEVBQWM1RCxFQUFTMkIsRUFDL0IsRUFDQVksT0FBUSxZQWpCWixTQUE0QnFCLEdBRTFCLEdBQWdDLE9BQTVCQSxFQUFhTSxXQUNmLE9BQU8sRUFHVE4sRUFBYU0sV0FBV0MsWUFBWVAsRUFDdEMsQ0FXTVEsQ0FBbUJSLEVBQ3JCLEVBRUosQyx1QkNwREF6SCxFQUFPQyxRQVpQLFNBQTJCd0YsRUFBS2dDLEdBQzlCLEdBQUlBLEVBQWFTLFdBQ2ZULEVBQWFTLFdBQVdDLFFBQVUxQyxNQUM3QixDQUNMLEtBQU9nQyxFQUFhVyxZQUNsQlgsRUFBYU8sWUFBWVAsRUFBYVcsWUFHeENYLEVBQWFILFlBQVlwRyxTQUFTbUgsZUFBZTVDLEdBQ25ELENBQ0YsQyxxWkNaSTZDLEVBQTJCLENBQUMsRUFHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQmhGLElBQWpCaUYsRUFDSCxPQUFPQSxFQUFheEksUUFHckIsSUFBSUQsRUFBU3NJLEVBQXlCRSxHQUFZLENBQ2pEdEcsR0FBSXNHLEVBRUp2SSxRQUFTLENBQUMsR0FPWCxPQUhBeUksRUFBb0JGLEdBQVV4SSxFQUFRQSxFQUFPQyxRQUFTc0ksR0FHL0N2SSxFQUFPQyxPQUNmLENBR0FzSSxFQUFvQkksRUFBSUQsRUN4QnhCSCxFQUFvQi9KLEVBQUt3QixJQUN4QixJQUFJNEksRUFBUzVJLEdBQVVBLEVBQU8rRCxXQUM3QixJQUFPL0QsRUFBaUIsUUFDeEIsSUFBTSxFQUVQLE9BREF1SSxFQUFvQk0sRUFBRUQsRUFBUSxDQUFFRSxFQUFHRixJQUM1QkEsQ0FBTSxFQ0xkTCxFQUFvQk0sRUFBSSxDQUFDNUksRUFBUzhJLEtBQ2pDLElBQUksSUFBSUMsS0FBT0QsRUFDWFIsRUFBb0JVLEVBQUVGLEVBQVlDLEtBQVNULEVBQW9CVSxFQUFFaEosRUFBUytJLElBQzVFcEssT0FBT3NLLGVBQWVqSixFQUFTK0ksRUFBSyxDQUFFRyxZQUFZLEVBQU1DLElBQUtMLEVBQVdDLElBRTFFLEVDTkRULEVBQW9CYyxFQUFJLFdBQ3ZCLEdBQTBCLGlCQUFmQyxXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU9qTSxNQUFRLElBQUlrTSxTQUFTLGNBQWIsRUFHaEIsQ0FGRSxNQUFPcEMsR0FDUixHQUFzQixpQkFBWEosT0FBcUIsT0FBT0EsTUFDeEMsQ0FDQSxDQVB1QixHQ0F4QndCLEVBQW9CVSxFQUFJLENBQUN6RCxFQUFLZ0UsSUFBVTVLLE9BQU82SyxVQUFVQyxlQUFlQyxLQUFLbkUsRUFBS2dFLEdDQ2xGakIsRUFBb0JxQixFQUFLM0osSUFDSCxvQkFBWDRKLFFBQTBCQSxPQUFPQyxhQUMxQ2xMLE9BQU9zSyxlQUFlakosRUFBUzRKLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RG5MLE9BQU9zSyxlQUFlakosRUFBUyxhQUFjLENBQUU4SixPQUFPLEdBQU8sRSxNQ0w5RCxJQUFJQyxFQUNBekIsRUFBb0JjLEVBQUVZLGdCQUFlRCxFQUFZekIsRUFBb0JjLEVBQUVhLFNBQVcsSUFDdEYsSUFBSWhKLEVBQVdxSCxFQUFvQmMsRUFBRW5JLFNBQ3JDLElBQUs4SSxHQUFhOUksSUFDYkEsRUFBU2lKLGdCQUNaSCxFQUFZOUksRUFBU2lKLGNBQWNDLE1BQy9CSixHQUFXLENBQ2YsSUFBSUssRUFBVW5KLEVBQVNvSixxQkFBcUIsVUFDekNELEVBQVFoTSxTQUFRMkwsRUFBWUssRUFBUUEsRUFBUWhNLE9BQVMsR0FBRytMLElBQzVELENBSUQsSUFBS0osRUFBVyxNQUFNLElBQUkzQyxNQUFNLHlEQUNoQzJDLEVBQVlBLEVBQVU1RixRQUFRLE9BQVEsSUFBSUEsUUFBUSxRQUFTLElBQUlBLFFBQVEsWUFBYSxLQUNwRm1FLEVBQW9CZ0MsRUFBSVAsQyxLQ2Z4QnpCLEVBQW9CaUMsRUFBSXRKLFNBQVN1SixTQUFXQyxLQUFLUixTQUFTUyxLQ0ExRHBDLEVBQW9CcUMsUUFBS3BILEUsK3REQ3FTekIsUUFqU1UsV0FDUixjLDRGQUFjLFNBQ1osSUFBTXFILEdBQWMvSixFQUFBQSxFQUFBQSxlQUFjLFNBQVUsZ0JBQzVDK0osRUFBWUMsVUFBWSxhQUV4QixJQUFNQyxHQUFnQmpLLEVBQUFBLEVBQUFBLGVBQWMsU0FBVSxrQkFDOUNpSyxFQUFjRCxVQUFZLFVBRTFCLElBQU1FLEdBQWNsSyxFQUFBQSxFQUFBQSxlQUFjLEtBQ2xDa0ssRUFBWTlJLEdBQUssZUFDakI4SSxFQUFZRixVQUFZLFNBRXhCek4sS0FBSzROLFNBQVcsQ0FDZEMsYUFBY2hLLFNBQVNpSyxlQUFlLGFBQ3RDQyxhQUFjbEssU0FBU2lLLGVBQWUsYUFDdENFLFFBQVNuSyxTQUFTaUssZUFBZSxZQUNqQ0csUUFBU3BLLFNBQVNpSyxlQUFlLFlBQ2pDSSxjQUFlckssU0FBU2lLLGVBQWUsa0JBQ3ZDSyxZQUFhdEssU0FBUzRGLGNBQWMsaUJBRXBDK0QsWUFBQUEsRUFDQUUsY0FBQUEsRUFDQUMsWUFBQUEsRUFFSixDLFFBc1FDLE8sRUF0UUEsRSxFQUFBLDBCQUVELFNBQVlTLEdBQ1YsSUFBTUMsRUFBT3hLLFNBQVNpSyxlQUFlLEdBQUQsT0FBSU0sRUFBTzlNLEtBQUksV0FFbkQrTSxFQUFLQyxVQUFZLEdBQ2pCdE8sS0FBSzROLFNBQVMsR0FBRCxPQUFJUSxFQUFPOU0sS0FBSSxlQUFjaUksTUFBTWdGLFFBQVUsUUFJMUQsSUFGQSxJQUFRdE8sRUFBVW1PLEVBQU9uTyxNQUFqQkEsTUFFQ3lCLEVBQUksRUFBR0EsRUFBSSxJQUFLQSxHQUFLLEVBQUcsQ0FDL0IsSUFBTUssR0FBTzBCLEVBQUFBLEVBQUFBLGVBQWMsTUFBTyxRQUNsQzFCLEVBQUt1SSxhQUFhLGFBQWM1SSxHQUU1QnpCLEVBQU15QixHQUFHZCxNQUNYbUIsRUFBS3lNLFVBQVVDLElBQUksWUFHckJKLEVBQUtLLE9BQU8zTSxFQUNkLENBQ0YsR0FBQyx3QkFFRCxTQUFXOUIsR0FDVCxJQUFLLElBQUl5QixFQUFJLEVBQUdBLEVBQUksSUFBS0EsR0FBSyxFQUFHLENBQy9CLElBQU1LLEVBQU8vQixLQUFLNE4sU0FBU0ksUUFBUVcsU0FBU2pOLEdBQzVDSyxFQUFLNEIsVUFBWSxPQUVJLE1BQWpCMUQsRUFBTXlCLEdBQUdkLE1BQWNtQixFQUFLeU0sVUFBVUMsSUFBSSxXQUNoRCxDQUNGLEdBQUMsd0JBRUQsU0FBV0csR0FBMkIsSUFBckJDLEVBQWMsVUFBSCw4Q0FDdEJBLEdBQWE3TyxLQUFLOE8sc0JBQXNCOU8sS0FBSzROLFNBQVNPLGFBRTFEbk8sS0FBSzROLFNBQVNPLFlBQVlWLFVBQVltQixDQUN4QyxHQUFDLCtCQUVELFdBQ0U1TyxLQUFLK08sV0FBVyw4Q0FBOEMsR0FFOUQsSUFBTUMsR0FBY3ZMLEVBQUFBLEVBQUFBLGVBQWMsTUFBTyxnQkFFbkN3TCxHQUFleEwsRUFBQUEsRUFBQUEsZUFBYyxTQUFVLGlCQUM3Q3dMLEVBQWF4QixVQUFZLFNBQ3pCLElBQU15QixHQUFjekwsRUFBQUEsRUFBQUEsZUFBYyxTQUFVLGdCQUM1Q3lMLEVBQVl6QixVQUFZLFFBRXhCdUIsRUFBWU4sT0FBT08sR0FDbkJELEVBQVlOLE9BQU9RLEdBRW5CbFAsS0FBSzROLFNBQVNxQixhQUFlQSxFQUM3QmpQLEtBQUs0TixTQUFTc0IsWUFBY0EsRUFFNUJsUCxLQUFLNE4sU0FBU0MsYUFBYWEsT0FBT00sR0FDbENoUCxLQUFLNE4sU0FBU0csYUFBYXhFLE1BQU1nRixRQUFVLE1BQzdDLEdBQUMsbUNBRUQsU0FBc0IzSyxHQUNwQjVELEtBQUs0TixTQUFTTSxjQUFjSSxVQUFZLEdBRXhDdE8sS0FBSzROLFNBQVNNLGNBQWNRLE9BQU85SyxFQUNyQyxHQUFDLDZCQUVELFNBQWdCd0ssR0FDZCxJQUFNZSxHQUFZMUwsRUFBQUEsRUFBQUEsZUFBYyxNQUFPLGNBQ3ZDMEwsRUFBVXRLLEdBQUssR0FBSCxPQUFNdUosRUFBTzlNLEtBQUksZUFFN0IsSUFBUXBCLEVBQVVrTyxFQUFWbE8sTUFFUnFCLE9BQU9OLEtBQUtmLEdBQU8yQixTQUFRLFNBQUNqQixHQUMxQixJQUFNSCxFQUFxQixlQUFURyxFQUF5QixjQUFnQkEsRUFFckR3TyxHQUFXM0wsRUFBQUEsRUFBQUEsZUFBYyxJQUFLLGFBQ3BDMkwsRUFBUzNCLFVBQVloTixFQUVyQjBPLEVBQVVULE9BQU9VLEVBQ25CLElBRUE3TixPQUFPTixLQUFLZixHQUFPMkIsU0FBUSxTQUFDakIsR0FDMUIsSUFBTXlPLEdBQWdCNUwsRUFBQUEsRUFBQUEsZUFBYyxRQUFTLGtCQUM3QzRMLEVBQWN4SyxHQUFLLEdBQUgsT0FBTXVKLEVBQU85TSxLQUFJLFlBQUlWLEVBQUksVUFFekN5TyxFQUFjL0UsYUFBYSxRQUFTLEdBQ3BDK0UsRUFBYy9FLGFBQWEsTUFBTyxHQUNsQytFLEVBQWMvRSxhQUFhLE1BQU9wSyxFQUFNVSxHQUFNSSxRQUU5Q21PLEVBQVVULE9BQU9XLEVBQ25CLElBRUFyUCxLQUFLNE4sU0FBUyxHQUFELE9BQUlRLEVBQU85TSxLQUFJLGVBQWNvTixPQUFPUyxFQUNuRCxHQUFDLCtCQUVELFNBQWtCRyxHQUFTLElBR0QsRUFIQyxPQUNvQixJQUEvQnRQLEtBQUs0TixTQUFTSSxRQUFRVyxVQUVaLElBQXhCLElBQUssRUFBTCxxQkFBZSxRQUNSWSxpQkFBaUIsYUFBYSxTQUFDQyxHQUNsQyxJQUFNOU4sRUFBSStOLFNBQVNELEVBQUl4TixPQUFPME4sUUFBUWxMLE1BQU8sSUFFdkNtTCxFQUFVTCxFQUFRNU4sR0FFeEIsR0FBSWlPLEVBQVFDLFNBQVUsQ0FDcEIsSUFFMEMsRUFGcENDLEVBQWFGLEVBQVFHLE1BQVMsUUFBVSxVQUFVLElBRWhDSCxFQUFRSSxZQUFVLElBQTFDLElBQUssRUFBTCxxQkFBNEMsS0FBakNDLEVBQVMsUUFDWnhMLEVBQVFtTCxFQUFRSSxXQUFXdk0sUUFBUXdNLEdBQ25DQyxFQUFXLEVBQUtyQyxTQUFTSSxRQUFRdkUsY0FBYyxxQkFBRCxPQUFzQmpGLEVBQUssT0FFM0VtTCxFQUFRQyxTQUFTTSxTQUFTMUwsS0FBV3dMLEVBQVVwUCxLQUNqRHFQLEVBQVN6QixVQUFVQyxJQUFJb0IsR0FDZEcsRUFBVXBQLEtBQ25CcVAsRUFBU3pCLFVBQVVDLElBQUksWUFFdkJ3QixFQUFTdE0sVUFBWSxNQUV6QixDQUFDLCtCQUNILENBQ0YsR0FDRCwrQkFDSCxHQUFDLCtCQUVELFNBQWtCMkwsR0FDaEJ6TCxTQUFTMEwsaUJBQWlCLFNBQVMsU0FBQ0MsR0FDbEMsR0FBaUIsVUFBYkEsRUFBSVcsS0FBa0IsQ0FDeEIsSUFBTXBPLEcsRUFBVzhCLFNBQVN1TSxpQkFBaUIsVSx1VkFBVzdNLE9BQU8sR0FBRyxHQUVoRSxHQUFJeEIsRUFBS3lNLFVBQVU2QixTQUFTLFFBQVMsQ0FDbkNmLElBRUEsSUFBTWdCLEVBQWlCLElBQUlDLE1BQU0sYUFDakN4TyxFQUFLeU8sY0FBY0YsRUFDckIsQ0FDRixDLEtBQ0YsR0FDRixHQUFDLG9DQUVELFNBQXVCaEIsR0FBUyxXQUM5QnRQLEtBQUs0TixTQUFTSSxRQUFRdUIsaUJBQWlCLFNBQVMsU0FBQ0MsR0FDL0MsSUFBTWhMLEVBQVFpTCxTQUFTRCxFQUFJeE4sT0FBTzBOLFFBQVFsTCxNQUFPLElBR2pELEdBRm9CLEVBQUtvSixTQUFTSSxRQUFRVyxTQUFTbkssR0FFbkNnSyxVQUFVNkIsU0FBUyxTQUFVLENBQzNDLElBQU1JLEVBQU9uQixFQUFROUssR0FFckIsRUFBS2tNLFdBQVdELEVBQUt4USxPQUVyQixJQUFNMFEsRUFBOEIsZUFBbEJGLEVBQUtFLFNBQTZCLGNBQWdCRixFQUFLRSxTQUV6RCxNQUFaQSxFQUNGLEVBQUs1QixXQUFXLGNBQUQsT0FBZTRCLEVBQVEsNkJBRXRDLEVBQUs3QixzQkFBc0IsRUFBS2xCLFNBQVNKLFlBRTdDLENBQ0YsR0FDRixHQUFDLG1DQUVELFNBQXNCOEIsRUFBU2xCLEdBQVEsSUFHYixFQUhhLE9BQ2tFLElBQXhFLE9BQWhCQSxFQUFPOU0sS0FBaUJ0QixLQUFLNE4sU0FBU0ssUUFBUVUsU0FBVzNPLEtBQUs0TixTQUFTSSxRQUFRVyxVQUV0RSxxQkFBRSxJQUFmNU0sRUFBSSxRQUNiQSxFQUFLd04saUJBQWlCLFNBQVMsU0FBQ0MsR0FDOUIsSUFBTTlOLEVBQUkrTixTQUFTRCxFQUFJeE4sT0FBTzBOLFFBQVFsTCxNQUFPLElBRXZDbUwsRUFBVUwsRUFBUTVOLEdBRXhCLEdBQUlpTyxFQUFRaUIsVUFBVyxDQUNyQixJQUFNQyxFQUFXbEIsRUFBUTFNLFNBQVNoRCxNQUFNQSxNQUNoQ1csRUFBU2lRLEVBQVNuUCxHQUFsQmQsS0FNUixHQUpvQixPQUFoQndOLEVBQU85TSxPQUFlLEVBQUtzTSxTQUFTRCxZQUFZRixVQUFZLFFBQUgsT0FBV2tDLEVBQVFtQixZQUVoRi9PLEVBQUt5TSxVQUFVQyxJQUFJLE9BRWY3TixHQUFRaVEsRUFBU25QLEdBQUdFLE9BQVEsQ0FDOUIsSUFBTW5CLEVBQXFCLGVBQVRHLEVBQXlCLGNBQWdCQSxFQUMzRCxFQUFLbU8sV0FBVyxlQUFELE9BQWdCdE8sSUFFL0IsSUFBTTRPLEVBQWdCeEwsU0FBU2lLLGVBQWUsR0FBRCxPQUFJNkIsRUFBUTFNLFNBQVMzQixLQUFJLFlBQUlWLEVBQUksV0FDeEVtUSxFQUFXdEIsU0FBU0osRUFBYzJCLGFBQWEsU0FBVSxJQUFNLEVBR3JFLEdBRkEzQixFQUFjL0UsYUFBYSxRQUFTeUcsR0FFaENwQixFQUFRc0IsT0FBUSxDQUNsQixJQUFNQyxFQUEyQixPQUFoQjlDLEVBQU85TSxLQUFpQixXQUFhLGNBQ3RELEVBQUt5TixXQUFXbUMsR0FDaEIsRUFBS0MseUJBQXlCLEtBQ2hDLENBQ0YsTUFBWXhCLEVBQVFzQixRQUNsQixFQUFLbEMsV0FBVyxHQUVwQixLQUEyQixPQUFoQlgsRUFBTzlNLE1BQWtCcU8sRUFBUXNCLFFBQzFDLEVBQUtsQyxXQUFXLGdDQUVwQixHQUNGLEVBbENBLElBQUssRUFBTCx3QkFrQ0MsK0JBQ0gsR0FBQyxtQ0FFRCxTQUFzQk8sR0FBUyxXQUM3QnRQLEtBQUs0TixTQUFTcUIsYUFBYU0saUJBQWlCLFNBQVMsV0FDbkQsSUFBTXRQLEVBQVFxUCxJQUVkLEVBQUtvQixXQUFXelEsR0FDaEIsRUFBSzJOLFNBQVNNLGNBQWNJLFVBQVksR0FDeEMsRUFBS1YsU0FBU00sY0FBY1EsT0FBTyxFQUFLZCxTQUFTSixZQUNuRCxHQUNGLEdBQUMsa0NBRUQsU0FBcUI4QixHQUFTLFdBQzVCdFAsS0FBSzROLFNBQVNzQixZQUFZSyxpQkFBaUIsU0FBUyxXQUNsRCxJQUFNdFAsRUFBUXFQLElBRWQsRUFBS29CLFdBQVd6USxHQUVoQixFQUFLOE8sV0FBVyw4Q0FBOEMsRUFDaEUsR0FDRixHQUFDLGtDQUVELFNBQXFCTyxHQUFTLFdBQzVCdFAsS0FBSzROLFNBQVNKLFlBQVkrQixpQkFBaUIsU0FBUyxXQUNsRCxFQUFLM0IsU0FBU0MsYUFBYWxELFlBQVksRUFBS2lELFNBQVNDLGFBQWF1RCxXQUVsRSxJQUFLLElBQUwsTUFBcUIsQ0FBQyxlQUFnQixnQkFBZSxlQUFFLENBQWxELElBQU0xSCxFQUFNLEtBQ1QySCxHQUFRNU4sRUFBQUEsRUFBQUEsZUFBYyxJQUFLLGdCQUNqQzROLEVBQU01RCxVQUF3QixpQkFBWC9ELEVBQTZCLFdBQWEsU0FDN0QsRUFBS2tFLFNBQVNsRSxHQUFRNEgsUUFBUUQsRUFDaEMsQ0FFQS9CLElBRUEsRUFBS1AsV0FBVyx3QkFBd0IsR0FFeEMsRUFBS25CLFNBQVNNLGNBQWNRLE9BQU8sRUFBS2QsU0FBU0QsYUFDakQsRUFBS0MsU0FBU00sY0FBY1EsT0FBTyxFQUFLZCxTQUFTRixjQUNuRCxHQUNGLEdBQUMsb0NBRUQsU0FBdUI0QixHQUFTLFdBQzlCdFAsS0FBSzROLFNBQVNGLGNBQWM2QixpQkFBaUIsU0FBUyxXQUNwRCxJQUFLLElBQUwsTUFBcUIsQ0FBQyxlQUFnQixnQkFBZSxlQUFFLENBQWxELElBQU03RixFQUFNLEtBQ1Q2SCxFQUFlLEVBQUszRCxTQUFTbEUsR0FFbkM2SCxFQUFhNUcsWUFBWTRHLEVBQWF4RyxZQUN0Q3dHLEVBQWE1RyxZQUFZNEcsRUFBYUgsVUFDeEMsQ0FFQTlCLEdBQ0YsR0FDRixHQUFDLHNDQUVELFNBQXlCa0MsR0FDdkIsSUFBTUMsRUFBV3pSLEtBQUs0TixTQUFTLEdBQUQsT0FBSTRELEVBQVUsVUFFdENFLEVBQWFELEVBQVNFLFdBQVUsR0FDdENGLEVBQVMvRyxXQUFXa0gsYUFBYUYsRUFBWUQsR0FFN0N6UixLQUFLNE4sU0FBUyxHQUFELE9BQUk0RCxFQUFVLFVBQVdFLENBQ3hDLEdBQUMscUJBRUQsU0FBUUYsRUFBWWhOLEdBR2xCLE9BRmN4RSxLQUFLNE4sU0FBUyxHQUFELE9BQUk0RCxFQUFVLFVBRTVCN0MsU0FBU25LLEVBQ3hCLEksdUVBQUMsRUE5Uk8sRyw2aUVDaUxWLFFBM0tRLFdBQ04sYyw0RkFBYyxTQUNaeEUsS0FBSzZSLFNBQVcsQ0FDZDFSLFFBQVMsR0FDVEMsV0FBWSxHQUNaQyxRQUFTLEdBQ1RDLFVBQVcsR0FDWEMsV0FBWSxJQUdkUCxLQUFLOFIsWUFBYyxJQUFJL1IsTUFBYUUsTUFDcENELEtBQUsrUixRQUFVLEVBQUUsRUFBRyxHQUFJLEdBQUksR0FDOUIsQyxRQTRKQyxPLEVBNUpBLEcsRUFBQSw0QkFFRCxTQUFjaFAsR0FFWixJQUFNaVAsRUFBWWpQLEVBQVU3QixLQUFJLFNBQUNnRCxHQUFJLE9BQUtBLEVBQUtuQyxJQUFJLElBQzdDa1EsRUFBYSxFQUFJbFIsTUFBTSxLQUFLRSxRQUFRTyxRQUFPLFNBQUNnRCxHQUFLLE9BQU13TixFQUFVOUIsU0FBUzFMLEVBQU0sSUFJdEYsT0FGWVYsRUFBQUEsRUFBQUEsYUFBWW1PLEVBRzFCLEdBQUMsMEJBRUQsU0FBYWxQLEdBQ1gsR0FBeUIsSUFBckJBLEVBQVUvQixPQUFjLE9BQU9oQixLQUFLa1MsY0FBY25QLEdBRXRELElBQUkxQixFQUFNLEtBRUo4USxFQUFXcFAsRUFBVVEsT0FBTyxHQUFHLEdBQy9CNk8sRUFBV0QsRUFBU3BRLEtBRWxCbkIsRUFBU3VSLEVBQVR2UixLQUVSLEdBQUlBLElBQVNBLEVBQUt1QixTQUVoQm5DLEtBQUs2UixTQUFTalIsRUFBS1UsTUFBTUssS0FBS3lRLEdBQzlCcFMsS0FBSzhSLFdBQVdNLEdBQVV4UixLQUFPQSxFQUVqQ1MsRUFBTXJCLEtBQUtxUyxrQkFBa0J6UixPQUN4QixDQUVMLElBQU0wUixHQUFjdE8sRUFBQUEsRUFBQUEsZ0JBQWVqQixHQUVuQyxHQUFJdVAsRUFBWXRSLE9BQVMsRUFBRyxDQUMxQixJQUFNdVIsRUFBV0QsRUFBWS9PLE9BQU8sR0FBRyxHQUd2Q2xDLEVBQU1yQixLQUFLcVMsa0JBQWtCRSxFQUMvQixLQUFPLENBRUwsSUFBTUMsRUFBb0J4UyxLQUFLeVMsNkJBQ3pCQyxHQUFhNU8sRUFBQUEsRUFBQUEsYUFBWTBPLEdBR3pCRyxFQUFZM1MsS0FBSzRTLHFCQUFxQkYsR0FHNUNyUixHQUFNeUMsRUFBQUEsRUFBQUEsY0FBWUEsRUFBQUEsRUFBQUEsYUFBWTZPLEdBQ2hDLENBQ0YsQ0FFQSxPQUFPdFIsQ0FDVCxHQUFDLCtCQUVELFNBQWtCVCxHQUNoQixJQUFNaVMsRUFBZTdTLEtBQUs2UixTQUFTalIsRUFBS1UsTUFDbEN3UixFQUFpQixHQUV2QixHQUE0QixJQUF4QkQsRUFBYTdSLE9BQWMsQ0FFN0IsSUFFaUMsRUFGM0JlLEVBQU84USxFQUFhLEdBQUcsSUFFUjdTLEtBQUsrUixTQUFPLElBQWpDLElBQUssRUFBTCxxQkFBbUMsS0FBeEJyTixFQUFNLFFBQ1RSLEVBQU9sRSxLQUFLK1Msb0JBQW9CaFIsRUFBTTJDLEVBQVE5RCxFQUFLSSxPQUFTLEdBQzlEa0QsR0FBTTRPLEVBQWVuUixLQUFLdUMsRUFDaEMsQ0FBQywrQkFDSCxLQUFPLENBRUwsSUFFSThPLEVBRkVDLEVBQVMsQ0FBQzFRLEtBQUsyUSxJQUFHLE1BQVIzUSxLQUFJLEVBQVFzUSxJQUFldFEsS0FBSzRRLElBQUcsTUFBUjVRLEtBQUksRUFBUXNRLEtBS3JERyxHQURHQyxFQUFPLEdBQUtBLEVBQU8sSUFBTSxJQUFPLEVBQ3JCalQsS0FBSytSLFFBQVF4TyxNQUFNLEdBRW5CdkQsS0FBSytSLFFBQVF4TyxNQUFNLEVBQUcsR0FLdEMsSUFBSyxJQUFJN0IsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLEdBQUssRUFBRyxDQUM3QixJQUFNMFIsRUFBUUgsRUFBT3ZSLEdBQ2ZnRCxFQUFTc08sRUFBWXRSLEdBRXJCd0MsRUFBT2xFLEtBQUsrUyxvQkFBb0JLLEVBQU8xTyxFQUFROUQsRUFBS0ksT0FBUzZSLEVBQWE3UixRQUVwRSxNQUFSa0QsR0FBYzRPLEVBQWVuUixLQUFLdUMsRUFDeEMsQ0FDRixDQUVBLE9BQU9KLEVBQUFBLEVBQUFBLGFBQVlnUCxFQUNyQixHQUFDLGtDQUVELFNBQXFCOVIsR0FDbkIsSUFLZ0MsRUFMMUIyUixFQUFZLEdBSWxCLElBRmtCM1MsS0FBS3FULGdCQUdTLElBQWhDLElBQUssRUFBTCxxQkFDRSxJQURnQyxJQUF2QkMsRUFBUSxRQUNqQixNQUFxQixDQUFDLEVBQUcsSUFBRyxlQUFFLENBQXpCLElBQU01TyxFQUFNLEtBQ1Q1RCxHQUFPMkQsRUFBQUEsRUFBQUEsaUJBQWdCNk8sRUFBVTVPLEVBQVExRCxHQUUzQ2hCLEtBQUtvQixnQkFBZ0JOLEVBQU00RCxJQUFTaU8sRUFBVWhSLEtBQUtiLEVBQ3pELENBQ0QsK0JBRUQsT0FBTzZSLENBQ1QsR0FBQyx1QkFFRCxTQUFVbk8sRUFBT3pDLEdBQ2YvQixLQUFLOFIsV0FBV3ROLEdBQU81QyxRQUFTLEVBRWhDRyxFQUFLd1IsT0FDUCxHQUFDLHdDQUVELFdBQTZCLFdBQ3JCZixFQUFvQixHQVExQixPQU5BalIsT0FBT04sS0FBS2pCLEtBQUs2UixVQUFVaFEsU0FBUSxTQUFDcEIsR0FDbEMsSUFBTWlTLEVBQWF0TyxFQUFBQSxZQUFZM0QsR0FFUSxJQUFuQyxFQUFLb1IsU0FBU3BSLEdBQVVPLFFBQWN3UixFQUFrQjdRLEtBQUsrUSxFQUNuRSxJQUVPRixDQUNULEdBQUMsMEJBRUQsV0FBZSxXQUNiLE9BQU94UyxLQUFLOFIsV0FBV3RRLFFBQU8sU0FBQ08sR0FBSSxPQUFNQSxFQUFLSCxNQUFNLElBQ2pEVixLQUFJLFNBQUNhLEdBQUksT0FBSyxFQUFLK1AsV0FBV3RPLFFBQVF6QixFQUFLLEdBQ2hELEdBQUMsNkJBRUQsU0FBZ0JqQixFQUFNSCxHQUNwQixLQUFLYixFQUFBQSxFQUFBQSxxQkFBb0JnQixFQUFNSCxHQUFPLE9BQU8sRUFBTSxJQUU3QixFQUY2QixJQUVqQ0csR0FBSSxJQUF0QixJQUFLLEVBQUwscUJBQXdCLEtBQWJPLEVBQUcsUUFDWixHQUFJckIsS0FBSzhSLFdBQVd6USxHQUFLTyxPQUFRLE9BQU8sQ0FDMUMsQ0FBQywrQkFFRCxPQUFPLENBQ1QsR0FBQyxpQ0FFRCxTQUFvQmxCLEVBQU9nRSxFQUFROE8sR0FJakMsSUFIQSxJQUFJeFMsRUFBU3dTLEVBR054UyxFQUFTLEdBQUcsQ0FDakIsSUFBTXlTLEdBQWdCaFAsRUFBQUEsRUFBQUEsaUJBQWdCL0QsRUFBT2dFLEVBQVExRCxFQUFRLEdBRTdELEdBQUloQixLQUFLb0IsZ0JBQWdCcVMsRUFBZS9PLEdBQVMsT0FBT2hFLEVBQVFnRSxFQUdoRTFELEdBQVUsQ0FDWixDQUVBLE9BQU8sSUFDVCxNLG9FQUFDLEVBeEtLLEcsNndCQ3FNUixRQXpNVSxXQUNSLGMsNEZBQWMsU0FDWmhCLEtBQUswVCxNQUNQLEMsUUFtTUMsTyxFQW5NQSxHLEVBQUEsbUJBRUQsV0FDRTFULEtBQUsyVCxHQUFLLElBQUk5USxLQUNkN0MsS0FBSzRULEdBQUssSUFBSS9RLElBQUosQ0FBVyxJQUFJRyxHQUV6QmhELEtBQUs2VCxLQUFPLElBQUlDLEVBRWhCOVQsS0FBSytULEtBQU8sS0FDWi9ULEtBQUsyTixZQUFjLEVBRW5CM04sS0FBS2lSLE9BQVMsS0FDZGpSLEtBQUtnVSxlQUFpQixDQUNwQnJULEtBQU0sSUFDTjJELFlBQWEsVUFDYjJQLGdCQUFnQixFQUVwQixHQUFDLHdCQUVELFdBQ0VqVSxLQUFLK1QsS0FBc0IsT0FBZC9ULEtBQUsrVCxLQUFpQixLQUFPLElBQzVDLEdBQUMsc0JBRUQsU0FBU2xELEdBS1AsT0FKNkIsSUFBekJBLEVBQVNxRCxjQUNYbFUsS0FBS2lSLE9BQVNqUixLQUFLK1QsTUFHZC9ULEtBQUtpUixNQUNkLEdBQUMsNEJBRUQsU0FBZXpNLEdBQ2IsR0FBbUIsTUFBZnhFLEtBQUtpUixPQUFnQixPQUFPLEVBRWhDLElBQU1KLEVBQVc3USxLQUFLNFQsR0FBRzNULE1BQ25CMFAsRUFBVSxDQUNkaUIsV0FBVyxFQUNYM04sU0FBVWpELEtBQUs0VCxHQUNmM0MsT0FBUSxNQUdWLElBQUtKLEVBQVM1USxNQUFNdUUsR0FBTzVDLE9BQVEsQ0FNakMsR0FMQStOLEVBQVFpQixXQUFZLEVBQ3BCNVEsS0FBSzJOLGFBQWUsRUFFcEIzTixLQUFLMlQsR0FBR1EsU0FBU25VLEtBQUs0VCxHQUFJcFAsSUFFckJ4RSxLQUFLb1UsU0FBU3ZELEdBQVcsQ0FDNUI3USxLQUFLcVUsYUFFTCxJQUFNQyxFQUFZdFUsS0FBSzRULEdBQUc1USxHQUFHdVIsYUFBYXZVLEtBQUs0VCxHQUFHN1EsV0FDNUNoQixFQUFPL0IsS0FBSzZULEtBQUtXLFFBQVF4VSxLQUFLMlQsR0FBR3JTLEtBQU1nVCxHQUM3Q3RVLEtBQUs0VCxHQUFHNVEsR0FBR3lSLFVBQVVILEVBQVd2UyxFQUNsQyxDQUVBNE4sRUFBUXNCLE9BQVNqUixLQUFLaVIsTUFDeEIsQ0FJQSxPQUZBdEIsRUFBUW1CLFVBQVk5USxLQUFLMk4sWUFFbEJnQyxDQUNULEdBQUMsOEJBRUQsU0FBaUJuTCxHQUNmLEdBQW1CLE1BQWZ4RSxLQUFLaVIsT0FBZ0IsT0FBTyxFQUVoQyxJQUFNdEIsRUFBVSxDQUNkaUIsV0FBVyxFQUNYM04sU0FBVWpELEtBQUsyVCxHQUNmMUMsT0FBUSxNQWNWLE1BWGtCLE9BQWRqUixLQUFLK1QsT0FDUHBFLEVBQVFpQixXQUFZLEVBQ3BCNVEsS0FBSzRULEdBQUdPLFNBQVNuVSxLQUFLMlQsR0FBSW5QLEdBRXRCeEUsS0FBS29VLFNBQVNwVSxLQUFLMlQsR0FBRzFULE9BQ3hCMFAsRUFBUXNCLE9BQVNqUixLQUFLaVIsT0FFdEJqUixLQUFLcVUsY0FJRjFFLENBQ1QsR0FBQyxpQ0FFRCxTQUFvQmpPLEdBQUcsSSxFQUFBLE9BQ2ZpTyxFQUFVLENBQ2RHLE9BQU8sRUFDUEMsV0FBWS9QLEtBQUsyVCxHQUFHMVQsTUFBTUEsT0FHNUIsSUFBS0QsS0FBS2dVLGVBQWVDLGVBQWdCLENBQ3ZDLElBQU12QixFQUFhdE8sRUFBQUEsWUFBWXBFLEtBQUtnVSxlQUFlMVAsYUFFN0N4RCxHLEVBQVdDLE1BQU0yUixHQUFZelIsTyxrbkJBQVFDLEtBQUksU0FBQ0MsR0FBQyxNQUFvQyxNQUE3QixFQUFLNlMsZUFBZXJULEtBQWdCZSxFQUFJUCxFQUFJTyxFQUFTLEdBQUpQLENBQU8sSUFJaEgsR0FGZ0JuQixLQUFLMlQsR0FBRzFULE1BQU1tQixnQkFBZ0JOLEVBQU1kLEtBQUtnVSxlQUFlclQsTUFHdEVnUCxFQUFRRyxPQUFRLEVBQ2hCSCxFQUFRQyxTQUFXOU8sT0FDZCxHQUFpQyxNQUE3QmQsS0FBS2dVLGVBQWVyVCxLQUM3QmdQLEVBQVFDLFNBQVc5TyxFQUFLVSxRQUFPLFNBQUNILEdBQUcsT0FBS0EsRUFBTSxHQUFHLFFBQzVDLENBQ0wsSUFBTXFULEVBQVc1VCxFQUFLLEdBR3BCNk8sRUFBUUMsU0FETjhFLEVBQVcsR0FDTTVULEVBQUtVLFFBQU8sU0FBQ0gsR0FBRyxPQUFLQSxFQUFNLEVBQUUsSUFFN0JQLEVBQUtVLFFBQU8sU0FBQ0gsR0FBRyxPQUFLQSxFQUFJZ0MsV0FBVyxLQUFPcVIsRUFBU3JSLFdBQVcsRUFBRSxHQUV4RixDQUNGLENBRUEsT0FBT3NNLENBQ1QsR0FBQyx1QkFFRCxTQUFVbkwsR0FDUixJQUFNaU0sRUFBTyxDQUFDLEVBTWQsR0FKQXpRLEtBQUsyVCxHQUFHMVQsTUFBTXlDLFVBQVUxQyxLQUFLZ1UsZUFBZTFQLFlBQWFFLEVBQU94RSxLQUFLZ1UsZUFBZXJULE1BRXBGOFAsRUFBS3hRLE1BQVFELEtBQUsyVCxHQUFHMVQsTUFBTUEsTUFFbUIsSUFBMUNELEtBQUsyVCxHQUFHMVQsTUFBTTBVLGlCQUFpQjNULE9BQ2pDeVAsRUFBS0UsU0FBVyxLQUNoQjNRLEtBQUtnVSxlQUFlQyxnQkFBaUIsTUFDaEMsQ0FDTCxJQUFNdEQsR0FBV3RNLEVBQUFBLEVBQUFBLGFBQVlyRSxLQUFLZ1UsZUFBZTFQLGFBQ2pEdEUsS0FBS2dVLGVBQWUxUCxZQUFjcU0sRUFDbENGLEVBQUtFLFNBQVdBLENBQ2xCLENBRUEsT0FBT0YsQ0FDVCxHQUFDLGlDQUVELFdBQ0V6USxLQUFLZ1UsZUFBZXJULEtBQXFDLE1BQTdCWCxLQUFLZ1UsZUFBZXJULEtBQWdCLElBQU0sR0FDeEUsR0FBQyxrQ0FFRCxXQU1FLE9BTEFYLEtBQUsyVCxHQUFHMVQsTUFBTU8sWUFDZFIsS0FBSzJULEdBQUcxVCxNQUFNMlUscUJBRWQ1VSxLQUFLZ1UsZUFBZUMsZ0JBQWlCLEVBRTlCalUsS0FBSzJULEdBQUcxVCxNQUFNQSxLQUN2QixHQUFDLDhCQUVELFdBU0UsT0FSQUQsS0FBSzJULEdBQUcxVCxNQUFNTyxZQUVkUixLQUFLZ1UsZUFBaUIsQ0FDcEJyVCxLQUFNLElBQ04yRCxZQUFhLFVBQ2IyUCxnQkFBZ0IsR0FHWGpVLEtBQUsyVCxHQUFHMVQsTUFBTUEsS0FDdkIsR0FBQyx1QkFFRCxXQUNFRCxLQUFLNlQsS0FBS2dCLFlBQVk3VSxLQUFLMlQsSUFDM0IzVCxLQUFLNlQsS0FBS2lCLG9CQUVWOVUsS0FBSzZULEtBQUtrQixrQkFBa0IvVSxLQUFLZ1Ysb0JBQW9CQyxLQUFLalYsT0FDMURBLEtBQUs2VCxLQUFLcUIsa0JBQWtCbFYsS0FBS21WLG9CQUFvQkYsS0FBS2pWLE9BQzFEQSxLQUFLNlQsS0FBS3VCLHVCQUF1QnBWLEtBQUswQyxVQUFVdVMsS0FBS2pWLE9BRXJEQSxLQUFLNlQsS0FBS3dCLHNCQUFzQnJWLEtBQUtzVixxQkFBcUJMLEtBQUtqVixPQUMvREEsS0FBSzZULEtBQUswQixxQkFBcUJ2VixLQUFLd1YsaUJBQWlCUCxLQUFLalYsT0FDMURBLEtBQUs2VCxLQUFLNEIscUJBQXFCelYsS0FBSzBWLFVBQVVULEtBQUtqVixNQUNyRCxHQUFDLHVCQUVELFdBQ0VBLEtBQUs0VCxHQUFHM1QsTUFBTTJVLHFCQUVkNVUsS0FBSzZULEtBQUsxQyx5QkFBeUJuUixLQUFLMlQsR0FBR3JTLE1BRTNDdEIsS0FBSzZULEtBQUtnQixZQUFZN1UsS0FBSzJULElBQzNCM1QsS0FBSzZULEtBQUs4QixnQkFBZ0IzVixLQUFLMlQsSUFFL0IzVCxLQUFLNlQsS0FBS2dCLFlBQVk3VSxLQUFLNFQsSUFDM0I1VCxLQUFLNlQsS0FBSzhCLGdCQUFnQjNWLEtBQUs0VCxJQUUvQjVULEtBQUs2VCxLQUFLK0Isc0JBQXNCNVYsS0FBSzZWLGVBQWVaLEtBQUtqVixNQUFPQSxLQUFLMlQsSUFDckUzVCxLQUFLNlQsS0FBSytCLHNCQUFzQjVWLEtBQUs4VixpQkFBaUJiLEtBQUtqVixNQUFPQSxLQUFLNFQsSUFDdkU1VCxLQUFLNlQsS0FBS2tDLHVCQUF1Qi9WLEtBQUtnVyxZQUFZZixLQUFLalYsTUFDekQsR0FBQyx5QkFFRCxXQUNFQSxLQUFLMFQsT0FFTDFULEtBQUtpVyxXQUNQLE0sb0VBQUMsRUF0TU8sRyx5SENLTnpQLEVBQVUsQ0FBQyxFQUVmQSxFQUFRZ0Usa0JBQW9CLElBQzVCaEUsRUFBUTBELGNBQWdCLElBRWxCMUQsRUFBUThDLE9BQVMsU0FBYyxLQUFNLFFBRTNDOUMsRUFBUW9DLE9BQVMsSUFDakJwQyxFQUFRK0QsbUJBQXFCLElBRWhCLElBQUksSUFBUy9ELEdBS0osS0FBVyxZQUFpQixZQ3RCckMsSUFBSTBQLEdBRVpELFciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2FwcC9tb2RlbHMvR2FtZUJvYXJkLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvYXBwL21vZGVscy9QbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9hcHAvbW9kZWxzL1NoaXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9hcHAvbW9kdWxlcy9oZWxwZXJzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL2NvbXBvbmVudHMvYm9keS5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvY29tcG9uZW50cy9mb290ZXIuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL2NvbXBvbmVudHMvZ2FtZS1ib2FyZC5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvY29tcG9uZW50cy9nYW1lLXdpbmRvdy5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZXMvY29tcG9uZW50cy9oZWFkZXIuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL2NvbXBvbmVudHMvbWVzc2FnZS13aW5kb3cuY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL21haW4uY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9hcHAvbW9kdWxlcy92aWV3LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvYXBwL21vZHVsZXMvQUkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9hcHAvbW9kdWxlcy9nYW1lLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGVzL21haW4uY3NzP2U4MGEiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9hcHAvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU2hpcCA9IHJlcXVpcmUoJy4vU2hpcCcpO1xuY29uc3QgeyBjaGVja0VkZ2VDb2xsaXNpb25zIH0gPSByZXF1aXJlKCcuLi9tb2R1bGVzL2hlbHBlcnMnKTtcblxuY2xhc3MgR2FtZUJvYXJkIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5ib2FyZCA9IFtdO1xuXG4gICAgdGhpcy5zaGlwcyA9IHtcbiAgICAgIGNhcnJpZXI6IG5ldyBTaGlwKDUsICdjYXJyaWVyJyksXG4gICAgICBiYXR0bGVzaGlwOiBuZXcgU2hpcCg0LCAnYmF0dGxlc2hpcCcpLFxuICAgICAgY3J1aXNlcjogbmV3IFNoaXAoMywgJ2NydWlzZXInKSxcbiAgICAgIHN1Ym1hcmluZTogbmV3IFNoaXAoMywgJ3N1Ym1hcmluZScpLFxuICAgICAgcGF0cm9sQm9hdDogbmV3IFNoaXAoMiwgJ3BhdHJvbEJvYXQnKSxcbiAgICB9O1xuXG4gICAgdGhpcy5pbml0Qm9hcmQoKTtcbiAgfVxuXG4gIHBsYWNlU2hpcChzaGlwTmFtZSwgc3RhcnQsIGF4aXMpIHtcbiAgICBjb25zdCBzaGlwID0gdGhpcy5zaGlwc1tzaGlwTmFtZV07XG4gICAgc2hpcC5wbGFjZSgpO1xuXG4gICAgY29uc3QgbG9jcyA9IFsuLi5BcnJheShzaGlwLmxlbmd0aCkua2V5cygpXS5tYXAoKG4pID0+ICgoYXhpcyA9PT0gJ3gnKSA/IHN0YXJ0ICsgbiA6IHN0YXJ0ICsgKG4gKiAxMCkpKTtcblxuICAgIGNvbnN0IGlzVmFsaWQgPSB0aGlzLmNoZWNrQ29sbGlzaW9ucyhsb2NzLCBheGlzLCB0aGlzLmJvYXJkKTtcblxuICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICBmb3IgKGNvbnN0IGxvYyBvZiBsb2NzKSB7XG4gICAgICAgIHRoaXMuYm9hcmRbbG9jXS5zaGlwID0gc2hpcC5uYW1lO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBnZXRTaGlwc1BsYWNlZCgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5zaGlwcykuZmlsdGVyKChzaGlwKSA9PiB0aGlzLnNoaXBzW3NoaXBdLmlzUGxhY2VkKTtcbiAgfVxuXG4gIGluaXRCb2FyZCgpIHtcbiAgICB0aGlzLmJvYXJkID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSArPSAxKSB7XG4gICAgICB0aGlzLmJvYXJkLnB1c2goeyBzaGlwOiBudWxsLCBpc1Nob3Q6IGZhbHNlIH0pO1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKHRoaXMuc2hpcHMpLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgIHRoaXMuc2hpcHNbc2hpcF0uaXNQbGFjZWQgPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzU2hvdEhpdChsb2MpIHtcbiAgICByZXR1cm4gdGhpcy5ib2FyZFtsb2NdLmlzU2hvdCAmJiB0aGlzLmJvYXJkW2xvY10uc2hpcCAhPSBudWxsO1xuICB9XG5cbiAgcmVjZWl2ZUF0dGFjayhsb2MpIHtcbiAgICBjb25zdCBtb3ZlSW5mbyA9IHtcbiAgICAgIHNoaXA6IG51bGwsXG4gICAgICBjZWxsOiBsb2MsXG4gICAgfTtcblxuICAgIGlmICghdGhpcy5ib2FyZFtsb2NdLmlzU2hvdCkge1xuICAgICAgdGhpcy5ib2FyZFtsb2NdLmlzU2hvdCA9IHRydWU7XG5cbiAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuYm9hcmRbbG9jXS5zaGlwO1xuXG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIGNvbnN0IHNoaXAgPSB0aGlzLnNoaXBzW3RhcmdldF07XG5cbiAgICAgICAgbW92ZUluZm8uc2hpcCA9IHNoaXA7XG4gICAgICAgIHNoaXAuaGl0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb3ZlSW5mby5zaGlwID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbW92ZUluZm87XG4gIH1cblxuICBzaGlwQXQobG9jKSB7XG4gICAgcmV0dXJuIHRoaXMuc2hpcHNbdGhpcy5ib2FyZFtsb2NdLnNoaXBdO1xuICB9XG5cbiAgc2hpcHNTdW5rKCkge1xuICAgIGxldCBzdW5rID0gMDtcblxuICAgIE9iamVjdC5rZXlzKHRoaXMuc2hpcHMpLmZvckVhY2goKHNoaXBOYW1lKSA9PiB7XG4gICAgICBpZiAodGhpcy5zaGlwc1tzaGlwTmFtZV0uaXNTdW5rKCkpIHtcbiAgICAgICAgc3VuayArPSAxO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHN1bms7XG4gIH1cblxuICBwbGFjZVNoaXBzUmFuZG9tbHkoKSB7XG4gICAgY29uc3QgYXhlcyA9IFsneCcsICd5J107XG4gICAgY29uc3QgY2VsbHMgPSBbLi4uQXJyYXkoMTAwKS5rZXlzKCldO1xuXG4gICAgT2JqZWN0LmtleXModGhpcy5zaGlwcykuZm9yRWFjaCgoc2hpcE5hbWUpID0+IHtcbiAgICAgIGxldCB2YWxpZFBsYWNlbWVudCA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoIXZhbGlkUGxhY2VtZW50KSB7XG4gICAgICAgIGNvbnN0IGxvYyA9IGNlbGxzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCldO1xuICAgICAgICBjb25zdCBheGlzID0gYXhlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKV07XG5cbiAgICAgICAgdmFsaWRQbGFjZW1lbnQgPSB0aGlzLnBsYWNlU2hpcChzaGlwTmFtZSwgbG9jLCBheGlzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNoZWNrQ29sbGlzaW9ucyhsb2NzLCBheGlzKSB7XG4gICAgaWYgKCFjaGVja0VkZ2VDb2xsaXNpb25zKGxvY3MsIGF4aXMpKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGNvbnN0IGxvYyBvZiBsb2NzKSB7XG4gICAgICBpZiAodGhpcy5ib2FyZFtsb2NdLnNoaXAgIT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gR2FtZUJvYXJkO1xuIiwiY29uc3QgR2FtZUJvYXJkID0gcmVxdWlyZSgnLi9HYW1lQm9hcmQnKTtcblxuY2xhc3MgUGxheWVyIHtcbiAgY29uc3RydWN0b3IoYWkpIHtcbiAgICB0aGlzLmJvYXJkID0gbmV3IEdhbWVCb2FyZCgpO1xuICAgIHRoaXMuc2hpcHMgPSB0aGlzLmJvYXJkLnNoaXBzO1xuICAgIHRoaXMubmFtZSA9IGFpID8gJ3AyJyA6ICdwMSc7XG4gICAgdGhpcy5tb3Zlc01hZGUgPSBbXTtcblxuICAgIGlmIChhaSkge1xuICAgICAgdGhpcy5BSSA9IGFpO1xuICAgIH1cbiAgfVxuXG4gIGZpcmVTaG90KG9wcG9uZW50LCBsb2MpIHtcbiAgICBjb25zdCBtb3ZlSW5mbyA9IG9wcG9uZW50LmJvYXJkLnJlY2VpdmVBdHRhY2sobG9jKTtcbiAgICB0aGlzLm1vdmVzTWFkZS5wdXNoKG1vdmVJbmZvKTtcblxuICAgIHJldHVybiBtb3ZlSW5mbztcbiAgfVxuXG4gIGdldENlbGwobG9jKSB7XG4gICAgcmV0dXJuIHRoaXMuYm9hcmQuYm9hcmRbbG9jXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBsYXllcjtcbiIsImNsYXNzIFNoaXAge1xuICBjb25zdHJ1Y3RvcihsZW5ndGgsIG5hbWUpIHtcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuaGl0cyA9IDA7XG4gICAgdGhpcy5zdW5rID0gZmFsc2U7XG4gICAgdGhpcy5pc1BsYWNlZCA9IGZhbHNlO1xuICB9XG5cbiAgaGl0KCkge1xuICAgIHRoaXMuaGl0cyArPSAxO1xuXG4gICAgaWYgKHRoaXMuaGl0cyA9PT0gdGhpcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc3VuayA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaXNTdW5rKCkge1xuICAgIHJldHVybiB0aGlzLnN1bms7XG4gIH1cblxuICBwbGFjZSgpIHtcbiAgICB0aGlzLmlzUGxhY2VkID0gdHJ1ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoaXA7XG4iLCJleHBvcnQgZnVuY3Rpb24gY2hlY2tFZGdlQ29sbGlzaW9ucyhsb2NzLCBheGlzKSB7XG4gIGZvciAoY29uc3QgbG9jIG9mIGxvY3MpIHtcbiAgICBpZiAobG9jIDwgMCB8fCBsb2MgPiA5OSkgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGxvY3MubGVuZ3RoID09PSAxKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYXhpcyA9PT0gJ3gnIHx8IGF4aXMgPT09IDEgfHwgYXhpcyA9PT0gLTEpIHtcbiAgICBjb25zdCBsb2NzU3RyID0gbG9jcy5tYXAoKGxvYykgPT4gbG9jLnRvU3RyaW5nKCkpO1xuXG4gICAgaWYgKGxvY3NTdHIuc29tZSgobG9jKSA9PiBsb2Muc2xpY2UoLTEpID09PSAnOScgJiYgbG9jc1N0ci5pbmRleE9mKGxvYykgIT09IChsb2NzU3RyLmxlbmd0aCAtIDEpKSkgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KHRhZywgY2xhc3NOYW1lKSB7XG4gIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmIChjbGFzc05hbWUpIGVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuXG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmFuZEVsZW1lbnQoYXJyKSB7XG4gIHJldHVybiBhcnJbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyLmxlbmd0aCldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWN0aXZlU2hpcHMobW92ZXNNYWRlKSB7XG4gIGNvbnN0IHNoaXBNb3ZlcyA9IG1vdmVzTWFkZS5maWx0ZXIoKG1vdmUpID0+IG1vdmUuc2hpcCAhPSBudWxsICYmICFtb3ZlLnNoaXAuaXNTdW5rKCkpO1xuXG4gIHJldHVybiAoc2hpcE1vdmVzLmxlbmd0aCA+IDApID8gWy4uLm5ldyBTZXQoc2hpcE1vdmVzLm1hcCgobW92ZSkgPT4gbW92ZS5zaGlwKSldIDogW107XG59XG5cbmV4cG9ydCBjb25zdCBzaGlwTGVuZ3RocyA9IHtcbiAgY2FycmllcjogNSxcbiAgYmF0dGxlc2hpcDogNCxcbiAgY3J1aXNlcjogMyxcbiAgc3VibWFyaW5lOiAzLFxuICBwYXRyb2xCb2F0OiAyLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRTaGlwKGN1cnJlbnRTaGlwKSB7XG4gIGNvbnN0IHNoaXBOYW1lcyA9IE9iamVjdC5rZXlzKHNoaXBMZW5ndGhzKTtcblxuICBjb25zdCBpbmRleCA9IHNoaXBOYW1lcy5pbmRleE9mKGN1cnJlbnRTaGlwKTtcblxuICBpZiAoaW5kZXggPCA0KSByZXR1cm4gc2hpcE5hbWVzW2luZGV4ICsgMV07XG5cbiAgcmV0dXJuIHNoaXBOYW1lc1tpbmRleF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0U2hpcExvY3Moc3RhcnQsIG9mZnNldCwgbGVuZ3RoLCBzaGlmdCA9IDApIHtcbiAgcmV0dXJuIFsuLi5BcnJheShsZW5ndGgpLmtleXMoKV0ubWFwKChpKSA9PiBzdGFydCArIChvZmZzZXQgKiAoaSArIHNoaWZ0KSkpO1xufVxuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWVzc2FnZS13aW5kb3cuY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZ2FtZS13aW5kb3cuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMV9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIjYm9keSB7XFxuXFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gMWZyO1xcblxcdGJhY2tncm91bmQtY29sb3I6IHJnYigyMjEsIDE3NSwgMjUyKTtcXG59XFxuXFxuI2JvZHksIGJ1dHRvbiB7XFxuXFx0Zm9udC1mYW1pbHk6ICdUeXBvUm91bmRMaWdodCcsIHNhbnMtc2VyaWY7XFxufVxcblxcbmJ1dHRvbiB7XFxuXFx0Ym9yZGVyOiBub25lO1xcblxcdGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL2NvbXBvbmVudHMvYm9keS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBR0E7Q0FDQyxhQUFhO0NBQ2IsNEJBQTRCO0NBQzVCLG9DQUFvQztBQUNyQzs7QUFFQTtDQUNDLHlDQUF5QztBQUMxQzs7QUFFQTtDQUNDLFlBQVk7Q0FDWiw2QkFBNkI7QUFDOUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCAnLi9tZXNzYWdlLXdpbmRvdy5jc3MnO1xcbkBpbXBvcnQgJy4vZ2FtZS13aW5kb3cuY3NzJztcXG5cXG4jYm9keSB7XFxuXFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gMWZyO1xcblxcdGJhY2tncm91bmQtY29sb3I6IHJnYigyMjEsIDE3NSwgMjUyKTtcXG59XFxuXFxuI2JvZHksIGJ1dHRvbiB7XFxuXFx0Zm9udC1mYW1pbHk6ICdUeXBvUm91bmRMaWdodCcsIHNhbnMtc2VyaWY7XFxufVxcblxcbmJ1dHRvbiB7XFxuXFx0Ym9yZGVyOiBub25lO1xcblxcdGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIjZm9vdGVyIHtcXG5cXHRkaXNwbGF5OiBmbGV4O1xcblxcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuXFx0Z2FwOiA4cHg7XFxuXFx0cGFkZGluZzogOHB4O1xcblxcdGZvbnQtZmFtaWx5OiAnVHlwb1JvdW5kTGlnaHQnLCBzYW5zLXNlcmlmO1xcblxcdGJhY2tncm91bmQtY29sb3I6IHJnYigxMTMsIDQ3LCAyNTUpO1xcblxcdGNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuI2dpdGh1Yi1sb2dvIHtcXG5cXHR3aWR0aDogMjVweDtcXG5cXHRoZWlnaHQ6IDI1cHg7XFxufVxcblxcbiNmb290ZXIgPiBwID4gYSB7XFxuXFx0Y29sb3I6IHJnYigxNzcsIDI0NiwgMjU1KTtcXG5cXHRmb250LXdlaWdodDogYm9sZDtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9jb21wb25lbnRzL2Zvb3Rlci5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7Q0FDQyxhQUFhO0NBQ2IsbUJBQW1CO0NBQ25CLHVCQUF1QjtDQUN2QixRQUFRO0NBQ1IsWUFBWTtDQUNaLHlDQUF5QztDQUN6QyxtQ0FBbUM7Q0FDbkMsWUFBWTtBQUNiOztBQUVBO0NBQ0MsV0FBVztDQUNYLFlBQVk7QUFDYjs7QUFFQTtDQUNDLHlCQUF5QjtDQUN6QixpQkFBaUI7QUFDbEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiI2Zvb3RlciB7XFxuXFx0ZGlzcGxheTogZmxleDtcXG5cXHRhbGlnbi1pdGVtczogY2VudGVyO1xcblxcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcdGdhcDogOHB4O1xcblxcdHBhZGRpbmc6IDhweDtcXG5cXHRmb250LWZhbWlseTogJ1R5cG9Sb3VuZExpZ2h0Jywgc2Fucy1zZXJpZjtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTEzLCA0NywgMjU1KTtcXG5cXHRjb2xvcjogd2hpdGU7XFxufVxcblxcbiNnaXRodWItbG9nbyB7XFxuXFx0d2lkdGg6IDI1cHg7XFxuXFx0aGVpZ2h0OiAyNXB4O1xcbn1cXG5cXG4jZm9vdGVyID4gcCA+IGEge1xcblxcdGNvbG9yOiByZ2IoMTc3LCAyNDYsIDI1NSk7XFxuXFx0Zm9udC13ZWlnaHQ6IGJvbGQ7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiLi4vLi4vYXNzZXRzL2Nyb3NzLnN2Z1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gbmV3IFVSTChcIi4uLy4uL2Fzc2V0cy9kb3Quc3ZnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5nYW1lLWJvYXJkIHtcXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLCAxZnIpO1xcblxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCAxZnIpO1xcblxcdGdhcDogMnB4O1xcblxcdGJhY2tncm91bmQtY29sb3I6IHNreWJsdWU7XFxuXFx0cGFkZGluZzogNHB4O1xcblxcdGJvcmRlcjogNHB4IHNvbGlkIG5hdnk7XFxuXFx0Ym9yZGVyLXJhZGl1czogNHB4O1xcblxcdG1hcmdpbi1ib3R0b206IDhweDtcXG59XFxuXFxuLmNlbGwge1xcblxcdHBvc2l0aW9uOiByZWxhdGl2ZTtcXG5cXHR3aWR0aDogMzBweDtcXG5cXHRoZWlnaHQ6IDMwcHg7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuXFx0Ym9yZGVyLXJhZGl1czogNHB4O1xcbn1cXG5cXG4jcDEtYm9hcmQgLmNlbGwuaGFzLXNoaXAsICNwMi1ib2FyZCAuY2VsbC5oYXMtc2hpcC5oaXQge1xcblxcdGJhY2tncm91bmQtY29sb3I6ICMzMzQzQUU7XFxufVxcblxcbi5jZWxsLnZhbGlkIHtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTQ3LCAyNTUsIDI0OCk7XFxufVxcblxcbi5jZWxsLmludmFsaWQge1xcblxcdGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDkyLCA5Mik7XFxufVxcblxcbiNwMS1ib2FyZCAuY2VsbC5oYXMtc2hpcC5oaXQ6OmFmdGVyLCAjcDItYm9hcmQgLmNlbGwuaGFzLXNoaXAuaGl0OjphZnRlciB7XFxuXFx0Y29udGVudDogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKTtcXG5cXHRwb3NpdGlvbjogYWJzb2x1dGU7IFxcblxcdGluc2V0OiAwO1xcblxcdG1hcmdpbjogYXV0bztcXG5cXHR3aWR0aDogMzBweDtcXG5cXHRoZWlnaHQ6IDMwcHg7XFxufVxcblxcbi5jZWxsLmhpdDo6YWZ0ZXIge1xcblxcdGNvbnRlbnQ6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIik7XFxuXFx0cG9zaXRpb246IGFic29sdXRlOyBcXG5cXHRpbnNldDogMDtcXG5cXHRtYXJnaW46IGF1dG87XFxuXFx0d2lkdGg6IDMwcHg7XFxuXFx0aGVpZ2h0OiAzMHB4O1xcbn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL2NvbXBvbmVudHMvZ2FtZS1ib2FyZC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7Q0FDQyxhQUFhO0NBQ2IsbUNBQW1DO0NBQ25DLHNDQUFzQztDQUN0QyxRQUFRO0NBQ1IseUJBQXlCO0NBQ3pCLFlBQVk7Q0FDWixzQkFBc0I7Q0FDdEIsa0JBQWtCO0NBQ2xCLGtCQUFrQjtBQUNuQjs7QUFFQTtDQUNDLGtCQUFrQjtDQUNsQixXQUFXO0NBQ1gsWUFBWTtDQUNaLHVCQUF1QjtDQUN2QixrQkFBa0I7QUFDbkI7O0FBRUE7Q0FDQyx5QkFBeUI7QUFDMUI7O0FBRUE7Q0FDQyxvQ0FBb0M7QUFDckM7O0FBRUE7Q0FDQyxrQ0FBa0M7QUFDbkM7O0FBRUE7Q0FDQyxnREFBc0M7Q0FDdEMsa0JBQWtCO0NBQ2xCLFFBQVE7Q0FDUixZQUFZO0NBQ1osV0FBVztDQUNYLFlBQVk7QUFDYjs7QUFFQTtDQUNDLGdEQUFvQztDQUNwQyxrQkFBa0I7Q0FDbEIsUUFBUTtDQUNSLFlBQVk7Q0FDWixXQUFXO0NBQ1gsWUFBWTtBQUNiXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5nYW1lLWJvYXJkIHtcXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDEwLCAxZnIpO1xcblxcdGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDEwLCAxZnIpO1xcblxcdGdhcDogMnB4O1xcblxcdGJhY2tncm91bmQtY29sb3I6IHNreWJsdWU7XFxuXFx0cGFkZGluZzogNHB4O1xcblxcdGJvcmRlcjogNHB4IHNvbGlkIG5hdnk7XFxuXFx0Ym9yZGVyLXJhZGl1czogNHB4O1xcblxcdG1hcmdpbi1ib3R0b206IDhweDtcXG59XFxuXFxuLmNlbGwge1xcblxcdHBvc2l0aW9uOiByZWxhdGl2ZTtcXG5cXHR3aWR0aDogMzBweDtcXG5cXHRoZWlnaHQ6IDMwcHg7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuXFx0Ym9yZGVyLXJhZGl1czogNHB4O1xcbn1cXG5cXG4jcDEtYm9hcmQgLmNlbGwuaGFzLXNoaXAsICNwMi1ib2FyZCAuY2VsbC5oYXMtc2hpcC5oaXQge1xcblxcdGJhY2tncm91bmQtY29sb3I6ICMzMzQzQUU7XFxufVxcblxcbi5jZWxsLnZhbGlkIHtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTQ3LCAyNTUsIDI0OCk7XFxufVxcblxcbi5jZWxsLmludmFsaWQge1xcblxcdGJhY2tncm91bmQtY29sb3I6IHJnYigyNTUsIDkyLCA5Mik7XFxufVxcblxcbiNwMS1ib2FyZCAuY2VsbC5oYXMtc2hpcC5oaXQ6OmFmdGVyLCAjcDItYm9hcmQgLmNlbGwuaGFzLXNoaXAuaGl0OjphZnRlciB7XFxuXFx0Y29udGVudDogdXJsKCcuLi8uLi9hc3NldHMvY3Jvc3Muc3ZnJyk7XFxuXFx0cG9zaXRpb246IGFic29sdXRlOyBcXG5cXHRpbnNldDogMDtcXG5cXHRtYXJnaW46IGF1dG87XFxuXFx0d2lkdGg6IDMwcHg7XFxuXFx0aGVpZ2h0OiAzMHB4O1xcbn1cXG5cXG4uY2VsbC5oaXQ6OmFmdGVyIHtcXG5cXHRjb250ZW50OiB1cmwoJy4uLy4uL2Fzc2V0cy9kb3Quc3ZnJyk7XFxuXFx0cG9zaXRpb246IGFic29sdXRlOyBcXG5cXHRpbnNldDogMDtcXG5cXHRtYXJnaW46IGF1dG87XFxuXFx0d2lkdGg6IDMwcHg7XFxuXFx0aGVpZ2h0OiAzMHB4O1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZ2FtZS1ib2FyZC5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIiNnYW1lLXdpbmRvdyBoMiB7XFxuXFx0dGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4jZ2FtZS13aW5kb3cge1xcblxcdGRpc3BsYXk6IGZsZXg7XFxuXFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG5cXHRmbGV4LXdyYXA6IHdyYXA7XFxufVxcblxcbi5nYW1lLWJ1dHRvbnMge1xcblxcdGRpc3BsYXk6IGdyaWQ7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xcblxcdGdyaWQtdGVtcGxhdGUtcm93czogYXV0byBhdXRvO1xcbn1cXG5cXG4uZ2FtZS1idXR0b25zIGJ1dHRvbiB7XFxuXFx0Zm9udC1zaXplOiAxNnB4O1xcbn1cXG5cXG4uZ2FtZS1idXR0b25zIGJ1dHRvbjpob3ZlciB7XFxuXFx0Y29sb3I6IHdoaXRlO1xcbn1cXG5cXG4uYm9hcmQtaW5mbyB7XFxuXFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgyLCBtaW4tY29udGVudCk7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNSwgMWZyKTtcXG59XFxuXFxuLmJvYXJkLWluZm8gcCB7XFxuXFx0Zm9udC1zaXplOiA4cHg7XFxufVxcblxcbi5wcm9ncmVzcy1tZXRlciB7XFxuXFx0d2lkdGg6IDUwcHg7XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvY29tcG9uZW50cy9nYW1lLXdpbmRvdy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7Q0FDQyxrQkFBa0I7QUFDbkI7O0FBRUE7Q0FDQyxhQUFhO0NBQ2IsbUJBQW1CO0NBQ25CLDZCQUE2QjtDQUM3QixlQUFlO0FBQ2hCOztBQUVBO0NBQ0MsYUFBYTtDQUNiLDhCQUE4QjtDQUM5Qiw2QkFBNkI7QUFDOUI7O0FBRUE7Q0FDQyxlQUFlO0FBQ2hCOztBQUVBO0NBQ0MsWUFBWTtBQUNiOztBQUVBO0NBQ0MsYUFBYTtDQUNiLDBDQUEwQztDQUMxQyxxQ0FBcUM7QUFDdEM7O0FBRUE7Q0FDQyxjQUFjO0FBQ2Y7O0FBRUE7Q0FDQyxXQUFXO0FBQ1pcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCAnLi9nYW1lLWJvYXJkLmNzcyc7XFxuXFxuI2dhbWUtd2luZG93IGgyIHtcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbiNnYW1lLXdpbmRvdyB7XFxuXFx0ZGlzcGxheTogZmxleDtcXG5cXHRhbGlnbi1pdGVtczogY2VudGVyO1xcblxcdGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcblxcdGZsZXgtd3JhcDogd3JhcDtcXG59XFxuXFxuLmdhbWUtYnV0dG9ucyB7XFxuXFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIGF1dG87XFxufVxcblxcbi5nYW1lLWJ1dHRvbnMgYnV0dG9uIHtcXG5cXHRmb250LXNpemU6IDE2cHg7XFxufVxcblxcbi5nYW1lLWJ1dHRvbnMgYnV0dG9uOmhvdmVyIHtcXG5cXHRjb2xvcjogd2hpdGU7XFxufVxcblxcbi5ib2FyZC1pbmZvIHtcXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDIsIG1pbi1jb250ZW50KTtcXG5cXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg1LCAxZnIpO1xcbn1cXG5cXG4uYm9hcmQtaW5mbyBwIHtcXG5cXHRmb250LXNpemU6IDhweDtcXG59XFxuXFxuLnByb2dyZXNzLW1ldGVyIHtcXG5cXHR3aWR0aDogNTBweDtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiI2hlYWRlciB7XFxuXFx0cGFkZGluZzogMTZweDtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTEzLCA0NywgMjU1KTtcXG5cXHRjb2xvcjogd2hpdGU7XFxufVxcblxcbiNoZWFkZXIgaDEge1xcblxcdG1hcmdpbi1sZWZ0OiAyNHB4O1xcblxcdGZvbnQtZmFtaWx5OiAnQXJpc3RhUHJvJywgc2Fucy1zZXJpZjtcXG5cXHRmb250LXNpemU6IDQ4cHg7XFxufVxcblxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvY29tcG9uZW50cy9oZWFkZXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0NBQ0MsYUFBYTtDQUNiLG1DQUFtQztDQUNuQyxZQUFZO0FBQ2I7O0FBRUE7Q0FDQyxpQkFBaUI7Q0FDakIsb0NBQW9DO0NBQ3BDLGVBQWU7QUFDaEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiI2hlYWRlciB7XFxuXFx0cGFkZGluZzogMTZweDtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTEzLCA0NywgMjU1KTtcXG5cXHRjb2xvcjogd2hpdGU7XFxufVxcblxcbiNoZWFkZXIgaDEge1xcblxcdG1hcmdpbi1sZWZ0OiAyNHB4O1xcblxcdGZvbnQtZmFtaWx5OiAnQXJpc3RhUHJvJywgc2Fucy1zZXJpZjtcXG5cXHRmb250LXNpemU6IDQ4cHg7XFxufVxcblxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIiNtZXNzYWdlLXdpbmRvdyB7XFxuXFx0aGVpZ2h0OiA0OHB4O1xcblxcdGRpc3BsYXk6IGdyaWQ7XFxuXFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgYXV0byBhdXRvO1xcblxcdG1hcmdpbi1ib3R0b206IDE2cHg7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogcmdiKDU4LCAxMywgMTU2KTtcXG5cXHRjb2xvcjogd2hpdGU7XFxuXFx0Z2FwOiAyNHB4O1xcbn1cXG5cXG4uZ2FtZS1tZXNzYWdlIHtcXG5cXHR0ZXh0LWFsaWduOiBjZW50ZXI7XFxuXFx0bWFyZ2luOiBhdXRvO1xcblxcdGZvbnQtc2l6ZTogMjBweDtcXG59XFxuXFxuI21lc3NhZ2Utd2luZG93IGJ1dHRvbiB7XFxuXFx0Y29sb3I6IHdoaXRlO1xcblxcdG1hcmdpbi10b3A6IGF1dG87XFxuXFx0bWFyZ2luLWJvdHRvbTogYXV0bztcXG59XFxuXFxuLnN0YXJ0LWJ1dHRvbiB7XFxuXFx0Zm9udC1zaXplOiAyNHB4O1xcbn1cXG5cXG4jdHVybi1jb3VudGVyIHtcXG5cXHRtYXJnaW46IGF1dG87XFxufVxcblxcbi5yZXN0YXJ0LWJ1dHRvbiB7XFxuXFx0Zm9udC1zaXplOiAxNnB4O1xcblxcdG1hcmdpbi1yaWdodDogMTZweDtcXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9jb21wb25lbnRzL21lc3NhZ2Utd2luZG93LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtDQUNDLFlBQVk7Q0FDWixhQUFhO0NBQ2Isb0NBQW9DO0NBQ3BDLG1CQUFtQjtDQUNuQixrQ0FBa0M7Q0FDbEMsWUFBWTtDQUNaLFNBQVM7QUFDVjs7QUFFQTtDQUNDLGtCQUFrQjtDQUNsQixZQUFZO0NBQ1osZUFBZTtBQUNoQjs7QUFFQTtDQUNDLFlBQVk7Q0FDWixnQkFBZ0I7Q0FDaEIsbUJBQW1CO0FBQ3BCOztBQUVBO0NBQ0MsZUFBZTtBQUNoQjs7QUFFQTtDQUNDLFlBQVk7QUFDYjs7QUFFQTtDQUNDLGVBQWU7Q0FDZixrQkFBa0I7QUFDbkJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiI21lc3NhZ2Utd2luZG93IHtcXG5cXHRoZWlnaHQ6IDQ4cHg7XFxuXFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciBhdXRvIGF1dG87XFxuXFx0bWFyZ2luLWJvdHRvbTogMTZweDtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNTgsIDEzLCAxNTYpO1xcblxcdGNvbG9yOiB3aGl0ZTtcXG5cXHRnYXA6IDI0cHg7XFxufVxcblxcbi5nYW1lLW1lc3NhZ2Uge1xcblxcdHRleHQtYWxpZ246IGNlbnRlcjtcXG5cXHRtYXJnaW46IGF1dG87XFxuXFx0Zm9udC1zaXplOiAyMHB4O1xcbn1cXG5cXG4jbWVzc2FnZS13aW5kb3cgYnV0dG9uIHtcXG5cXHRjb2xvcjogd2hpdGU7XFxuXFx0bWFyZ2luLXRvcDogYXV0bztcXG5cXHRtYXJnaW4tYm90dG9tOiBhdXRvO1xcbn1cXG5cXG4uc3RhcnQtYnV0dG9uIHtcXG5cXHRmb250LXNpemU6IDI0cHg7XFxufVxcblxcbiN0dXJuLWNvdW50ZXIge1xcblxcdG1hcmdpbjogYXV0bztcXG59XFxuXFxuLnJlc3RhcnQtYnV0dG9uIHtcXG5cXHRmb250LXNpemU6IDE2cHg7XFxuXFx0bWFyZ2luLXJpZ2h0OiAxNnB4O1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29tcG9uZW50cy9oZWFkZXIuY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY29tcG9uZW50cy9ib2R5LmNzc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMl9fXyBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NvbXBvbmVudHMvZm9vdGVyLmNzc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIuLi9hc3NldHMvZm9udHMvdHlwby1yb3VuZC1saWdodC53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gbmV3IFVSTChcIi4uL2Fzc2V0cy9mb250cy90eXBvLXJvdW5kLWxpZ2h0LndvZmZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyA9IG5ldyBVUkwoXCIuLi9hc3NldHMvZm9udHMvYXJpc3RhLXByby1yZWd1bGFyLndvZmYyXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18gPSBuZXcgVVJMKFwiLi4vYXNzZXRzL2ZvbnRzL2FyaXN0YS1wcm8tcmVndWxhci53b2ZmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMV9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMl9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKiB7XFxuXFx0cGFkZGluZzogMDtcXG5cXHRtYXJnaW46IDA7XFxufVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6ICdUeXBvUm91bmRMaWdodCc7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIikgZm9ybWF0KCd3b2ZmMicpLFxcbiAgICAgICB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fICsgXCIpIGZvcm1hdCgnd29mZicpO1xcbn1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnQXJpc3RhUHJvJztcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyArIFwiKSBmb3JtYXQoJ3dvZmYyJyksXFxuICAgICAgIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gKyBcIikgZm9ybWF0KCd3b2ZmJyk7XFxufVxcblxcbmEge1xcblxcdHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuYm9keSB7XFxuXFx0aGVpZ2h0OiAxMDB2aDtcXG5cXHR3aWR0aDogMTAwdnc7XFxuXFx0ZGlzcGxheTogZ3JpZDtcXG5cXHRncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gMWZyIGF1dG87XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvbWFpbi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBSUE7Q0FDQyxVQUFVO0NBQ1YsU0FBUztBQUNWOztBQUVBO0VBQ0UsNkJBQTZCO0VBQzdCOzZEQUNnRTtBQUNsRTs7QUFFQTtFQUNFLHdCQUF3QjtFQUN4Qjs2REFDa0U7QUFDcEU7O0FBRUE7Q0FDQyxxQkFBcUI7QUFDdEI7O0FBRUE7Q0FDQyxhQUFhO0NBQ2IsWUFBWTtDQUNaLGFBQWE7Q0FDYixpQ0FBaUM7QUFDbENcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGltcG9ydCAnLi9jb21wb25lbnRzL2hlYWRlci5jc3MnO1xcbkBpbXBvcnQgJy4vY29tcG9uZW50cy9ib2R5LmNzcyc7XFxuQGltcG9ydCAnLi9jb21wb25lbnRzL2Zvb3Rlci5jc3MnO1xcblxcbioge1xcblxcdHBhZGRpbmc6IDA7XFxuXFx0bWFyZ2luOiAwO1xcbn1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiAnVHlwb1JvdW5kTGlnaHQnO1xcbiAgc3JjOiB1cmwoJy4uL2Fzc2V0cy9mb250cy90eXBvLXJvdW5kLWxpZ2h0LndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLFxcbiAgICAgICB1cmwoJy4uL2Fzc2V0cy9mb250cy90eXBvLXJvdW5kLWxpZ2h0LndvZmYnKSBmb3JtYXQoJ3dvZmYnKTtcXG59XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogJ0FyaXN0YVBybyc7XFxuICBzcmM6IHVybCgnLi4vYXNzZXRzL2ZvbnRzL2FyaXN0YS1wcm8tcmVndWxhci53b2ZmMicpIGZvcm1hdCgnd29mZjInKSxcXG4gICAgICAgdXJsKCcuLi9hc3NldHMvZm9udHMvYXJpc3RhLXByby1yZWd1bGFyLndvZmYnKSBmb3JtYXQoJ3dvZmYnKTtcXG59XFxuXFxuYSB7XFxuXFx0dGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG5ib2R5IHtcXG5cXHRoZWlnaHQ6IDEwMHZoO1xcblxcdHdpZHRoOiAxMDB2dztcXG5cXHRkaXNwbGF5OiBncmlkO1xcblxcdGdyaWQtdGVtcGxhdGUtcm93czogYXV0byAxZnIgYXV0bztcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTtcblxuICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfVxuXG4gIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG4gIHJldHVybiB1cmw7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiaW1wb3J0IHtcbiAgY3JlYXRlRWxlbWVudCxcbn0gZnJvbSAnLi9oZWxwZXJzJztcblxuY2xhc3MgVmlldyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IHN0YXJ0QnV0dG9uID0gY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgJ3N0YXJ0LWJ1dHRvbicpO1xuICAgIHN0YXJ0QnV0dG9uLmlubmVyVGV4dCA9ICdTdGFydCBHYW1lJztcblxuICAgIGNvbnN0IHJlc3RhcnRCdXR0b24gPSBjcmVhdGVFbGVtZW50KCdidXR0b24nLCAncmVzdGFydC1idXR0b24nKTtcbiAgICByZXN0YXJ0QnV0dG9uLmlubmVyVGV4dCA9ICdSZXN0YXJ0JztcblxuICAgIGNvbnN0IHR1cm5Db3VudGVyID0gY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIHR1cm5Db3VudGVyLmlkID0gJ3R1cm4tY291bnRlcic7XG4gICAgdHVybkNvdW50ZXIuaW5uZXJUZXh0ID0gJ1R1cm4gMSc7XG5cbiAgICB0aGlzLmVsZW1lbnRzID0ge1xuICAgICAgcDFHYW1lV2luZG93OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncDEtd2luZG93JyksXG4gICAgICBwMkdhbWVXaW5kb3c6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwMi13aW5kb3cnKSxcbiAgICAgIHAxQm9hcmQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwMS1ib2FyZCcpLFxuICAgICAgcDJCb2FyZDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3AyLWJvYXJkJyksXG4gICAgICBtZXNzYWdlV2luZG93OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWVzc2FnZS13aW5kb3cnKSxcbiAgICAgIGdhbWVNZXNzYWdlOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FtZS1tZXNzYWdlJyksXG5cbiAgICAgIHN0YXJ0QnV0dG9uLFxuICAgICAgcmVzdGFydEJ1dHRvbixcbiAgICAgIHR1cm5Db3VudGVyLFxuICAgIH07XG4gIH1cblxuICByZW5kZXJCb2FyZChwbGF5ZXIpIHtcbiAgICBjb25zdCBncmlkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7cGxheWVyLm5hbWV9LWJvYXJkYCk7XG5cbiAgICBncmlkLmlubmVySFRNTCA9ICcnO1xuICAgIHRoaXMuZWxlbWVudHNbYCR7cGxheWVyLm5hbWV9R2FtZVdpbmRvd2BdLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG4gICAgY29uc3QgeyBib2FyZCB9ID0gcGxheWVyLmJvYXJkO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDA7IGkgKz0gMSkge1xuICAgICAgY29uc3QgY2VsbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsICdjZWxsJyk7XG4gICAgICBjZWxsLnNldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcsIGkpO1xuXG4gICAgICBpZiAoYm9hcmRbaV0uc2hpcCkge1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ2hhcy1zaGlwJyk7XG4gICAgICB9XG5cbiAgICAgIGdyaWQuYXBwZW5kKGNlbGwpO1xuICAgIH1cbiAgfVxuXG4gIGNvbG9yQm9hcmQoYm9hcmQpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBjZWxsID0gdGhpcy5lbGVtZW50cy5wMUJvYXJkLmNoaWxkcmVuW2ldO1xuICAgICAgY2VsbC5jbGFzc05hbWUgPSAnY2VsbCc7XG5cbiAgICAgIGlmIChib2FyZFtpXS5zaGlwICE9IG51bGwpIGNlbGwuY2xhc3NMaXN0LmFkZCgnaGFzLXNoaXAnKTtcbiAgICB9XG4gIH1cblxuICBzZXRNZXNzYWdlKHRleHQsIHJlc2V0V2luZG93ID0gZmFsc2UpIHtcbiAgICBpZiAocmVzZXRXaW5kb3cpIHRoaXMucmVuZGVySW5NZXNzYWdlV2luZG93KHRoaXMuZWxlbWVudHMuZ2FtZU1lc3NhZ2UpO1xuXG4gICAgdGhpcy5lbGVtZW50cy5nYW1lTWVzc2FnZS5pbm5lclRleHQgPSB0ZXh0O1xuICB9XG5cbiAgcmVuZGVyU3RhcnRTY3JlZW4oKSB7XG4gICAgdGhpcy5zZXRNZXNzYWdlKCdQbGFjZSB5b3VyIGNhcnJpZXIgKFByZXNzIHNwYWNlIHRvIHJvdGF0ZSknLCB0cnVlKTtcblxuICAgIGNvbnN0IGdhbWVCdXR0b25zID0gY3JlYXRlRWxlbWVudCgnZGl2JywgJ2dhbWUtYnV0dG9ucycpO1xuXG4gICAgY29uc3QgcmFuZG9tQnV0dG9uID0gY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgJ3JhbmRvbS1idXR0b24nKTtcbiAgICByYW5kb21CdXR0b24uaW5uZXJUZXh0ID0gJ1JhbmRvbSc7XG4gICAgY29uc3QgcmVzZXRCdXR0b24gPSBjcmVhdGVFbGVtZW50KCdidXR0b24nLCAncmVzZXQtYnV0dG9uJyk7XG4gICAgcmVzZXRCdXR0b24uaW5uZXJUZXh0ID0gJ1Jlc2V0JztcblxuICAgIGdhbWVCdXR0b25zLmFwcGVuZChyYW5kb21CdXR0b24pO1xuICAgIGdhbWVCdXR0b25zLmFwcGVuZChyZXNldEJ1dHRvbik7XG5cbiAgICB0aGlzLmVsZW1lbnRzLnJhbmRvbUJ1dHRvbiA9IHJhbmRvbUJ1dHRvbjtcbiAgICB0aGlzLmVsZW1lbnRzLnJlc2V0QnV0dG9uID0gcmVzZXRCdXR0b247XG5cbiAgICB0aGlzLmVsZW1lbnRzLnAxR2FtZVdpbmRvdy5hcHBlbmQoZ2FtZUJ1dHRvbnMpO1xuICAgIHRoaXMuZWxlbWVudHMucDJHYW1lV2luZG93LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH1cblxuICByZW5kZXJJbk1lc3NhZ2VXaW5kb3coZWxlbWVudCkge1xuICAgIHRoaXMuZWxlbWVudHMubWVzc2FnZVdpbmRvdy5pbm5lckhUTUwgPSAnJztcblxuICAgIHRoaXMuZWxlbWVudHMubWVzc2FnZVdpbmRvdy5hcHBlbmQoZWxlbWVudCk7XG4gIH1cblxuICByZW5kZXJCb2FyZEluZm8ocGxheWVyKSB7XG4gICAgY29uc3QgYm9hcmRJbmZvID0gY3JlYXRlRWxlbWVudCgnZGl2JywgJ2JvYXJkLWluZm8nKTtcbiAgICBib2FyZEluZm8uaWQgPSBgJHtwbGF5ZXIubmFtZX0tYm9hcmQtaW5mb2A7XG5cbiAgICBjb25zdCB7IHNoaXBzIH0gPSBwbGF5ZXI7XG5cbiAgICBPYmplY3Qua2V5cyhzaGlwcykuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgY29uc3Qgc2hpcE5hbWUgPSAoc2hpcCA9PT0gJ3BhdHJvbEJvYXQnKSA/ICdwYXRyb2wgYm9hdCcgOiBzaGlwO1xuXG4gICAgICBjb25zdCBzaGlwVGV4dCA9IGNyZWF0ZUVsZW1lbnQoJ3AnLCAnc2hpcC1uYW1lJyk7XG4gICAgICBzaGlwVGV4dC5pbm5lclRleHQgPSBzaGlwTmFtZTtcblxuICAgICAgYm9hcmRJbmZvLmFwcGVuZChzaGlwVGV4dCk7XG4gICAgfSk7XG5cbiAgICBPYmplY3Qua2V5cyhzaGlwcykuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgY29uc3QgcHJvZ3Jlc3NNZXRlciA9IGNyZWF0ZUVsZW1lbnQoJ21ldGVyJywgJ3Byb2dyZXNzLW1ldGVyJyk7XG4gICAgICBwcm9ncmVzc01ldGVyLmlkID0gYCR7cGxheWVyLm5hbWV9LSR7c2hpcH0tbWV0ZXJgO1xuXG4gICAgICBwcm9ncmVzc01ldGVyLnNldEF0dHJpYnV0ZSgndmFsdWUnLCAwKTtcbiAgICAgIHByb2dyZXNzTWV0ZXIuc2V0QXR0cmlidXRlKCdtaW4nLCAwKTtcbiAgICAgIHByb2dyZXNzTWV0ZXIuc2V0QXR0cmlidXRlKCdtYXgnLCBzaGlwc1tzaGlwXS5sZW5ndGgpO1xuXG4gICAgICBib2FyZEluZm8uYXBwZW5kKHByb2dyZXNzTWV0ZXIpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5lbGVtZW50c1tgJHtwbGF5ZXIubmFtZX1HYW1lV2luZG93YF0uYXBwZW5kKGJvYXJkSW5mbyk7XG4gIH1cblxuICBiaW5kTW91c2VPdmVyQ2VsbChoYW5kbGVyKSB7XG4gICAgY29uc3QgY2VsbHMgPSB0aGlzLmVsZW1lbnRzLnAxQm9hcmQuY2hpbGRyZW47XG5cbiAgICBmb3IgKGNvbnN0IGNlbGwgb2YgY2VsbHMpIHtcbiAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKGV2dCkgPT4ge1xuICAgICAgICBjb25zdCBpID0gcGFyc2VJbnQoZXZ0LnRhcmdldC5kYXRhc2V0LmluZGV4LCAxMCk7XG5cbiAgICAgICAgY29uc3Qgb3V0Y29tZSA9IGhhbmRsZXIoaSk7XG5cbiAgICAgICAgaWYgKG91dGNvbWUudmlld0xvY3MpIHtcbiAgICAgICAgICBjb25zdCBjZWxsQ2xhc3MgPSAob3V0Y29tZS52YWxpZCkgPyAndmFsaWQnIDogJ2ludmFsaWQnO1xuXG4gICAgICAgICAgZm9yIChjb25zdCBib2FyZENlbGwgb2Ygb3V0Y29tZS5ib2FyZFN0YXRlKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IG91dGNvbWUuYm9hcmRTdGF0ZS5pbmRleE9mKGJvYXJkQ2VsbCk7XG4gICAgICAgICAgICBjb25zdCB2aWV3Q2VsbCA9IHRoaXMuZWxlbWVudHMucDFCb2FyZC5xdWVyeVNlbGVjdG9yKGAuY2VsbFtkYXRhLWluZGV4PVwiJHtpbmRleH1cIl1gKTtcblxuICAgICAgICAgICAgaWYgKG91dGNvbWUudmlld0xvY3MuaW5jbHVkZXMoaW5kZXgpICYmICFib2FyZENlbGwuc2hpcCkge1xuICAgICAgICAgICAgICB2aWV3Q2VsbC5jbGFzc0xpc3QuYWRkKGNlbGxDbGFzcyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJvYXJkQ2VsbC5zaGlwKSB7XG4gICAgICAgICAgICAgIHZpZXdDZWxsLmNsYXNzTGlzdC5hZGQoJ2hhcy1zaGlwJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2aWV3Q2VsbC5jbGFzc05hbWUgPSAnY2VsbCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBiaW5kUHJlc3NTcGFjZUtleShoYW5kbGVyKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZXZ0KSA9PiB7XG4gICAgICBpZiAoZXZ0LmNvZGUgPT09ICdTcGFjZScpIHtcbiAgICAgICAgY29uc3QgY2VsbCA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCc6aG92ZXInKV0uc2xpY2UoLTEpWzBdO1xuXG4gICAgICAgIGlmIChjZWxsLmNsYXNzTGlzdC5jb250YWlucygnY2VsbCcpKSB7XG4gICAgICAgICAgaGFuZGxlcigpO1xuXG4gICAgICAgICAgY29uc3QgbW91c2VvdmVyRXZlbnQgPSBuZXcgRXZlbnQoJ21vdXNlb3ZlcicpO1xuICAgICAgICAgIGNlbGwuZGlzcGF0Y2hFdmVudChtb3VzZW92ZXJFdmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGJpbmRDbGlja1BsYWNlbWVudENlbGwoaGFuZGxlcikge1xuICAgIHRoaXMuZWxlbWVudHMucDFCb2FyZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldnQpID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoZXZ0LnRhcmdldC5kYXRhc2V0LmluZGV4LCAxMCk7XG4gICAgICBjb25zdCBjbGlja2VkQ2VsbCA9IHRoaXMuZWxlbWVudHMucDFCb2FyZC5jaGlsZHJlbltpbmRleF07XG5cbiAgICAgIGlmIChjbGlja2VkQ2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ3ZhbGlkJykpIHtcbiAgICAgICAgY29uc3QgaW5mbyA9IGhhbmRsZXIoaW5kZXgpO1xuXG4gICAgICAgIHRoaXMuY29sb3JCb2FyZChpbmZvLmJvYXJkKTtcblxuICAgICAgICBjb25zdCBuZXh0U2hpcCA9IChpbmZvLm5leHRTaGlwID09PSAncGF0cm9sQm9hdCcpID8gJ3BhdHJvbCBib2F0JyA6IGluZm8ubmV4dFNoaXA7XG5cbiAgICAgICAgaWYgKG5leHRTaGlwICE9IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnNldE1lc3NhZ2UoYFBsYWNlIHlvdXIgJHtuZXh0U2hpcH0gKFByZXNzIHNwYWNlIHRvIHJvdGF0ZSlgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlbmRlckluTWVzc2FnZVdpbmRvdyh0aGlzLmVsZW1lbnRzLnN0YXJ0QnV0dG9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYmluZENsaWNrT3Bwb25lbnRDZWxsKGhhbmRsZXIsIHBsYXllcikge1xuICAgIGNvbnN0IGNlbGxzID0gKHBsYXllci5uYW1lID09PSAncDEnKSA/IHRoaXMuZWxlbWVudHMucDJCb2FyZC5jaGlsZHJlbiA6IHRoaXMuZWxlbWVudHMucDFCb2FyZC5jaGlsZHJlbjtcblxuICAgIGZvciAoY29uc3QgY2VsbCBvZiBjZWxscykge1xuICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldnQpID0+IHtcbiAgICAgICAgY29uc3QgaSA9IHBhcnNlSW50KGV2dC50YXJnZXQuZGF0YXNldC5pbmRleCwgMTApO1xuXG4gICAgICAgIGNvbnN0IG91dGNvbWUgPSBoYW5kbGVyKGkpO1xuXG4gICAgICAgIGlmIChvdXRjb21lLnZhbGlkTW92ZSkge1xuICAgICAgICAgIGNvbnN0IG9wcEJvYXJkID0gb3V0Y29tZS5vcHBvbmVudC5ib2FyZC5ib2FyZDtcbiAgICAgICAgICBjb25zdCB7IHNoaXAgfSA9IG9wcEJvYXJkW2ldO1xuXG4gICAgICAgICAgaWYgKHBsYXllci5uYW1lID09PSAncDEnKSB0aGlzLmVsZW1lbnRzLnR1cm5Db3VudGVyLmlubmVyVGV4dCA9IGBUdXJuICR7b3V0Y29tZS50dXJuQ291bnR9YDtcblxuICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnaGl0Jyk7XG5cbiAgICAgICAgICBpZiAoc2hpcCAmJiBvcHBCb2FyZFtpXS5pc1Nob3QpIHtcbiAgICAgICAgICAgIGNvbnN0IHNoaXBOYW1lID0gKHNoaXAgPT09ICdwYXRyb2xCb2F0JykgPyAncGF0cm9sIGJvYXQnIDogc2hpcDtcbiAgICAgICAgICAgIHRoaXMuc2V0TWVzc2FnZShgWW91IGhpdCB0aGUgJHtzaGlwTmFtZX1gKTtcblxuICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3NNZXRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke291dGNvbWUub3Bwb25lbnQubmFtZX0tJHtzaGlwfS1tZXRlcmApO1xuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBwYXJzZUludChwcm9ncmVzc01ldGVyLmdldEF0dHJpYnV0ZSgndmFsdWUnKSwgMTApICsgMTtcbiAgICAgICAgICAgIHByb2dyZXNzTWV0ZXIuc2V0QXR0cmlidXRlKCd2YWx1ZScsIG5ld1ZhbHVlKTtcblxuICAgICAgICAgICAgaWYgKG91dGNvbWUud2lubmVyKSB7XG4gICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAocGxheWVyLm5hbWUgPT09ICdwMScpID8gJ1lvdSB3b24hJyA6ICdZb3UgbG9zdC4uLic7XG4gICAgICAgICAgICAgIHRoaXMuc2V0TWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgdGhpcy5yZXNldEJvYXJkRXZlbnRMaXN0ZW5lcnMoJ3AyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICghb3V0Y29tZS53aW5uZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0TWVzc2FnZSgnJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBsYXllci5uYW1lID09PSAncDEnICYmICFvdXRjb21lLndpbm5lcikge1xuICAgICAgICAgIHRoaXMuc2V0TWVzc2FnZSgnWW91IGFscmVhZHkgc2hvdCBhdCB0aGF0IGNlbGwnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYmluZENsaWNrUmFuZG9tQnV0dG9uKGhhbmRsZXIpIHtcbiAgICB0aGlzLmVsZW1lbnRzLnJhbmRvbUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGNvbnN0IGJvYXJkID0gaGFuZGxlcigpO1xuXG4gICAgICB0aGlzLmNvbG9yQm9hcmQoYm9hcmQpO1xuICAgICAgdGhpcy5lbGVtZW50cy5tZXNzYWdlV2luZG93LmlubmVySFRNTCA9ICcnO1xuICAgICAgdGhpcy5lbGVtZW50cy5tZXNzYWdlV2luZG93LmFwcGVuZCh0aGlzLmVsZW1lbnRzLnN0YXJ0QnV0dG9uKTtcbiAgICB9KTtcbiAgfVxuXG4gIGJpbmRDbGlja1Jlc2V0QnV0dG9uKGhhbmRsZXIpIHtcbiAgICB0aGlzLmVsZW1lbnRzLnJlc2V0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgY29uc3QgYm9hcmQgPSBoYW5kbGVyKCk7XG5cbiAgICAgIHRoaXMuY29sb3JCb2FyZChib2FyZCk7XG5cbiAgICAgIHRoaXMuc2V0TWVzc2FnZSgnUGxhY2UgeW91ciBjYXJyaWVyIChQcmVzcyBzcGFjZSB0byByb3RhdGUpJywgdHJ1ZSk7XG4gICAgfSk7XG4gIH1cblxuICBiaW5kQ2xpY2tTdGFydEJ1dHRvbihoYW5kbGVyKSB7XG4gICAgdGhpcy5lbGVtZW50cy5zdGFydEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMuZWxlbWVudHMucDFHYW1lV2luZG93LnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudHMucDFHYW1lV2luZG93Lmxhc3RDaGlsZCk7XG5cbiAgICAgIGZvciAoY29uc3Qgd2luZG93IG9mIFsncDFHYW1lV2luZG93JywgJ3AyR2FtZVdpbmRvdyddKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsID0gY3JlYXRlRWxlbWVudCgncCcsICd3aW5kb3ctbGFiZWwnKTtcbiAgICAgICAgbGFiZWwuaW5uZXJUZXh0ID0gKHdpbmRvdyA9PT0gJ3AxR2FtZVdpbmRvdycpID8gJ0NvbXB1dGVyJyA6ICdQbGF5ZXInO1xuICAgICAgICB0aGlzLmVsZW1lbnRzW3dpbmRvd10ucHJlcGVuZChsYWJlbCk7XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZXIoKTtcblxuICAgICAgdGhpcy5zZXRNZXNzYWdlKCdDbGljayB0byBmaXJlIGEgc2hvdCcsIHRydWUpO1xuXG4gICAgICB0aGlzLmVsZW1lbnRzLm1lc3NhZ2VXaW5kb3cuYXBwZW5kKHRoaXMuZWxlbWVudHMudHVybkNvdW50ZXIpO1xuICAgICAgdGhpcy5lbGVtZW50cy5tZXNzYWdlV2luZG93LmFwcGVuZCh0aGlzLmVsZW1lbnRzLnJlc3RhcnRCdXR0b24pO1xuICAgIH0pO1xuICB9XG5cbiAgYmluZENsaWNrUmVzdGFydEJ1dHRvbihoYW5kbGVyKSB7XG4gICAgdGhpcy5lbGVtZW50cy5yZXN0YXJ0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCB3aW5kb3cgb2YgWydwMUdhbWVXaW5kb3cnLCAncDJHYW1lV2luZG93J10pIHtcbiAgICAgICAgY29uc3QgcGxheWVyV2luZG93ID0gdGhpcy5lbGVtZW50c1t3aW5kb3ddO1xuXG4gICAgICAgIHBsYXllcldpbmRvdy5yZW1vdmVDaGlsZChwbGF5ZXJXaW5kb3cuZmlyc3RDaGlsZCk7XG4gICAgICAgIHBsYXllcldpbmRvdy5yZW1vdmVDaGlsZChwbGF5ZXJXaW5kb3cubGFzdENoaWxkKTtcbiAgICAgIH1cblxuICAgICAgaGFuZGxlcigpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVzZXRCb2FyZEV2ZW50TGlzdGVuZXJzKHBsYXllck5hbWUpIHtcbiAgICBjb25zdCBvbGRCb2FyZCA9IHRoaXMuZWxlbWVudHNbYCR7cGxheWVyTmFtZX1Cb2FyZGBdO1xuXG4gICAgY29uc3QgY2xvbmVCb2FyZCA9IG9sZEJvYXJkLmNsb25lTm9kZSh0cnVlKTtcbiAgICBvbGRCb2FyZC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChjbG9uZUJvYXJkLCBvbGRCb2FyZCk7XG5cbiAgICB0aGlzLmVsZW1lbnRzW2Ake3BsYXllck5hbWV9Qm9hcmRgXSA9IGNsb25lQm9hcmQ7XG4gIH1cblxuICBnZXRDZWxsKHBsYXllck5hbWUsIGluZGV4KSB7XG4gICAgY29uc3QgYm9hcmQgPSB0aGlzLmVsZW1lbnRzW2Ake3BsYXllck5hbWV9Qm9hcmRgXTtcblxuICAgIHJldHVybiBib2FyZC5jaGlsZHJlbltpbmRleF07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmlldztcbiIsImltcG9ydCBHYW1lQm9hcmQgZnJvbSAnLi4vbW9kZWxzL0dhbWVCb2FyZCc7XG5cbmltcG9ydCB7XG4gIHJhbmRFbGVtZW50LFxuICBnZXRBY3RpdmVTaGlwcyxcbiAgc2hpcExlbmd0aHMsXG4gIGNoZWNrRWRnZUNvbGxpc2lvbnMsXG4gIHByb2plY3RTaGlwTG9jcyxcbn0gZnJvbSAnLi9oZWxwZXJzJztcblxuY2xhc3MgQUkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNlbGxzSGl0ID0ge1xuICAgICAgY2FycmllcjogW10sXG4gICAgICBiYXR0bGVzaGlwOiBbXSxcbiAgICAgIGNydWlzZXI6IFtdLFxuICAgICAgc3VibWFyaW5lOiBbXSxcbiAgICAgIHBhdHJvbEJvYXQ6IFtdLFxuICAgIH07XG5cbiAgICB0aGlzLm1vZGVsQm9hcmQgPSAobmV3IEdhbWVCb2FyZCgpKS5ib2FyZDtcbiAgICB0aGlzLm9mZnNldHMgPSBbLTEsIDEsIC0xMCwgMTBdO1xuICB9XG5cbiAgZ2V0UmFuZG9tU2hvdChtb3Zlc01hZGUpIHtcbiAgICAvLyBHZXQgbW92ZXNNYWRlIG9iamVjdCByZWZlcmVuY2UgZnJvbSBQbGF5ZXIgd2l0aCBBSSBtb2R1bGUgYW5kIGRldGVybWluZSBwb3NzaWJsZSBtb3Zlc1xuICAgIGNvbnN0IGNlbGxzU2hvdCA9IG1vdmVzTWFkZS5tYXAoKG1vdmUpID0+IG1vdmUuY2VsbCk7XG4gICAgY29uc3QgbGVnYWxNb3ZlcyA9IFsuLi5BcnJheSgxMDApLmtleXMoKV0uZmlsdGVyKChpbmRleCkgPT4gIWNlbGxzU2hvdC5pbmNsdWRlcyhpbmRleCkpO1xuXG4gICAgY29uc3QgbG9jID0gcmFuZEVsZW1lbnQobGVnYWxNb3Zlcyk7XG5cbiAgICByZXR1cm4gbG9jO1xuICB9XG5cbiAgZ2V0U21hcnRTaG90KG1vdmVzTWFkZSkge1xuICAgIGlmIChtb3Zlc01hZGUubGVuZ3RoID09PSAwKSByZXR1cm4gdGhpcy5nZXRSYW5kb21TaG90KG1vdmVzTWFkZSk7IC8vIEZpcnN0IHNob3QgaXMgcmFuZG9tXG5cbiAgICBsZXQgbG9jID0gbnVsbDtcblxuICAgIGNvbnN0IHByZXZNb3ZlID0gbW92ZXNNYWRlLnNsaWNlKC0xKVswXTtcbiAgICBjb25zdCBwcmV2Q2VsbCA9IHByZXZNb3ZlLmNlbGw7XG5cbiAgICBjb25zdCB7IHNoaXAgfSA9IHByZXZNb3ZlO1xuXG4gICAgaWYgKHNoaXAgJiYgIXNoaXAuaXNTdW5rKCkpIHtcbiAgICAgIC8vIElmIHByZXZpb3VzIG1vdmUgaGl0IGEgc2hpcCB0aGF0IGlzIG5vdCBzdW5rLCB1cGRhdGUgY2VsbHNIaXQgdG8gcmVtZW1iZXIgdGhlIG1vdmVcbiAgICAgIHRoaXMuY2VsbHNIaXRbc2hpcC5uYW1lXS5wdXNoKHByZXZDZWxsKTtcbiAgICAgIHRoaXMubW9kZWxCb2FyZFtwcmV2Q2VsbF0uc2hpcCA9IHNoaXA7XG5cbiAgICAgIGxvYyA9IHRoaXMuZmluZFN1aXRhYmxlTW92ZXMoc2hpcCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENoZWNrIGlmIHRoZXJlIGFyZSBhbnkgb3RoZXIgYWN0aXZlIHNoaXBzIGRpc2NvdmVyZWRcbiAgICAgIGNvbnN0IGFjdGl2ZVNoaXBzID0gZ2V0QWN0aXZlU2hpcHMobW92ZXNNYWRlKTtcblxuICAgICAgaWYgKGFjdGl2ZVNoaXBzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgcHJldlNoaXAgPSBhY3RpdmVTaGlwcy5zbGljZSgtMSlbMF07XG5cbiAgICAgICAgLy8gUmVwZWF0IHNlYXJjaGluZyBhbGdvcml0aG0gYWJvdmVcbiAgICAgICAgbG9jID0gdGhpcy5maW5kU3VpdGFibGVNb3ZlcyhwcmV2U2hpcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UgbWFrZSBzbWFydCBndWVzc1xuICAgICAgICBjb25zdCBoaWRkZW5TaGlwTGVuZ3RocyA9IHRoaXMuZ2V0VW5kaXNjb3ZlcmVkU2hpcExlbmd0aHMoKTtcbiAgICAgICAgY29uc3Qgc2hpcExlbmd0aCA9IHJhbmRFbGVtZW50KGhpZGRlblNoaXBMZW5ndGhzKTsgLy8gUGljayByYW5kb20gdW5kaXNjb3ZlcmVkIHNoaXBcblxuICAgICAgICAvLyBHZXQgYWxsIHZhbGlkIHBsYWNlbWVudHMgb24gdGhlIGJvYXJkIGZvciB0aGF0IHNoaXBcbiAgICAgICAgY29uc3QgdmFsaWRMb2NzID0gdGhpcy5tb2RlbFZhbGlkUGxhY2VtZW50cyhzaGlwTGVuZ3RoKTtcblxuICAgICAgICAvLyBQaWNrIHJhbmRvbSBlbGVtZW50IG9mIHJhbmRvbWx5IHNlbGVjdGVkIGxvY2F0aW9uIGFycmF5XG4gICAgICAgIGxvYyA9IHJhbmRFbGVtZW50KHJhbmRFbGVtZW50KHZhbGlkTG9jcykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsb2M7XG4gIH1cblxuICBmaW5kU3VpdGFibGVNb3ZlcyhzaGlwKSB7XG4gICAgY29uc3Qgc2hpcENlbGxzSGl0ID0gdGhpcy5jZWxsc0hpdFtzaGlwLm5hbWVdO1xuICAgIGNvbnN0IHZhbGlkTmV4dE1vdmVzID0gW107XG5cbiAgICBpZiAoc2hpcENlbGxzSGl0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgLy8gSWYgc2hpcCBoaXQgb25jZSwgcHJvamVjdCBzaGlwIG9udG8gdmFsaWQgYWRqYWNlbnQgbGVmdC9yaWdodC91cC9kb3duIGNlbGxzXG4gICAgICBjb25zdCBjZWxsID0gc2hpcENlbGxzSGl0WzBdO1xuXG4gICAgICBmb3IgKGNvbnN0IG9mZnNldCBvZiB0aGlzLm9mZnNldHMpIHtcbiAgICAgICAgY29uc3QgbW92ZSA9IHRoaXMuZmluZFZhbGlkUHJvamVjdGlvbihjZWxsLCBvZmZzZXQsIHNoaXAubGVuZ3RoIC0gMSk7XG4gICAgICAgIGlmIChtb3ZlKSB2YWxpZE5leHRNb3Zlcy5wdXNoKG1vdmUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiBzaGlwIGhhcyA+IDEgaGl0LCBlc3RhYmxpc2ggbGltaXRzIGFuZCBheGlzXG4gICAgICBjb25zdCBsaW1pdHMgPSBbTWF0aC5taW4oLi4uc2hpcENlbGxzSGl0KSwgTWF0aC5tYXgoLi4uc2hpcENlbGxzSGl0KV07XG5cbiAgICAgIGxldCBheGlzT2Zmc2V0cyA9IG51bGw7XG5cbiAgICAgIGlmICgobGltaXRzWzFdIC0gbGltaXRzWzBdKSAlIDEwID09PSAwKSB7XG4gICAgICAgIGF4aXNPZmZzZXRzID0gdGhpcy5vZmZzZXRzLnNsaWNlKDIpOyAvLyB5LWF4aXNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF4aXNPZmZzZXRzID0gdGhpcy5vZmZzZXRzLnNsaWNlKDAsIDIpOyAvLyB4LWF4aXNcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgaWYgYWRqYWNlbnQgY2VsbCBvbiBzYW1lIGF4aXMgaXMgdmFsaWRcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgbGltaXQgPSBsaW1pdHNbaV07XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGF4aXNPZmZzZXRzW2ldO1xuXG4gICAgICAgIGNvbnN0IG1vdmUgPSB0aGlzLmZpbmRWYWxpZFByb2plY3Rpb24obGltaXQsIG9mZnNldCwgc2hpcC5sZW5ndGggLSBzaGlwQ2VsbHNIaXQubGVuZ3RoKTtcblxuICAgICAgICBpZiAobW92ZSAhPSBudWxsKSB2YWxpZE5leHRNb3Zlcy5wdXNoKG1vdmUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYW5kRWxlbWVudCh2YWxpZE5leHRNb3Zlcyk7IC8vIFNlbGVjdCByYW5kb20gbmV4dCB2YWxpZCBtb3ZlXG4gIH1cblxuICBtb2RlbFZhbGlkUGxhY2VtZW50cyhsZW5ndGgpIHtcbiAgICBjb25zdCB2YWxpZExvY3MgPSBbXTtcblxuICAgIGNvbnN0IGVtcHR5TG9jcyA9IHRoaXMuZ2V0RW1wdHlMb2NzKCk7XG5cbiAgICAvLyBDaGVjayBwcm9qZWN0IHNoaXAgb24geCBhbmQgeSBheGlzIG9udG8gYWxsIGVtcHR5IGNlbGxzXG4gICAgZm9yIChjb25zdCBlbXB0eUxvYyBvZiBlbXB0eUxvY3MpIHtcbiAgICAgIGZvciAoY29uc3Qgb2Zmc2V0IG9mIFsxLCAxMF0pIHtcbiAgICAgICAgY29uc3QgbG9jcyA9IHByb2plY3RTaGlwTG9jcyhlbXB0eUxvYywgb2Zmc2V0LCBsZW5ndGgpO1xuXG4gICAgICAgIGlmICh0aGlzLmNoZWNrQ29sbGlzaW9ucyhsb2NzLCBvZmZzZXQpKSB2YWxpZExvY3MucHVzaChsb2NzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRMb2NzO1xuICB9XG5cbiAgY2xpY2tDZWxsKGluZGV4LCBjZWxsKSB7XG4gICAgdGhpcy5tb2RlbEJvYXJkW2luZGV4XS5pc1Nob3QgPSB0cnVlO1xuXG4gICAgY2VsbC5jbGljaygpO1xuICB9XG5cbiAgZ2V0VW5kaXNjb3ZlcmVkU2hpcExlbmd0aHMoKSB7XG4gICAgY29uc3QgaGlkZGVuU2hpcExlbmd0aHMgPSBbXTtcblxuICAgIE9iamVjdC5rZXlzKHRoaXMuY2VsbHNIaXQpLmZvckVhY2goKHNoaXBOYW1lKSA9PiB7XG4gICAgICBjb25zdCBzaGlwTGVuZ3RoID0gc2hpcExlbmd0aHNbc2hpcE5hbWVdO1xuXG4gICAgICBpZiAodGhpcy5jZWxsc0hpdFtzaGlwTmFtZV0ubGVuZ3RoID09PSAwKSBoaWRkZW5TaGlwTGVuZ3Rocy5wdXNoKHNoaXBMZW5ndGgpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhpZGRlblNoaXBMZW5ndGhzO1xuICB9XG5cbiAgZ2V0RW1wdHlMb2NzKCkge1xuICAgIHJldHVybiB0aGlzLm1vZGVsQm9hcmQuZmlsdGVyKChjZWxsKSA9PiAhY2VsbC5pc1Nob3QpXG4gICAgICAubWFwKChjZWxsKSA9PiB0aGlzLm1vZGVsQm9hcmQuaW5kZXhPZihjZWxsKSk7XG4gIH1cblxuICBjaGVja0NvbGxpc2lvbnMobG9jcywgYXhpcykge1xuICAgIGlmICghY2hlY2tFZGdlQ29sbGlzaW9ucyhsb2NzLCBheGlzKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChjb25zdCBsb2Mgb2YgbG9jcykge1xuICAgICAgaWYgKHRoaXMubW9kZWxCb2FyZFtsb2NdLmlzU2hvdCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZmluZFZhbGlkUHJvamVjdGlvbihzdGFydCwgb2Zmc2V0LCBsKSB7XG4gICAgbGV0IGxlbmd0aCA9IGw7XG5cbiAgICAvLyBwcm9qZWN0IHNoaXAgb250byB2YWxpZCBhZGphY2VudCBsZWZ0L3JpZ2h0L3VwL2Rvd24gY2VsbHMgYXQgZWFjaCBlZGdlXG4gICAgd2hpbGUgKGxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHByb2plY3RlZExvY3MgPSBwcm9qZWN0U2hpcExvY3Moc3RhcnQsIG9mZnNldCwgbGVuZ3RoLCAxKTtcblxuICAgICAgaWYgKHRoaXMuY2hlY2tDb2xsaXNpb25zKHByb2plY3RlZExvY3MsIG9mZnNldCkpIHJldHVybiBzdGFydCArIG9mZnNldDtcblxuICAgICAgLy8gSWYgbm8gdmFsaWQgbW92ZXMgZm91bmQgZm9yIHRoZSBwcm9qZWN0aW9uLCByZWR1Y2UgcHJvamVjdGVkIHNpemVcbiAgICAgIGxlbmd0aCAtPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFJO1xuIiwiaW1wb3J0IFBsYXllciBmcm9tICcuLi9tb2RlbHMvUGxheWVyJztcbmltcG9ydCBWaWV3IGZyb20gJy4vdmlldyc7XG5pbXBvcnQgQUkgZnJvbSAnLi9BSSc7XG5cbmltcG9ydCB7IHNoaXBMZW5ndGhzLCBnZXROZXh0U2hpcCB9IGZyb20gJy4vaGVscGVycyc7XG5cbmNsYXNzIEdhbWUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5wMSA9IG5ldyBQbGF5ZXIoKTsgLy8gSHVtYW4gcGxheWVyXG4gICAgdGhpcy5wMiA9IG5ldyBQbGF5ZXIobmV3IEFJKCkpOyAvLyBDb21wdXRlclxuXG4gICAgdGhpcy52aWV3ID0gbmV3IFZpZXcoKTtcblxuICAgIHRoaXMudHVybiA9ICdwMSc7XG4gICAgdGhpcy50dXJuQ291bnRlciA9IDE7XG5cbiAgICB0aGlzLndpbm5lciA9IG51bGw7XG4gICAgdGhpcy5wbGFjZW1lbnRTdGF0ZSA9IHtcbiAgICAgIGF4aXM6ICd4JyxcbiAgICAgIGN1cnJlbnRTaGlwOiAnY2FycmllcicsXG4gICAgICBhbGxTaGlwc1BsYWNlZDogZmFsc2UsXG4gICAgfTtcbiAgfVxuXG4gIHN3aXRjaFR1cm4oKSB7XG4gICAgdGhpcy50dXJuID0gKHRoaXMudHVybiA9PT0gJ3AxJykgPyAncDInIDogJ3AxJztcbiAgfVxuXG4gIGNoZWNrV2luKG9wcEJvYXJkKSB7XG4gICAgaWYgKG9wcEJvYXJkLnNoaXBzU3VuaygpID09PSA1KSB7XG4gICAgICB0aGlzLndpbm5lciA9IHRoaXMudHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy53aW5uZXI7XG4gIH1cblxuICBwbGF5UGxheWVyVHVybihpbmRleCkge1xuICAgIGlmICh0aGlzLndpbm5lciAhPSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgICBjb25zdCBvcHBCb2FyZCA9IHRoaXMucDIuYm9hcmQ7XG4gICAgY29uc3Qgb3V0Y29tZSA9IHtcbiAgICAgIHZhbGlkTW92ZTogZmFsc2UsXG4gICAgICBvcHBvbmVudDogdGhpcy5wMixcbiAgICAgIHdpbm5lcjogbnVsbCxcbiAgICB9O1xuXG4gICAgaWYgKCFvcHBCb2FyZC5ib2FyZFtpbmRleF0uaXNTaG90KSB7XG4gICAgICBvdXRjb21lLnZhbGlkTW92ZSA9IHRydWU7XG4gICAgICB0aGlzLnR1cm5Db3VudGVyICs9IDE7XG5cbiAgICAgIHRoaXMucDEuZmlyZVNob3QodGhpcy5wMiwgaW5kZXgpO1xuXG4gICAgICBpZiAoIXRoaXMuY2hlY2tXaW4ob3BwQm9hcmQpKSB7XG4gICAgICAgIHRoaXMuc3dpdGNoVHVybigpO1xuXG4gICAgICAgIGNvbnN0IG5leHRJbmRleCA9IHRoaXMucDIuQUkuZ2V0U21hcnRTaG90KHRoaXMucDIubW92ZXNNYWRlKTtcbiAgICAgICAgY29uc3QgY2VsbCA9IHRoaXMudmlldy5nZXRDZWxsKHRoaXMucDEubmFtZSwgbmV4dEluZGV4KTtcbiAgICAgICAgdGhpcy5wMi5BSS5jbGlja0NlbGwobmV4dEluZGV4LCBjZWxsKTtcbiAgICAgIH1cblxuICAgICAgb3V0Y29tZS53aW5uZXIgPSB0aGlzLndpbm5lcjtcbiAgICB9XG5cbiAgICBvdXRjb21lLnR1cm5Db3VudCA9IHRoaXMudHVybkNvdW50ZXI7XG5cbiAgICByZXR1cm4gb3V0Y29tZTtcbiAgfVxuXG4gIHBsYXlDb21wdXRlclR1cm4oaW5kZXgpIHtcbiAgICBpZiAodGhpcy53aW5uZXIgIT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgY29uc3Qgb3V0Y29tZSA9IHtcbiAgICAgIHZhbGlkTW92ZTogZmFsc2UsXG4gICAgICBvcHBvbmVudDogdGhpcy5wMSxcbiAgICAgIHdpbm5lcjogbnVsbCxcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMudHVybiA9PT0gJ3AyJykge1xuICAgICAgb3V0Y29tZS52YWxpZE1vdmUgPSB0cnVlO1xuICAgICAgdGhpcy5wMi5maXJlU2hvdCh0aGlzLnAxLCBpbmRleCk7XG5cbiAgICAgIGlmICh0aGlzLmNoZWNrV2luKHRoaXMucDEuYm9hcmQpKSB7XG4gICAgICAgIG91dGNvbWUud2lubmVyID0gdGhpcy53aW5uZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN3aXRjaFR1cm4oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3V0Y29tZTtcbiAgfVxuXG4gIGNoZWNrVmFsaWRQbGFjZW1lbnQoaSkge1xuICAgIGNvbnN0IG91dGNvbWUgPSB7XG4gICAgICB2YWxpZDogZmFsc2UsXG4gICAgICBib2FyZFN0YXRlOiB0aGlzLnAxLmJvYXJkLmJvYXJkLFxuICAgIH07XG5cbiAgICBpZiAoIXRoaXMucGxhY2VtZW50U3RhdGUuYWxsU2hpcHNQbGFjZWQpIHtcbiAgICAgIGNvbnN0IHNoaXBMZW5ndGggPSBzaGlwTGVuZ3Roc1t0aGlzLnBsYWNlbWVudFN0YXRlLmN1cnJlbnRTaGlwXTtcblxuICAgICAgY29uc3QgbG9jcyA9IFsuLi5BcnJheShzaGlwTGVuZ3RoKS5rZXlzKCldLm1hcCgobikgPT4gKCh0aGlzLnBsYWNlbWVudFN0YXRlLmF4aXMgPT09ICd4JykgPyBpICsgbiA6IGkgKyAobiAqIDEwKSkpO1xuXG4gICAgICBjb25zdCBpc1ZhbGlkID0gdGhpcy5wMS5ib2FyZC5jaGVja0NvbGxpc2lvbnMobG9jcywgdGhpcy5wbGFjZW1lbnRTdGF0ZS5heGlzKTtcblxuICAgICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgICAgb3V0Y29tZS52YWxpZCA9IHRydWU7XG4gICAgICAgIG91dGNvbWUudmlld0xvY3MgPSBsb2NzO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnBsYWNlbWVudFN0YXRlLmF4aXMgPT09ICd5Jykge1xuICAgICAgICBvdXRjb21lLnZpZXdMb2NzID0gbG9jcy5maWx0ZXIoKGxvYykgPT4gbG9jIDwgMTAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGZpcnN0TG9jID0gbG9jc1swXTtcblxuICAgICAgICBpZiAoZmlyc3RMb2MgPCAxMCkge1xuICAgICAgICAgIG91dGNvbWUudmlld0xvY3MgPSBsb2NzLmZpbHRlcigobG9jKSA9PiBsb2MgPCAxMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0Y29tZS52aWV3TG9jcyA9IGxvY3MuZmlsdGVyKChsb2MpID0+IGxvYy50b1N0cmluZygpWzBdID09PSBmaXJzdExvYy50b1N0cmluZygpWzBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXRjb21lO1xuICB9XG5cbiAgcGxhY2VTaGlwKGluZGV4KSB7XG4gICAgY29uc3QgaW5mbyA9IHt9O1xuXG4gICAgdGhpcy5wMS5ib2FyZC5wbGFjZVNoaXAodGhpcy5wbGFjZW1lbnRTdGF0ZS5jdXJyZW50U2hpcCwgaW5kZXgsIHRoaXMucGxhY2VtZW50U3RhdGUuYXhpcyk7XG5cbiAgICBpbmZvLmJvYXJkID0gdGhpcy5wMS5ib2FyZC5ib2FyZDtcblxuICAgIGlmICh0aGlzLnAxLmJvYXJkLmdldFNoaXBzUGxhY2VkKCkubGVuZ3RoID09PSA1KSB7XG4gICAgICBpbmZvLm5leHRTaGlwID0gbnVsbDtcbiAgICAgIHRoaXMucGxhY2VtZW50U3RhdGUuYWxsU2hpcHNQbGFjZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuZXh0U2hpcCA9IGdldE5leHRTaGlwKHRoaXMucGxhY2VtZW50U3RhdGUuY3VycmVudFNoaXApO1xuICAgICAgdGhpcy5wbGFjZW1lbnRTdGF0ZS5jdXJyZW50U2hpcCA9IG5leHRTaGlwO1xuICAgICAgaW5mby5uZXh0U2hpcCA9IG5leHRTaGlwO1xuICAgIH1cblxuICAgIHJldHVybiBpbmZvO1xuICB9XG5cbiAgdG9nZ2xlUGxhY2VtZW50QXhpcygpIHtcbiAgICB0aGlzLnBsYWNlbWVudFN0YXRlLmF4aXMgPSAodGhpcy5wbGFjZW1lbnRTdGF0ZS5heGlzID09PSAneCcpID8gJ3knIDogJ3gnO1xuICB9XG5cbiAgcmFuZG9taXplUGxheWVyU2hpcHMoKSB7XG4gICAgdGhpcy5wMS5ib2FyZC5pbml0Qm9hcmQoKTtcbiAgICB0aGlzLnAxLmJvYXJkLnBsYWNlU2hpcHNSYW5kb21seSgpO1xuXG4gICAgdGhpcy5wbGFjZW1lbnRTdGF0ZS5hbGxTaGlwc1BsYWNlZCA9IHRydWU7XG5cbiAgICByZXR1cm4gdGhpcy5wMS5ib2FyZC5ib2FyZDtcbiAgfVxuXG4gIHJlc2V0UGxheWVyQm9hcmQoKSB7XG4gICAgdGhpcy5wMS5ib2FyZC5pbml0Qm9hcmQoKTtcblxuICAgIHRoaXMucGxhY2VtZW50U3RhdGUgPSB7XG4gICAgICBheGlzOiAneCcsXG4gICAgICBjdXJyZW50U2hpcDogJ2NhcnJpZXInLFxuICAgICAgYWxsU2hpcHNQbGFjZWQ6IGZhbHNlLFxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5wMS5ib2FyZC5ib2FyZDtcbiAgfVxuXG4gIHNldHVwR2FtZSgpIHtcbiAgICB0aGlzLnZpZXcucmVuZGVyQm9hcmQodGhpcy5wMSk7XG4gICAgdGhpcy52aWV3LnJlbmRlclN0YXJ0U2NyZWVuKCk7XG5cbiAgICB0aGlzLnZpZXcuYmluZE1vdXNlT3ZlckNlbGwodGhpcy5jaGVja1ZhbGlkUGxhY2VtZW50LmJpbmQodGhpcykpO1xuICAgIHRoaXMudmlldy5iaW5kUHJlc3NTcGFjZUtleSh0aGlzLnRvZ2dsZVBsYWNlbWVudEF4aXMuYmluZCh0aGlzKSk7XG4gICAgdGhpcy52aWV3LmJpbmRDbGlja1BsYWNlbWVudENlbGwodGhpcy5wbGFjZVNoaXAuYmluZCh0aGlzKSk7XG5cbiAgICB0aGlzLnZpZXcuYmluZENsaWNrUmFuZG9tQnV0dG9uKHRoaXMucmFuZG9taXplUGxheWVyU2hpcHMuYmluZCh0aGlzKSk7XG4gICAgdGhpcy52aWV3LmJpbmRDbGlja1Jlc2V0QnV0dG9uKHRoaXMucmVzZXRQbGF5ZXJCb2FyZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnZpZXcuYmluZENsaWNrU3RhcnRCdXR0b24odGhpcy5zdGFydEdhbWUuYmluZCh0aGlzKSk7XG4gIH1cblxuICBzdGFydEdhbWUoKSB7XG4gICAgdGhpcy5wMi5ib2FyZC5wbGFjZVNoaXBzUmFuZG9tbHkoKTtcblxuICAgIHRoaXMudmlldy5yZXNldEJvYXJkRXZlbnRMaXN0ZW5lcnModGhpcy5wMS5uYW1lKTtcblxuICAgIHRoaXMudmlldy5yZW5kZXJCb2FyZCh0aGlzLnAxKTtcbiAgICB0aGlzLnZpZXcucmVuZGVyQm9hcmRJbmZvKHRoaXMucDEpO1xuXG4gICAgdGhpcy52aWV3LnJlbmRlckJvYXJkKHRoaXMucDIpO1xuICAgIHRoaXMudmlldy5yZW5kZXJCb2FyZEluZm8odGhpcy5wMik7XG5cbiAgICB0aGlzLnZpZXcuYmluZENsaWNrT3Bwb25lbnRDZWxsKHRoaXMucGxheVBsYXllclR1cm4uYmluZCh0aGlzKSwgdGhpcy5wMSk7XG4gICAgdGhpcy52aWV3LmJpbmRDbGlja09wcG9uZW50Q2VsbCh0aGlzLnBsYXlDb21wdXRlclR1cm4uYmluZCh0aGlzKSwgdGhpcy5wMik7XG4gICAgdGhpcy52aWV3LmJpbmRDbGlja1Jlc3RhcnRCdXR0b24odGhpcy5yZXN0YXJ0R2FtZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHJlc3RhcnRHYW1lKCkge1xuICAgIHRoaXMuaW5pdCgpO1xuXG4gICAgdGhpcy5zZXR1cEdhbWUoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHYW1lO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBHYW1lIGZyb20gJy4vbW9kdWxlcy9nYW1lJztcblxuaW1wb3J0ICcuLi9zdHlsZXMvbWFpbi5jc3MnO1xuXG5jb25zdCBnYW1lID0gbmV3IEdhbWUoKTtcblxuZ2FtZS5zZXR1cEdhbWUoKTtcbi8vIGdhbWUuc3RhcnRHYW1lKCk7XG4iXSwibmFtZXMiOlsiU2hpcCIsInJlcXVpcmUiLCJjaGVja0VkZ2VDb2xsaXNpb25zIiwiR2FtZUJvYXJkIiwidGhpcyIsImJvYXJkIiwic2hpcHMiLCJjYXJyaWVyIiwiYmF0dGxlc2hpcCIsImNydWlzZXIiLCJzdWJtYXJpbmUiLCJwYXRyb2xCb2F0IiwiaW5pdEJvYXJkIiwic2hpcE5hbWUiLCJzdGFydCIsImF4aXMiLCJzaGlwIiwicGxhY2UiLCJsb2NzIiwiQXJyYXkiLCJsZW5ndGgiLCJrZXlzIiwibWFwIiwibiIsImNoZWNrQ29sbGlzaW9ucyIsImxvYyIsIm5hbWUiLCJPYmplY3QiLCJmaWx0ZXIiLCJpc1BsYWNlZCIsImkiLCJwdXNoIiwiaXNTaG90IiwiZm9yRWFjaCIsIm1vdmVJbmZvIiwiY2VsbCIsInRhcmdldCIsImhpdCIsInN1bmsiLCJpc1N1bmsiLCJheGVzIiwiY2VsbHMiLCJ2YWxpZFBsYWNlbWVudCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInBsYWNlU2hpcCIsIm1vZHVsZSIsImV4cG9ydHMiLCJQbGF5ZXIiLCJhaSIsIm1vdmVzTWFkZSIsIkFJIiwib3Bwb25lbnQiLCJyZWNlaXZlQXR0YWNrIiwiaGl0cyIsImxvY3NTdHIiLCJ0b1N0cmluZyIsInNvbWUiLCJzbGljZSIsImluZGV4T2YiLCJjcmVhdGVFbGVtZW50IiwidGFnIiwiY2xhc3NOYW1lIiwiZWxlbWVudCIsImRvY3VtZW50IiwicmFuZEVsZW1lbnQiLCJhcnIiLCJnZXRBY3RpdmVTaGlwcyIsInNoaXBNb3ZlcyIsIm1vdmUiLCJTZXQiLCJzaGlwTGVuZ3RocyIsImdldE5leHRTaGlwIiwiY3VycmVudFNoaXAiLCJzaGlwTmFtZXMiLCJpbmRleCIsInByb2plY3RTaGlwTG9jcyIsIm9mZnNldCIsInNoaWZ0IiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJpZCIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJqb2luIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0IiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJyZXBsYWNlIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsImdldHRlciIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInAiLCJiIiwiYmFzZVVSSSIsInNlbGYiLCJocmVmIiwibmMiLCJzdGFydEJ1dHRvbiIsImlubmVyVGV4dCIsInJlc3RhcnRCdXR0b24iLCJ0dXJuQ291bnRlciIsImVsZW1lbnRzIiwicDFHYW1lV2luZG93IiwiZ2V0RWxlbWVudEJ5SWQiLCJwMkdhbWVXaW5kb3ciLCJwMUJvYXJkIiwicDJCb2FyZCIsIm1lc3NhZ2VXaW5kb3ciLCJnYW1lTWVzc2FnZSIsInBsYXllciIsImdyaWQiLCJpbm5lckhUTUwiLCJkaXNwbGF5IiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kIiwiY2hpbGRyZW4iLCJ0ZXh0IiwicmVzZXRXaW5kb3ciLCJyZW5kZXJJbk1lc3NhZ2VXaW5kb3ciLCJzZXRNZXNzYWdlIiwiZ2FtZUJ1dHRvbnMiLCJyYW5kb21CdXR0b24iLCJyZXNldEJ1dHRvbiIsImJvYXJkSW5mbyIsInNoaXBUZXh0IiwicHJvZ3Jlc3NNZXRlciIsImhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0IiwicGFyc2VJbnQiLCJkYXRhc2V0Iiwib3V0Y29tZSIsInZpZXdMb2NzIiwiY2VsbENsYXNzIiwidmFsaWQiLCJib2FyZFN0YXRlIiwiYm9hcmRDZWxsIiwidmlld0NlbGwiLCJpbmNsdWRlcyIsImNvZGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY29udGFpbnMiLCJtb3VzZW92ZXJFdmVudCIsIkV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImluZm8iLCJjb2xvckJvYXJkIiwibmV4dFNoaXAiLCJ2YWxpZE1vdmUiLCJvcHBCb2FyZCIsInR1cm5Db3VudCIsIm5ld1ZhbHVlIiwiZ2V0QXR0cmlidXRlIiwid2lubmVyIiwibWVzc2FnZSIsInJlc2V0Qm9hcmRFdmVudExpc3RlbmVycyIsImxhc3RDaGlsZCIsImxhYmVsIiwicHJlcGVuZCIsInBsYXllcldpbmRvdyIsInBsYXllck5hbWUiLCJvbGRCb2FyZCIsImNsb25lQm9hcmQiLCJjbG9uZU5vZGUiLCJyZXBsYWNlQ2hpbGQiLCJjZWxsc0hpdCIsIm1vZGVsQm9hcmQiLCJvZmZzZXRzIiwiY2VsbHNTaG90IiwibGVnYWxNb3ZlcyIsImdldFJhbmRvbVNob3QiLCJwcmV2TW92ZSIsInByZXZDZWxsIiwiZmluZFN1aXRhYmxlTW92ZXMiLCJhY3RpdmVTaGlwcyIsInByZXZTaGlwIiwiaGlkZGVuU2hpcExlbmd0aHMiLCJnZXRVbmRpc2NvdmVyZWRTaGlwTGVuZ3RocyIsInNoaXBMZW5ndGgiLCJ2YWxpZExvY3MiLCJtb2RlbFZhbGlkUGxhY2VtZW50cyIsInNoaXBDZWxsc0hpdCIsInZhbGlkTmV4dE1vdmVzIiwiZmluZFZhbGlkUHJvamVjdGlvbiIsImF4aXNPZmZzZXRzIiwibGltaXRzIiwibWluIiwibWF4IiwibGltaXQiLCJnZXRFbXB0eUxvY3MiLCJlbXB0eUxvYyIsImNsaWNrIiwibCIsInByb2plY3RlZExvY3MiLCJpbml0IiwicDEiLCJwMiIsInZpZXciLCJWaWV3IiwidHVybiIsInBsYWNlbWVudFN0YXRlIiwiYWxsU2hpcHNQbGFjZWQiLCJzaGlwc1N1bmsiLCJmaXJlU2hvdCIsImNoZWNrV2luIiwic3dpdGNoVHVybiIsIm5leHRJbmRleCIsImdldFNtYXJ0U2hvdCIsImdldENlbGwiLCJjbGlja0NlbGwiLCJmaXJzdExvYyIsImdldFNoaXBzUGxhY2VkIiwicGxhY2VTaGlwc1JhbmRvbWx5IiwicmVuZGVyQm9hcmQiLCJyZW5kZXJTdGFydFNjcmVlbiIsImJpbmRNb3VzZU92ZXJDZWxsIiwiY2hlY2tWYWxpZFBsYWNlbWVudCIsImJpbmQiLCJiaW5kUHJlc3NTcGFjZUtleSIsInRvZ2dsZVBsYWNlbWVudEF4aXMiLCJiaW5kQ2xpY2tQbGFjZW1lbnRDZWxsIiwiYmluZENsaWNrUmFuZG9tQnV0dG9uIiwicmFuZG9taXplUGxheWVyU2hpcHMiLCJiaW5kQ2xpY2tSZXNldEJ1dHRvbiIsInJlc2V0UGxheWVyQm9hcmQiLCJiaW5kQ2xpY2tTdGFydEJ1dHRvbiIsInN0YXJ0R2FtZSIsInJlbmRlckJvYXJkSW5mbyIsImJpbmRDbGlja09wcG9uZW50Q2VsbCIsInBsYXlQbGF5ZXJUdXJuIiwicGxheUNvbXB1dGVyVHVybiIsImJpbmRDbGlja1Jlc3RhcnRCdXR0b24iLCJyZXN0YXJ0R2FtZSIsInNldHVwR2FtZSIsIkdhbWUiXSwic291cmNlUm9vdCI6IiJ9